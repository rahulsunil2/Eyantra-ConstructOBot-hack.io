
robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a2  00800200  00002512  000025a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002512  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000019c  008003a2  008003a2  00002748  2**0
                  ALLOC
  3 .stab         00001e84  00000000  00000000  00002748  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000006a4  00000000  00000000  000045cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000c8  00000000  00000000  00004c70  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d4b  00000000  00000000  00004d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004d0  00000000  00000000  00006a83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c33  00000000  00000000  00006f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006e4  00000000  00000000  00007b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000824  00000000  00000000  0000826c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b42  00000000  00000000  00008a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  0000a5d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_5>
      18:	0c 94 57 02 	jmp	0x4ae	; 0x4ae <__vector_6>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_51>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e1       	ldi	r30, 0x12	; 18
      fc:	f5 e2       	ldi	r31, 0x25	; 37
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a2 3a       	cpi	r26, 0xA2	; 162
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	15 e0       	ldi	r17, 0x05	; 5
     110:	a2 ea       	ldi	r26, 0xA2	; 162
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ae 33       	cpi	r26, 0x3E	; 62
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 75 0d 	call	0x1aea	; 0x1aea <main>
     122:	0c 94 87 12 	jmp	0x250e	; 0x250e <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12a:	86 e6       	ldi	r24, 0x66	; 102
     12c:	9e e0       	ldi	r25, 0x0E	; 14
     12e:	01 97       	sbiw	r24, 0x01	; 1
     130:	f1 f7       	brne	.-4      	; 0x12e <lcd_set_4bit+0x4>
     132:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     134:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     136:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     138:	80 e3       	ldi	r24, 0x30	; 48
     13a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     13c:	42 9a       	sbi	0x08, 2	; 8
     13e:	ef ef       	ldi	r30, 0xFF	; 255
     140:	f7 e4       	ldi	r31, 0x47	; 71
     142:	31 97       	sbiw	r30, 0x01	; 1
     144:	f1 f7       	brne	.-4      	; 0x142 <lcd_set_4bit+0x18>
     146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_set_4bit+0x1e>
     148:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     14a:	42 98       	cbi	0x08, 2	; 8
     14c:	e6 e6       	ldi	r30, 0x66	; 102
     14e:	fe e0       	ldi	r31, 0x0E	; 14
     150:	31 97       	sbiw	r30, 0x01	; 1
     152:	f1 f7       	brne	.-4      	; 0x150 <lcd_set_4bit+0x26>
     154:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     156:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     158:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     15a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     15c:	42 9a       	sbi	0x08, 2	; 8
     15e:	ef ef       	ldi	r30, 0xFF	; 255
     160:	f7 e4       	ldi	r31, 0x47	; 71
     162:	31 97       	sbiw	r30, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_set_4bit+0x38>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_set_4bit+0x3e>
     168:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     16a:	42 98       	cbi	0x08, 2	; 8
     16c:	e6 e6       	ldi	r30, 0x66	; 102
     16e:	fe e0       	ldi	r31, 0x0E	; 14
     170:	31 97       	sbiw	r30, 0x01	; 1
     172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x46>
     174:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     176:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     178:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
     17a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     17c:	42 9a       	sbi	0x08, 2	; 8
     17e:	8f ef       	ldi	r24, 0xFF	; 255
     180:	97 e4       	ldi	r25, 0x47	; 71
     182:	01 97       	sbiw	r24, 0x01	; 1
     184:	f1 f7       	brne	.-4      	; 0x182 <lcd_set_4bit+0x58>
     186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_set_4bit+0x5e>
     188:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     18a:	42 98       	cbi	0x08, 2	; 8
     18c:	e6 e6       	ldi	r30, 0x66	; 102
     18e:	fe e0       	ldi	r31, 0x0E	; 14
     190:	31 97       	sbiw	r30, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x66>
     194:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     196:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     198:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     19a:	80 e2       	ldi	r24, 0x20	; 32
     19c:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
     19e:	42 9a       	sbi	0x08, 2	; 8
     1a0:	8f ef       	ldi	r24, 0xFF	; 255
     1a2:	97 e4       	ldi	r25, 0x47	; 71
     1a4:	01 97       	sbiw	r24, 0x01	; 1
     1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_set_4bit+0x7a>
     1a8:	00 c0       	rjmp	.+0      	; 0x1aa <lcd_set_4bit+0x80>
     1aa:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     1ac:	42 98       	cbi	0x08, 2	; 8

	
}
     1ae:	08 95       	ret

000001b0 <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
     1b0:	98 b1       	in	r25, 0x08	; 8
     1b2:	9f 70       	andi	r25, 0x0F	; 15
     1b4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     1b6:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
     1b8:	28 2f       	mov	r18, r24
     1ba:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     1bc:	92 2b       	or	r25, r18
     1be:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
     1c0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1c2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1c4:	42 9a       	sbi	0x08, 2	; 8
     1c6:	ef ef       	ldi	r30, 0xFF	; 255
     1c8:	f7 e4       	ldi	r31, 0x47	; 71
     1ca:	31 97       	sbiw	r30, 0x01	; 1
     1cc:	f1 f7       	brne	.-4      	; 0x1ca <lcd_wr_command+0x1a>
     1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <lcd_wr_command+0x20>
     1d0:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     1d2:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
     1d4:	98 b1       	in	r25, 0x08	; 8
     1d6:	9f 70       	andi	r25, 0x0F	; 15
     1d8:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
     1da:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
     1dc:	82 95       	swap	r24
     1de:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
     1e0:	89 2b       	or	r24, r25
     1e2:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
     1e4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     1e6:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     1e8:	42 9a       	sbi	0x08, 2	; 8
     1ea:	8f ef       	ldi	r24, 0xFF	; 255
     1ec:	97 e4       	ldi	r25, 0x47	; 71
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_wr_command+0x3e>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <lcd_wr_command+0x44>
     1f4:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     1f6:	42 98       	cbi	0x08, 2	; 8
}
     1f8:	08 95       	ret

000001fa <lcd_init>:
}

//Function to Initialize LCD
void lcd_init()
{
	lcd_set_4bit();
     1fa:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
     1fe:	86 e6       	ldi	r24, 0x66	; 102
     200:	9e e0       	ldi	r25, 0x0E	; 14
     202:	01 97       	sbiw	r24, 0x01	; 1
     204:	f1 f7       	brne	.-4      	; 0x202 <lcd_init+0x8>
     206:	00 00       	nop
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     208:	88 e2       	ldi	r24, 0x28	; 40
     20a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x01);
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x06);
     214:	86 e0       	ldi	r24, 0x06	; 6
     216:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x0E);
     21a:	8e e0       	ldi	r24, 0x0E	; 14
     21c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
	lcd_wr_command(0x80);
     220:	80 e8       	ldi	r24, 0x80	; 128
     222:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
		
}
     226:	08 95       	ret

00000228 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
     228:	98 b1       	in	r25, 0x08	; 8
     22a:	9f 70       	andi	r25, 0x0F	; 15
     22c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
     22e:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
     230:	28 2f       	mov	r18, r24
     232:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
     234:	92 2b       	or	r25, r18
     236:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
     238:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     23a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     23c:	42 9a       	sbi	0x08, 2	; 8
     23e:	ef ef       	ldi	r30, 0xFF	; 255
     240:	f7 e4       	ldi	r31, 0x47	; 71
     242:	31 97       	sbiw	r30, 0x01	; 1
     244:	f1 f7       	brne	.-4      	; 0x242 <lcd_wr_char+0x1a>
     246:	00 c0       	rjmp	.+0      	; 0x248 <lcd_wr_char+0x20>
     248:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     24a:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
     24c:	98 b1       	in	r25, 0x08	; 8
     24e:	9f 70       	andi	r25, 0x0F	; 15
     250:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
     252:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
     254:	82 95       	swap	r24
     256:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
     258:	89 2b       	or	r24, r25
     25a:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
     25c:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
     25e:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
     260:	42 9a       	sbi	0x08, 2	; 8
     262:	8f ef       	ldi	r24, 0xFF	; 255
     264:	97 e4       	ldi	r25, 0x47	; 71
     266:	01 97       	sbiw	r24, 0x01	; 1
     268:	f1 f7       	brne	.-4      	; 0x266 <lcd_wr_char+0x3e>
     26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_wr_char+0x44>
     26c:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
     26e:	42 98       	cbi	0x08, 2	; 8
}
     270:	08 95       	ret

00000272 <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
     272:	80 e8       	ldi	r24, 0x80	; 128
     274:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
}
     278:	08 95       	ret

0000027a <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	ec 01       	movw	r28, r24
	while(*str != '\0')
     280:	88 81       	ld	r24, Y
     282:	88 23       	and	r24, r24
     284:	31 f0       	breq	.+12     	; 0x292 <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
     286:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
     288:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
     28c:	89 91       	ld	r24, Y+
     28e:	88 23       	and	r24, r24
     290:	d9 f7       	brne	.-10     	; 0x288 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
     298:	82 30       	cpi	r24, 0x02	; 2
     29a:	79 f0       	breq	.+30     	; 0x2ba <lcd_cursor+0x22>
     29c:	83 30       	cpi	r24, 0x03	; 3
     29e:	18 f4       	brcc	.+6      	; 0x2a6 <lcd_cursor+0xe>
     2a0:	81 30       	cpi	r24, 0x01	; 1
     2a2:	c9 f4       	brne	.+50     	; 0x2d6 <lcd_cursor+0x3e>
     2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <lcd_cursor+0x18>
     2a6:	83 30       	cpi	r24, 0x03	; 3
     2a8:	69 f0       	breq	.+26     	; 0x2c4 <lcd_cursor+0x2c>
     2aa:	84 30       	cpi	r24, 0x04	; 4
     2ac:	a1 f4       	brne	.+40     	; 0x2d6 <lcd_cursor+0x3e>
     2ae:	0f c0       	rjmp	.+30     	; 0x2ce <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
     2b0:	86 2f       	mov	r24, r22
     2b2:	81 58       	subi	r24, 0x81	; 129
     2b4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
     2b8:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
     2ba:	86 2f       	mov	r24, r22
     2bc:	81 54       	subi	r24, 0x41	; 65
     2be:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
     2c2:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
     2c4:	86 2f       	mov	r24, r22
     2c6:	8d 56       	subi	r24, 0x6D	; 109
     2c8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
     2cc:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
     2ce:	86 2f       	mov	r24, r22
     2d0:	8d 52       	subi	r24, 0x2D	; 45
     2d2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <lcd_wr_command>
     2d6:	08 95       	ret

000002d8 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
     2d8:	0f 93       	push	r16
     2da:	1f 93       	push	r17
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	8a 01       	movw	r16, r20
     2e2:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
     2e4:	88 23       	and	r24, r24
     2e6:	11 f0       	breq	.+4      	; 0x2ec <lcd_print+0x14>
     2e8:	66 23       	and	r22, r22
     2ea:	19 f4       	brne	.+6      	; 0x2f2 <lcd_print+0x1a>
	{
		lcd_home();
     2ec:	0e 94 39 01 	call	0x272	; 0x272 <lcd_home>
     2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
     2f2:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	}
	if(digits==5 || flag==1)
     2f6:	c5 30       	cpi	r28, 0x05	; 5
     2f8:	d1 05       	cpc	r29, r1
     2fa:	71 f4       	brne	.+28     	; 0x318 <lcd_print+0x40>
	{
		million=value/10000+48;
     2fc:	c8 01       	movw	r24, r16
     2fe:	60 e1       	ldi	r22, 0x10	; 16
     300:	77 e2       	ldi	r23, 0x27	; 39
     302:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
     306:	cb 01       	movw	r24, r22
     308:	c0 96       	adiw	r24, 0x30	; 48
     30a:	90 93 bf 04 	sts	0x04BF, r25
     30e:	80 93 be 04 	sts	0x04BE, r24
		lcd_wr_char(million);
     312:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
     316:	03 c0       	rjmp	.+6      	; 0x31e <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
     318:	c4 30       	cpi	r28, 0x04	; 4
     31a:	d1 05       	cpc	r29, r1
     31c:	b9 f4       	brne	.+46     	; 0x34c <lcd_print+0x74>
	{
		temp = value/1000;
     31e:	c8 01       	movw	r24, r16
     320:	68 ee       	ldi	r22, 0xE8	; 232
     322:	73 e0       	ldi	r23, 0x03	; 3
     324:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
     328:	cb 01       	movw	r24, r22
     32a:	70 93 c5 04 	sts	0x04C5, r23
     32e:	60 93 c4 04 	sts	0x04C4, r22
		thousand = temp%10 + 48;
     332:	6a e0       	ldi	r22, 0x0A	; 10
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
     33a:	c0 96       	adiw	r24, 0x30	; 48
     33c:	90 93 39 05 	sts	0x0539, r25
     340:	80 93 38 05 	sts	0x0538, r24
		lcd_wr_char(thousand);
     344:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	01 c0       	rjmp	.+2      	; 0x34e <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
     34c:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
     34e:	c3 30       	cpi	r28, 0x03	; 3
     350:	d1 05       	cpc	r29, r1
     352:	11 f0       	breq	.+4      	; 0x358 <lcd_print+0x80>
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	b1 f4       	brne	.+44     	; 0x384 <lcd_print+0xac>
	{
		temp = value/100;
     358:	c8 01       	movw	r24, r16
     35a:	64 e6       	ldi	r22, 0x64	; 100
     35c:	70 e0       	ldi	r23, 0x00	; 0
     35e:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
     362:	cb 01       	movw	r24, r22
     364:	70 93 c5 04 	sts	0x04C5, r23
     368:	60 93 c4 04 	sts	0x04C4, r22
		hundred = temp%10 + 48;
     36c:	6a e0       	ldi	r22, 0x0A	; 10
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
     374:	c0 96       	adiw	r24, 0x30	; 48
     376:	90 93 d1 04 	sts	0x04D1, r25
     37a:	80 93 d0 04 	sts	0x04D0, r24
		lcd_wr_char(hundred);
     37e:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
     382:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
     384:	c2 30       	cpi	r28, 0x02	; 2
     386:	d1 05       	cpc	r29, r1
     388:	11 f0       	breq	.+4      	; 0x38e <lcd_print+0xb6>
     38a:	81 30       	cpi	r24, 0x01	; 1
     38c:	b1 f4       	brne	.+44     	; 0x3ba <lcd_print+0xe2>
	{
		temp = value/10;
     38e:	2a e0       	ldi	r18, 0x0A	; 10
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	c8 01       	movw	r24, r16
     394:	b9 01       	movw	r22, r18
     396:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
     39a:	cb 01       	movw	r24, r22
     39c:	70 93 c5 04 	sts	0x04C5, r23
     3a0:	60 93 c4 04 	sts	0x04C4, r22
		tens = temp%10 + 48;
     3a4:	b9 01       	movw	r22, r18
     3a6:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
     3aa:	c0 96       	adiw	r24, 0x30	; 48
     3ac:	90 93 c8 04 	sts	0x04C8, r25
     3b0:	80 93 c7 04 	sts	0x04C7, r24
		lcd_wr_char(tens);
     3b4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
		flag=1;
     3b8:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
     3ba:	c1 30       	cpi	r28, 0x01	; 1
     3bc:	d1 05       	cpc	r29, r1
     3be:	11 f0       	breq	.+4      	; 0x3c4 <lcd_print+0xec>
     3c0:	81 30       	cpi	r24, 0x01	; 1
     3c2:	61 f4       	brne	.+24     	; 0x3dc <lcd_print+0x104>
	{
		unit = value%10 + 48;
     3c4:	c8 01       	movw	r24, r16
     3c6:	6a e0       	ldi	r22, 0x0A	; 10
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	0e 94 13 11 	call	0x2226	; 0x2226 <__udivmodhi4>
     3ce:	c0 96       	adiw	r24, 0x30	; 48
     3d0:	90 93 37 05 	sts	0x0537, r25
     3d4:	80 93 36 05 	sts	0x0536, r24
		lcd_wr_char(unit);
     3d8:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	if(digits>5)
     3dc:	c6 30       	cpi	r28, 0x06	; 6
     3de:	d1 05       	cpc	r29, r1
     3e0:	1c f0       	brlt	.+6      	; 0x3e8 <lcd_print+0x110>
	{
		lcd_wr_char('E');
     3e2:	85 e4       	ldi	r24, 0x45	; 69
     3e4:	0e 94 14 01 	call	0x228	; 0x228 <lcd_wr_char>
	}
	
}
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	1f 91       	pop	r17
     3ee:	0f 91       	pop	r16
     3f0:	08 95       	ret

000003f2 <servo1_pin_config>:

char data; //to store received data from UDR1
char input_str[100] = ""; // stores the raw input string
void servo1_pin_config (void)
{
	DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     3f2:	25 9a       	sbi	0x04, 5	; 4
	PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     3f4:	2d 9a       	sbi	0x05, 5	; 5
}
     3f6:	08 95       	ret

000003f8 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
	DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     3f8:	26 9a       	sbi	0x04, 6	; 4
	PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     3fa:	2e 9a       	sbi	0x05, 6	; 5
}
     3fc:	08 95       	ret

000003fe <lcd_port_config>:

//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     3fe:	87 b1       	in	r24, 0x07	; 7
     400:	87 6f       	ori	r24, 0xF7	; 247
     402:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     404:	88 b1       	in	r24, 0x08	; 8
     406:	80 78       	andi	r24, 0x80	; 128
     408:	88 b9       	out	0x08, r24	; 8
}
     40a:	08 95       	ret

0000040c <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
	DDRF = 0x00;
     40c:	10 ba       	out	0x10, r1	; 16
	PORTF = 0x00;
     40e:	11 ba       	out	0x11, r1	; 17
	DDRK = 0x00;
     410:	10 92 07 01 	sts	0x0107, r1
	PORTK = 0x00;
     414:	10 92 08 01 	sts	0x0108, r1
}
     418:	08 95       	ret

0000041a <motion_pin_config>:

//Function to configure ports to enable robot's motion
void motion_pin_config (void) 
{
	DDRA = DDRA | 0x0F;
     41a:	81 b1       	in	r24, 0x01	; 1
     41c:	8f 60       	ori	r24, 0x0F	; 15
     41e:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0;
     420:	82 b1       	in	r24, 0x02	; 2
     422:	80 7f       	andi	r24, 0xF0	; 240
     424:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
     426:	ea e0       	ldi	r30, 0x0A	; 10
     428:	f1 e0       	ldi	r31, 0x01	; 1
     42a:	80 81       	ld	r24, Z
     42c:	88 61       	ori	r24, 0x18	; 24
     42e:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
     430:	eb e0       	ldi	r30, 0x0B	; 11
     432:	f1 e0       	ldi	r31, 0x01	; 1
     434:	80 81       	ld	r24, Z
     436:	88 61       	ori	r24, 0x18	; 24
     438:	80 83       	st	Z, r24
}
     43a:	08 95       	ret

0000043c <left_encoder_pin_config>:


//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
     43c:	6c 98       	cbi	0x0d, 4	; 13
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
     43e:	74 9a       	sbi	0x0e, 4	; 14
}
     440:	08 95       	ret

00000442 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
     442:	6d 98       	cbi	0x0d, 5	; 13
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
     444:	75 9a       	sbi	0x0e, 5	; 14
}
     446:	08 95       	ret

00000448 <buzzer_pin_config>:

//Function to initialize Buzzer
void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
     448:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
     44a:	43 98       	cbi	0x08, 3	; 8
}
     44c:	08 95       	ret

0000044e <interrupt_switch_config>:

//Function to configure Interrupt switch
void interrupt_switch_config (void)
{
	DDRE = DDRE & 0x7F;  //PORTE 7 pin set as input
     44e:	6f 98       	cbi	0x0d, 7	; 13
	PORTE = PORTE | 0x80; //PORTE7 internal pull-up enabled
     450:	77 9a       	sbi	0x0e, 7	; 14
}
     452:	08 95       	ret

00000454 <port_init>:

//Function to Initialize PORTS
void port_init()
{
	servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
     454:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <servo1_pin_config>
	servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
     458:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <servo2_pin_config>
	lcd_port_config();
     45c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <lcd_port_config>
	adc_pin_config();
     460:	0e 94 06 02 	call	0x40c	; 0x40c <adc_pin_config>
	motion_pin_config();	
     464:	0e 94 0d 02 	call	0x41a	; 0x41a <motion_pin_config>
	left_encoder_pin_config(); //left encoder pin config
     468:	0e 94 1e 02 	call	0x43c	; 0x43c <left_encoder_pin_config>
	right_encoder_pin_config(); //right encoder pin config
     46c:	0e 94 21 02 	call	0x442	; 0x442 <right_encoder_pin_config>
	buzzer_pin_config();
     470:	0e 94 24 02 	call	0x448	; 0x448 <buzzer_pin_config>
	interrupt_switch_config();
     474:	0e 94 27 02 	call	0x44e	; 0x44e <interrupt_switch_config>
}
     478:	08 95       	ret

0000047a <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
	cli(); //Clears the global interrupt
     47a:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
     47c:	ea e6       	ldi	r30, 0x6A	; 106
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	82 60       	ori	r24, 0x02	; 2
     484:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
     486:	ec 9a       	sbi	0x1d, 4	; 29
	sei();   // Enables the global interrupt
     488:	78 94       	sei
}
     48a:	08 95       	ret

0000048c <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
	cli(); //Clears the global interrupt
     48c:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
     48e:	ea e6       	ldi	r30, 0x6A	; 106
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	80 81       	ld	r24, Z
     494:	88 60       	ori	r24, 0x08	; 8
     496:	80 83       	st	Z, r24
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
     498:	ed 9a       	sbi	0x1d, 5	; 29
	sei();   // Enables the global interrupt
     49a:	78 94       	sei
}
     49c:	08 95       	ret

0000049e <buzzer_on>:


void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     49e:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
     4a0:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
     4a2:	88 b9       	out	0x08, r24	; 8
}
     4a4:	08 95       	ret

000004a6 <buzzer_off>:

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
     4a6:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
     4a8:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
     4aa:	88 b9       	out	0x08, r24	; 8
}
     4ac:	08 95       	ret

000004ae <__vector_6>:


//ISR for right position encoder
ISR(INT5_vect)
{
     4ae:	1f 92       	push	r1
     4b0:	0f 92       	push	r0
     4b2:	0f b6       	in	r0, 0x3f	; 63
     4b4:	0f 92       	push	r0
     4b6:	11 24       	eor	r1, r1
     4b8:	8f 93       	push	r24
     4ba:	9f 93       	push	r25
     4bc:	af 93       	push	r26
     4be:	bf 93       	push	r27
	ShaftCountRight++;  //increment right shaft position count
     4c0:	80 91 b0 04 	lds	r24, 0x04B0
     4c4:	90 91 b1 04 	lds	r25, 0x04B1
     4c8:	a0 91 b2 04 	lds	r26, 0x04B2
     4cc:	b0 91 b3 04 	lds	r27, 0x04B3
     4d0:	01 96       	adiw	r24, 0x01	; 1
     4d2:	a1 1d       	adc	r26, r1
     4d4:	b1 1d       	adc	r27, r1
     4d6:	80 93 b0 04 	sts	0x04B0, r24
     4da:	90 93 b1 04 	sts	0x04B1, r25
     4de:	a0 93 b2 04 	sts	0x04B2, r26
     4e2:	b0 93 b3 04 	sts	0x04B3, r27
}
     4e6:	bf 91       	pop	r27
     4e8:	af 91       	pop	r26
     4ea:	9f 91       	pop	r25
     4ec:	8f 91       	pop	r24
     4ee:	0f 90       	pop	r0
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	0f 90       	pop	r0
     4f4:	1f 90       	pop	r1
     4f6:	18 95       	reti

000004f8 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
     4f8:	1f 92       	push	r1
     4fa:	0f 92       	push	r0
     4fc:	0f b6       	in	r0, 0x3f	; 63
     4fe:	0f 92       	push	r0
     500:	11 24       	eor	r1, r1
     502:	8f 93       	push	r24
     504:	9f 93       	push	r25
     506:	af 93       	push	r26
     508:	bf 93       	push	r27
	ShaftCountLeft++;  //increment left shaft position count
     50a:	80 91 b4 04 	lds	r24, 0x04B4
     50e:	90 91 b5 04 	lds	r25, 0x04B5
     512:	a0 91 b6 04 	lds	r26, 0x04B6
     516:	b0 91 b7 04 	lds	r27, 0x04B7
     51a:	01 96       	adiw	r24, 0x01	; 1
     51c:	a1 1d       	adc	r26, r1
     51e:	b1 1d       	adc	r27, r1
     520:	80 93 b4 04 	sts	0x04B4, r24
     524:	90 93 b5 04 	sts	0x04B5, r25
     528:	a0 93 b6 04 	sts	0x04B6, r26
     52c:	b0 93 b7 04 	sts	0x04B7, r27
}
     530:	bf 91       	pop	r27
     532:	af 91       	pop	r26
     534:	9f 91       	pop	r25
     536:	8f 91       	pop	r24
     538:	0f 90       	pop	r0
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	0f 90       	pop	r0
     53e:	1f 90       	pop	r1
     540:	18 95       	reti

00000542 <timer5_init>:
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
	TCCR5B = 0x00;	//Stop
     542:	e1 e2       	ldi	r30, 0x21	; 33
     544:	f1 e0       	ldi	r31, 0x01	; 1
     546:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
     548:	8f ef       	ldi	r24, 0xFF	; 255
     54a:	80 93 25 01 	sts	0x0125, r24
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	90 93 24 01 	sts	0x0124, r25
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
     554:	10 92 29 01 	sts	0x0129, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
     558:	80 93 28 01 	sts	0x0128, r24
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
     55c:	10 92 2b 01 	sts	0x012B, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
     560:	80 93 2a 01 	sts	0x012A, r24
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
     564:	10 92 2d 01 	sts	0x012D, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
     568:	80 93 2c 01 	sts	0x012C, r24
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
     56c:	29 ea       	ldi	r18, 0xA9	; 169
     56e:	20 93 20 01 	sts	0x0120, r18
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
     572:	2b e0       	ldi	r18, 0x0B	; 11
     574:	20 83       	st	Z, r18
	TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     576:	2c ef       	ldi	r18, 0xFC	; 252
     578:	20 93 85 00 	sts	0x0085, r18
	TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
     57c:	90 93 84 00 	sts	0x0084, r25
	OCR1AH = 0x03;	//Output compare Register high value for servo 1
     580:	93 e0       	ldi	r25, 0x03	; 3
     582:	90 93 89 00 	sts	0x0089, r25
	OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
     586:	80 93 88 00 	sts	0x0088, r24
	OCR1BH = 0x03;	//Output compare Register high value for servo 2
     58a:	90 93 8b 00 	sts	0x008B, r25
	OCR1BL = 0xFF;	//Output Compare Register low Value For servo 2
     58e:	80 93 8a 00 	sts	0x008A, r24
	ICR1H  = 0x03;	
     592:	90 93 87 00 	sts	0x0087, r25
	ICR1L  = 0xFF;
     596:	80 93 86 00 	sts	0x0086, r24
	TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     59a:	8b ea       	ldi	r24, 0xAB	; 171
     59c:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
	TCCR1C = 0x00;
     5a0:	10 92 82 00 	sts	0x0082, r1
	TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     5a4:	8c e0       	ldi	r24, 0x0C	; 12
     5a6:	80 93 81 00 	sts	0x0081, r24
}
     5aa:	08 95       	ret

000005ac <adc_init>:

void adc_init()
{
	ADCSRA = 0x00;
     5ac:	ea e7       	ldi	r30, 0x7A	; 122
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
     5b2:	10 92 7b 00 	sts	0x007B, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
     5b6:	80 e2       	ldi	r24, 0x20	; 32
     5b8:	80 93 7c 00 	sts	0x007C, r24
	ACSR = 0x80;
     5bc:	80 e8       	ldi	r24, 0x80	; 128
     5be:	80 bf       	out	0x30, r24	; 48
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
     5c0:	86 e8       	ldi	r24, 0x86	; 134
     5c2:	80 83       	st	Z, r24
}
     5c4:	08 95       	ret

000005c6 <ADC_Conversion>:

//Function For ADC Conversion
unsigned char ADC_Conversion(unsigned char Ch) 
{
	unsigned char a;
	if(Ch>7)
     5c6:	88 30       	cpi	r24, 0x08	; 8
     5c8:	18 f0       	brcs	.+6      	; 0x5d0 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
     5ca:	98 e0       	ldi	r25, 0x08	; 8
     5cc:	90 93 7b 00 	sts	0x007B, r25
	}
	Ch = Ch & 0x07;  			
     5d0:	87 70       	andi	r24, 0x07	; 7
	ADMUX= 0x20| Ch;	   		
     5d2:	80 62       	ori	r24, 0x20	; 32
     5d4:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA = ADCSRA | 0x40;		//Set start conversion bit
     5d8:	ea e7       	ldi	r30, 0x7A	; 122
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	80 64       	ori	r24, 0x40	; 64
     5e0:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0);	//Wait for conversion to complete
     5e2:	80 81       	ld	r24, Z
     5e4:	84 ff       	sbrs	r24, 4
     5e6:	fd cf       	rjmp	.-6      	; 0x5e2 <ADC_Conversion+0x1c>
	a=ADCH;
     5e8:	80 91 79 00 	lds	r24, 0x0079
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
     5ec:	ea e7       	ldi	r30, 0x7A	; 122
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	90 81       	ld	r25, Z
     5f2:	90 61       	ori	r25, 0x10	; 16
     5f4:	90 83       	st	Z, r25
	ADCSRB = 0x00;
     5f6:	10 92 7b 00 	sts	0x007B, r1
	return a;
}
     5fa:	08 95       	ret

000005fc <print_sensor>:

//Function To Print Sensor Values At Desired Row And Column Location on LCD
void print_sensor(char row, char coloumn,unsigned char channel)
{
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	d8 2f       	mov	r29, r24
     602:	c6 2f       	mov	r28, r22
     604:	84 2f       	mov	r24, r20
	ADC_Value = ADC_Conversion(channel);
     606:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ADC_Conversion>
     60a:	48 2f       	mov	r20, r24
     60c:	80 93 c6 04 	sts	0x04C6, r24
	lcd_print(row, coloumn, ADC_Value, 3);
     610:	8d 2f       	mov	r24, r29
     612:	6c 2f       	mov	r22, r28
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	23 e0       	ldi	r18, 0x03	; 3
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lcd_print>
}
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	08 95       	ret

00000624 <velocity>:

//Function for velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
	OCR5AL = (unsigned char)left_motor;
     624:	80 93 28 01 	sts	0x0128, r24
	OCR5BL = (unsigned char)right_motor;
     628:	60 93 2a 01 	sts	0x012A, r22
}
     62c:	08 95       	ret

0000062e <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
	PortARestore = PORTA; 		// reading the PORTA original status
     62e:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
     630:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 		// removing upper nibbel for the protection
     632:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 		// reading the PORTA original status
	PortARestore &= 0xF0; 		// making lower direction nibbel to 0
	PortARestore |= Direction; // adding lower nibbel for forward command and restoring the PORTA status
     634:	98 2b       	or	r25, r24
	PORTA = PortARestore; 		// executing the command
     636:	92 b9       	out	0x02, r25	; 2
}
     638:	08 95       	ret

0000063a <forward>:

void forward (void) //both wheels forward
{
	motion_set(0x06);
     63a:	86 e0       	ldi	r24, 0x06	; 6
     63c:	0e 94 17 03 	call	0x62e	; 0x62e <motion_set>
}
     640:	08 95       	ret

00000642 <back>:

void back (void) //both wheels backward
{
	motion_set(0x09);
     642:	89 e0       	ldi	r24, 0x09	; 9
     644:	0e 94 17 03 	call	0x62e	; 0x62e <motion_set>
}
     648:	08 95       	ret

0000064a <left>:

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
     64a:	85 e0       	ldi	r24, 0x05	; 5
     64c:	0e 94 17 03 	call	0x62e	; 0x62e <motion_set>
}
     650:	08 95       	ret

00000652 <right>:

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
     652:	8a e0       	ldi	r24, 0x0A	; 10
     654:	0e 94 17 03 	call	0x62e	; 0x62e <motion_set>
}
     658:	08 95       	ret

0000065a <stop>:

void stop (void)
{
	motion_set(0x00);
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	0e 94 17 03 	call	0x62e	; 0x62e <motion_set>
}
     660:	08 95       	ret

00000662 <angle_rotate>:


//Function used for turning robot by specified degrees
void angle_rotate(unsigned int Degrees)
{
     662:	0f 93       	push	r16
     664:	1f 93       	push	r17
     666:	cf 93       	push	r28
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = (float) Degrees/ 4.090; // division by resolution to get shaft count
     668:	bc 01       	movw	r22, r24
     66a:	80 e0       	ldi	r24, 0x00	; 0
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	0e 94 85 10 	call	0x210a	; 0x210a <__floatunsisf>
     672:	28 e4       	ldi	r18, 0x48	; 72
     674:	31 ee       	ldi	r19, 0xE1	; 225
     676:	42 e8       	ldi	r20, 0x82	; 130
     678:	50 e4       	ldi	r21, 0x40	; 64
     67a:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__divsf3>
	ReqdShaftCountInt = (unsigned int) ReqdShaftCount;
     67e:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__fixunssfsi>
     682:	dc 01       	movw	r26, r24
     684:	cb 01       	movw	r24, r22
     686:	a0 e0       	ldi	r26, 0x00	; 0
     688:	b0 e0       	ldi	r27, 0x00	; 0
	ShaftCountRight = 0;
     68a:	10 92 b0 04 	sts	0x04B0, r1
     68e:	10 92 b1 04 	sts	0x04B1, r1
     692:	10 92 b2 04 	sts	0x04B2, r1
     696:	10 92 b3 04 	sts	0x04B3, r1
	ShaftCountLeft = 0;
     69a:	10 92 b4 04 	sts	0x04B4, r1
     69e:	10 92 b5 04 	sts	0x04B5, r1
     6a2:	10 92 b6 04 	sts	0x04B6, r1
     6a6:	10 92 b7 04 	sts	0x04B7, r1

	while (1)
	{
		if((ShaftCountRight >= ReqdShaftCountInt) | (ShaftCountLeft >= ReqdShaftCountInt))
     6aa:	f1 e0       	ldi	r31, 0x01	; 1
     6ac:	c0 e0       	ldi	r28, 0x00	; 0
     6ae:	40 91 b0 04 	lds	r20, 0x04B0
     6b2:	50 91 b1 04 	lds	r21, 0x04B1
     6b6:	60 91 b2 04 	lds	r22, 0x04B2
     6ba:	70 91 b3 04 	lds	r23, 0x04B3
     6be:	00 91 b4 04 	lds	r16, 0x04B4
     6c2:	10 91 b5 04 	lds	r17, 0x04B5
     6c6:	20 91 b6 04 	lds	r18, 0x04B6
     6ca:	30 91 b7 04 	lds	r19, 0x04B7
     6ce:	ef 2f       	mov	r30, r31
     6d0:	48 17       	cp	r20, r24
     6d2:	59 07       	cpc	r21, r25
     6d4:	6a 07       	cpc	r22, r26
     6d6:	7b 07       	cpc	r23, r27
     6d8:	08 f4       	brcc	.+2      	; 0x6dc <angle_rotate+0x7a>
     6da:	ec 2f       	mov	r30, r28
     6dc:	ee 23       	and	r30, r30
     6de:	49 f4       	brne	.+18     	; 0x6f2 <angle_rotate+0x90>
     6e0:	4f 2f       	mov	r20, r31
     6e2:	08 17       	cp	r16, r24
     6e4:	19 07       	cpc	r17, r25
     6e6:	2a 07       	cpc	r18, r26
     6e8:	3b 07       	cpc	r19, r27
     6ea:	08 f4       	brcc	.+2      	; 0x6ee <angle_rotate+0x8c>
     6ec:	4c 2f       	mov	r20, r28
     6ee:	44 23       	and	r20, r20
     6f0:	f1 f2       	breq	.-68     	; 0x6ae <angle_rotate+0x4c>
		break;
	}
	stop(); //Stop robot
     6f2:	0e 94 2d 03 	call	0x65a	; 0x65a <stop>
}
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	08 95       	ret

000006fe <linear_distance_mm>:
void linear_distance_mm(unsigned int DistanceInMM)
{
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     6fe:	bc 01       	movw	r22, r24
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 85 10 	call	0x210a	; 0x210a <__floatunsisf>
     708:	25 ee       	ldi	r18, 0xE5	; 229
     70a:	30 ed       	ldi	r19, 0xD0	; 208
     70c:	4a ea       	ldi	r20, 0xAA	; 170
     70e:	50 e4       	ldi	r21, 0x40	; 64
     710:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     714:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__fixunssfsi>
     718:	46 2f       	mov	r20, r22
     71a:	57 2f       	mov	r21, r23
     71c:	68 2f       	mov	r22, r24
     71e:	79 2f       	mov	r23, r25
	
	ShaftCountRight = 0;
     720:	10 92 b0 04 	sts	0x04B0, r1
     724:	10 92 b1 04 	sts	0x04B1, r1
     728:	10 92 b2 04 	sts	0x04B2, r1
     72c:	10 92 b3 04 	sts	0x04B3, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
     730:	80 91 b0 04 	lds	r24, 0x04B0
     734:	90 91 b1 04 	lds	r25, 0x04B1
     738:	a0 91 b2 04 	lds	r26, 0x04B2
     73c:	b0 91 b3 04 	lds	r27, 0x04B3
     740:	48 17       	cp	r20, r24
     742:	59 07       	cpc	r21, r25
     744:	6a 07       	cpc	r22, r26
     746:	7b 07       	cpc	r23, r27
     748:	98 f7       	brcc	.-26     	; 0x730 <linear_distance_mm+0x32>
		{
			break;
		}
	}
	stop(); //Stop robot
     74a:	0e 94 2d 03 	call	0x65a	; 0x65a <stop>
}
     74e:	08 95       	ret

00000750 <forward_mm>:


void forward_mm(unsigned int DistanceInMM)
{
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	ec 01       	movw	r28, r24
	forward();
     756:	0e 94 1d 03 	call	0x63a	; 0x63a <forward>
	linear_distance_mm(DistanceInMM);
     75a:	ce 01       	movw	r24, r28
     75c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <linear_distance_mm>
}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	ec 01       	movw	r28, r24
	back();
     76c:	0e 94 21 03 	call	0x642	; 0x642 <back>
	linear_distance_mm(DistanceInMM);
     770:	ce 01       	movw	r24, r28
     772:	0e 94 7f 03 	call	0x6fe	; 0x6fe <linear_distance_mm>
}
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	08 95       	ret

0000077c <left_degrees>:

void left_degrees(unsigned int Degrees)
{
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	left(); //Turn left
     782:	0e 94 25 03 	call	0x64a	; 0x64a <left>
	angle_rotate(Degrees);
     786:	ce 01       	movw	r24, r28
     788:	0e 94 31 03 	call	0x662	; 0x662 <angle_rotate>
}
     78c:	df 91       	pop	r29
     78e:	cf 91       	pop	r28
     790:	08 95       	ret

00000792 <right_degrees>:


void right_degrees(unsigned int Degrees)
{
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	ec 01       	movw	r28, r24
	// 88 pulses for 360 degrees rotation 4.090 degrees per count
	right(); //Turn right
     798:	0e 94 29 03 	call	0x652	; 0x652 <right>
	angle_rotate(Degrees);
     79c:	ce 01       	movw	r24, r28
     79e:	0e 94 31 03 	call	0x662	; 0x662 <angle_rotate>
}
     7a2:	df 91       	pop	r29
     7a4:	cf 91       	pop	r28
     7a6:	08 95       	ret

000007a8 <uart2_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
	UCSR2B = 0x00; //disable while setting baud rate
     7a8:	e1 ed       	ldi	r30, 0xD1	; 209
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	10 82       	st	Z, r1
	UCSR2A = 0x00;
     7ae:	10 92 d0 00 	sts	0x00D0, r1
	UCSR2C = 0x06;
     7b2:	86 e0       	ldi	r24, 0x06	; 6
     7b4:	80 93 d2 00 	sts	0x00D2, r24
	UBRR2L = 0x5F; //set baud rate lo
     7b8:	8f e5       	ldi	r24, 0x5F	; 95
     7ba:	80 93 d4 00 	sts	0x00D4, r24
	UBRR2H = 0x00; //set baud rate hi
     7be:	10 92 d5 00 	sts	0x00D5, r1
	UCSR2B = 0x98;
     7c2:	88 e9       	ldi	r24, 0x98	; 152
     7c4:	80 83       	st	Z, r24
}
     7c6:	08 95       	ret

000007c8 <__vector_51>:

SIGNAL(SIG_USART2_RECV)			// ISR for receive complete interrupt
{		
     7c8:	1f 92       	push	r1
     7ca:	0f 92       	push	r0
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	0f 92       	push	r0
     7d0:	0b b6       	in	r0, 0x3b	; 59
     7d2:	0f 92       	push	r0
     7d4:	11 24       	eor	r1, r1
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	6f 93       	push	r22
     7e0:	7f 93       	push	r23
     7e2:	8f 93       	push	r24
     7e4:	9f 93       	push	r25
     7e6:	af 93       	push	r26
     7e8:	bf 93       	push	r27
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
	data = UDR2; 				// making copy of data from UDR2 in 'data' variable
     7ee:	e6 ed       	ldi	r30, 0xD6	; 214
     7f0:	f0 e0       	ldi	r31, 0x00	; 0
     7f2:	80 81       	ld	r24, Z
     7f4:	80 93 ce 04 	sts	0x04CE, r24
	UDR2 = data; 				// echo data back to PC
     7f8:	80 83       	st	Z, r24
	strcat(input_str, &data);	// concatenate each ASCII character received to string input_str
     7fa:	8c e4       	ldi	r24, 0x4C	; 76
     7fc:	94 e0       	ldi	r25, 0x04	; 4
     7fe:	6e ec       	ldi	r22, 0xCE	; 206
     800:	74 e0       	ldi	r23, 0x04	; 4
     802:	0e 94 74 12 	call	0x24e8	; 0x24e8 <strcat>
}
     806:	ff 91       	pop	r31
     808:	ef 91       	pop	r30
     80a:	bf 91       	pop	r27
     80c:	af 91       	pop	r26
     80e:	9f 91       	pop	r25
     810:	8f 91       	pop	r24
     812:	7f 91       	pop	r23
     814:	6f 91       	pop	r22
     816:	5f 91       	pop	r21
     818:	4f 91       	pop	r20
     81a:	3f 91       	pop	r19
     81c:	2f 91       	pop	r18
     81e:	0f 90       	pop	r0
     820:	0b be       	out	0x3b, r0	; 59
     822:	0f 90       	pop	r0
     824:	0f be       	out	0x3f, r0	; 63
     826:	0f 90       	pop	r0
     828:	1f 90       	pop	r1
     82a:	18 95       	reti

0000082c <servo_1>:
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
	OCR1AH = 0x00;
     82c:	10 92 89 00 	sts	0x0089, r1
	strcat(input_str, &data);	// concatenate each ASCII character received to string input_str
}
void servo_1(unsigned char degrees)
{
	float PositionPanServo = 0;
	PositionPanServo = ((float)degrees / 1.86) + 35.0;
     830:	68 2f       	mov	r22, r24
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	80 e0       	ldi	r24, 0x00	; 0
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 85 10 	call	0x210a	; 0x210a <__floatunsisf>
     83c:	2b e7       	ldi	r18, 0x7B	; 123
     83e:	34 e1       	ldi	r19, 0x14	; 20
     840:	4e ee       	ldi	r20, 0xEE	; 238
     842:	5f e3       	ldi	r21, 0x3F	; 63
     844:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__divsf3>
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	4c e0       	ldi	r20, 0x0C	; 12
     84e:	52 e4       	ldi	r21, 0x42	; 66
     850:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__addsf3>
	OCR1AH = 0x00;
	OCR1AL = (unsigned char) PositionPanServo;
     854:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__fixunssfsi>
     858:	60 93 88 00 	sts	0x0088, r22
}
     85c:	08 95       	ret

0000085e <servo_2>:
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
	OCR1BH = 0x00;
     85e:	10 92 8b 00 	sts	0x008B, r1
	OCR1AL = (unsigned char) PositionPanServo;
}
void servo_2(unsigned char degrees)
{
	float PositionTiltServo = 0;
	PositionTiltServo = ((float)degrees / 1.86) + 35.0;
     862:	68 2f       	mov	r22, r24
     864:	70 e0       	ldi	r23, 0x00	; 0
     866:	80 e0       	ldi	r24, 0x00	; 0
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 85 10 	call	0x210a	; 0x210a <__floatunsisf>
     86e:	2b e7       	ldi	r18, 0x7B	; 123
     870:	34 e1       	ldi	r19, 0x14	; 20
     872:	4e ee       	ldi	r20, 0xEE	; 238
     874:	5f e3       	ldi	r21, 0x3F	; 63
     876:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__divsf3>
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	4c e0       	ldi	r20, 0x0C	; 12
     880:	52 e4       	ldi	r21, 0x42	; 66
     882:	0e 94 8d 0f 	call	0x1f1a	; 0x1f1a <__addsf3>
	OCR1BH = 0x00;
	OCR1BL = (unsigned char) PositionTiltServo;
     886:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__fixunssfsi>
     88a:	60 93 8a 00 	sts	0x008A, r22
}
     88e:	08 95       	ret

00000890 <servo_1_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
	OCR1AH = 0x03;
     890:	83 e0       	ldi	r24, 0x03	; 3
     892:	80 93 89 00 	sts	0x0089, r24
	OCR1AL = 0xFF; //Servo 1 off
     896:	8f ef       	ldi	r24, 0xFF	; 255
     898:	80 93 88 00 	sts	0x0088, r24
}
     89c:	08 95       	ret

0000089e <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
	OCR1BH = 0x03;
     89e:	83 e0       	ldi	r24, 0x03	; 3
     8a0:	80 93 8b 00 	sts	0x008B, r24
	OCR1BL = 0xFF; //Servo 2 off
     8a4:	8f ef       	ldi	r24, 0xFF	; 255
     8a6:	80 93 8a 00 	sts	0x008A, r24
}
     8aa:	08 95       	ret

000008ac <init_devices>:


void init_devices (void)
{
 	cli(); //Clears the global interrupts
     8ac:	f8 94       	cli
	port_init();
     8ae:	0e 94 2a 02 	call	0x454	; 0x454 <port_init>
	lcd_set_4bit();
     8b2:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_set_4bit>
	lcd_init();
     8b6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <lcd_init>
	uart2_init(); //Initialize UART2 for serial communication
     8ba:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <uart2_init>
	adc_init();
     8be:	0e 94 d6 02 	call	0x5ac	; 0x5ac <adc_init>
	timer5_init();
     8c2:	0e 94 a1 02 	call	0x542	; 0x542 <timer5_init>
	left_position_encoder_interrupt_init();
     8c6:	0e 94 3d 02 	call	0x47a	; 0x47a <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
     8ca:	0e 94 46 02 	call	0x48c	; 0x48c <right_position_encoder_interrupt_init>
	sei();   //Enables the global interrupts
     8ce:	78 94       	sei
}
     8d0:	08 95       	ret

000008d2 <get_point_cost>:
 * Logic:			It calculates the cost of traveling between two points i.e. calculating row difference and  
 *					column difference and make sum of them
 * Example Call:	get_point_cost(current_point, target_point)
 */
int get_point_cost (int current_point[2], int target_point[2])
{
     8d2:	fc 01       	movw	r30, r24
     8d4:	db 01       	movw	r26, r22
	int total_cost;	
	total_cost = abs(current_point[0] - target_point[0]) + abs(current_point[1] - target_point[1]);
     8d6:	80 81       	ld	r24, Z
     8d8:	91 81       	ldd	r25, Z+1	; 0x01
     8da:	2d 91       	ld	r18, X+
     8dc:	3c 91       	ld	r19, X
     8de:	11 97       	sbiw	r26, 0x01	; 1
     8e0:	82 1b       	sub	r24, r18
     8e2:	93 0b       	sbc	r25, r19
     8e4:	1a f4       	brpl	.+6      	; 0x8ec <get_point_cost+0x1a>
     8e6:	90 95       	com	r25
     8e8:	81 95       	neg	r24
     8ea:	9f 4f       	sbci	r25, 0xFF	; 255
     8ec:	22 81       	ldd	r18, Z+2	; 0x02
     8ee:	33 81       	ldd	r19, Z+3	; 0x03
     8f0:	12 96       	adiw	r26, 0x02	; 2
     8f2:	4d 91       	ld	r20, X+
     8f4:	5c 91       	ld	r21, X
     8f6:	13 97       	sbiw	r26, 0x03	; 3
     8f8:	24 1b       	sub	r18, r20
     8fa:	35 0b       	sbc	r19, r21
     8fc:	1a f4       	brpl	.+6      	; 0x904 <get_point_cost+0x32>
     8fe:	30 95       	com	r19
     900:	21 95       	neg	r18
     902:	3f 4f       	sbci	r19, 0xFF	; 255
     904:	82 0f       	add	r24, r18
     906:	93 1f       	adc	r25, r19
	return total_cost;
}
     908:	08 95       	ret

0000090a <get_nearest_point>:
 * Logic:			We are calculating traveling cost i.e. distance between current point and each of target cell's 4 points (top-left,
 *					top-right, bottom-right, bottom-left) and returning that point with lowest cost
 * Example Call:	get_nearest_point(current_coordinate, habitat_position_map[target_cell_no])
 */
int * get_nearest_point (int current_point[2], int target_cell[4][2]) 
{
     90a:	af 92       	push	r10
     90c:	bf 92       	push	r11
     90e:	cf 92       	push	r12
     910:	df 92       	push	r13
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	5c 01       	movw	r10, r24
     920:	06 2f       	mov	r16, r22
     922:	e7 2e       	mov	r14, r23
	int * nearest_point = malloc(2 * sizeof(int));
     924:	84 e0       	ldi	r24, 0x04	; 4
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	0e 94 27 11 	call	0x224e	; 0x224e <malloc>
     92c:	c8 2e       	mov	r12, r24
     92e:	d9 2e       	mov	r13, r25
     930:	c0 2f       	mov	r28, r16
     932:	de 2d       	mov	r29, r14
	
	int i, current_cost, lowest_cost = 100;
     934:	0f 2e       	mov	r0, r31
     936:	f4 e6       	ldi	r31, 0x64	; 100
     938:	ef 2e       	mov	r14, r31
     93a:	ff 24       	eor	r15, r15
     93c:	f0 2d       	mov	r31, r0
	
	for (i=0; i<4; i++) 
     93e:	00 e0       	ldi	r16, 0x00	; 0
     940:	10 e0       	ldi	r17, 0x00	; 0
	{
		current_cost = get_point_cost(current_point, target_cell[i]);
     942:	c5 01       	movw	r24, r10
     944:	be 01       	movw	r22, r28
     946:	0e 94 69 04 	call	0x8d2	; 0x8d2 <get_point_cost>
		if (current_cost < lowest_cost)
     94a:	8e 15       	cp	r24, r14
     94c:	9f 05       	cpc	r25, r15
     94e:	54 f4       	brge	.+20     	; 0x964 <get_nearest_point+0x5a>
		{
			nearest_point[0] = target_cell[i][0];
     950:	28 81       	ld	r18, Y
     952:	39 81       	ldd	r19, Y+1	; 0x01
     954:	f6 01       	movw	r30, r12
     956:	31 83       	std	Z+1, r19	; 0x01
     958:	20 83       	st	Z, r18
			nearest_point[1] = target_cell[i][1];
     95a:	2a 81       	ldd	r18, Y+2	; 0x02
     95c:	3b 81       	ldd	r19, Y+3	; 0x03
     95e:	33 83       	std	Z+3, r19	; 0x03
     960:	22 83       	std	Z+2, r18	; 0x02
			lowest_cost = current_cost;
     962:	7c 01       	movw	r14, r24
{
	int * nearest_point = malloc(2 * sizeof(int));
	
	int i, current_cost, lowest_cost = 100;
	
	for (i=0; i<4; i++) 
     964:	0f 5f       	subi	r16, 0xFF	; 255
     966:	1f 4f       	sbci	r17, 0xFF	; 255
     968:	24 96       	adiw	r28, 0x04	; 4
     96a:	04 30       	cpi	r16, 0x04	; 4
     96c:	11 05       	cpc	r17, r1
     96e:	49 f7       	brne	.-46     	; 0x942 <get_nearest_point+0x38>
			lowest_cost = current_cost;
		}
	}
	
	return nearest_point;
}
     970:	8c 2d       	mov	r24, r12
     972:	9d 2d       	mov	r25, r13
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	1f 91       	pop	r17
     97a:	0f 91       	pop	r16
     97c:	ff 90       	pop	r15
     97e:	ef 90       	pop	r14
     980:	df 90       	pop	r13
     982:	cf 90       	pop	r12
     984:	bf 90       	pop	r11
     986:	af 90       	pop	r10
     988:	08 95       	ret

0000098a <get_mapping_index>:
 * Logic:			to find the index point of a cell from 4 coordinate of a cell
 * Example Call:	get_nearest_point(current_coordinate)
 */

int get_mapping_index(int coordinate[])
{	int i,cell_no;
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	ec 01       	movw	r28, r24
	cell_no=atoi((char*)habitat_pos[current_index])-1;	
     990:	80 91 03 02 	lds	r24, 0x0203
     994:	90 91 04 02 	lds	r25, 0x0204
     998:	9c 01       	movw	r18, r24
     99a:	22 0f       	add	r18, r18
     99c:	33 1f       	adc	r19, r19
     99e:	82 0f       	add	r24, r18
     9a0:	93 1f       	adc	r25, r19
     9a2:	8e 55       	subi	r24, 0x5E	; 94
     9a4:	9c 4f       	sbci	r25, 0xFC	; 252
     9a6:	0e 94 56 12 	call	0x24ac	; 0x24ac <atoi>
	for(i=0;i<4;i++)
	{
		if(habitat_position_map[cell_no][i][0]==coordinate[0]&&habitat_position_map[cell_no][i][1]==coordinate[1])
     9aa:	68 81       	ld	r22, Y
     9ac:	79 81       	ldd	r23, Y+1	; 0x01
 * Output:			index of coordinate in current cell's mapping
 * Logic:			to find the index point of a cell from 4 coordinate of a cell
 * Example Call:	get_nearest_point(current_coordinate)
 */

int get_mapping_index(int coordinate[])
     9ae:	fc 01       	movw	r30, r24
     9b0:	e2 95       	swap	r30
     9b2:	f2 95       	swap	r31
     9b4:	f0 7f       	andi	r31, 0xF0	; 240
     9b6:	fe 27       	eor	r31, r30
     9b8:	e0 7f       	andi	r30, 0xF0	; 240
     9ba:	fe 27       	eor	r31, r30
     9bc:	e5 50       	subi	r30, 0x05	; 5
     9be:	fe 4f       	sbci	r31, 0xFE	; 254
{	int i,cell_no;
	cell_no=atoi((char*)habitat_pos[current_index])-1;	
	for(i=0;i<4;i++)
     9c0:	40 e0       	ldi	r20, 0x00	; 0
     9c2:	50 e0       	ldi	r21, 0x00	; 0
	{
		if(habitat_position_map[cell_no][i][0]==coordinate[0]&&habitat_position_map[cell_no][i][1]==coordinate[1])
     9c4:	80 81       	ld	r24, Z
     9c6:	91 81       	ldd	r25, Z+1	; 0x01
     9c8:	86 17       	cp	r24, r22
     9ca:	97 07       	cpc	r25, r23
     9cc:	51 f4       	brne	.+20     	; 0x9e2 <get_mapping_index+0x58>
     9ce:	82 81       	ldd	r24, Z+2	; 0x02
     9d0:	93 81       	ldd	r25, Z+3	; 0x03
     9d2:	2a 81       	ldd	r18, Y+2	; 0x02
     9d4:	3b 81       	ldd	r19, Y+3	; 0x03
     9d6:	82 17       	cp	r24, r18
     9d8:	93 07       	cpc	r25, r19
     9da:	19 f4       	brne	.+6      	; 0x9e2 <get_mapping_index+0x58>
		{
			return i;
     9dc:	84 2f       	mov	r24, r20
     9de:	95 2f       	mov	r25, r21
     9e0:	06 c0       	rjmp	.+12     	; 0x9ee <get_mapping_index+0x64>
 */

int get_mapping_index(int coordinate[])
{	int i,cell_no;
	cell_no=atoi((char*)habitat_pos[current_index])-1;	
	for(i=0;i<4;i++)
     9e2:	4f 5f       	subi	r20, 0xFF	; 255
     9e4:	5f 4f       	sbci	r21, 0xFF	; 255
     9e6:	34 96       	adiw	r30, 0x04	; 4
     9e8:	44 30       	cpi	r20, 0x04	; 4
     9ea:	51 05       	cpc	r21, r1
     9ec:	59 f7       	brne	.-42     	; 0x9c4 <get_mapping_index+0x3a>
		if(habitat_position_map[cell_no][i][0]==coordinate[0]&&habitat_position_map[cell_no][i][1]==coordinate[1])
		{
			return i;
		}
	}
}
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <pick>:
 * Example Call:	pick('L')
 */

void pick(unsigned char direction)
{
	if(direction=='L')
     9f4:	8c 34       	cpi	r24, 0x4C	; 76
     9f6:	11 f5       	brne	.+68     	; 0xa3c <pick+0x48>
	{	servo_2(80);
     9f8:	80 e5       	ldi	r24, 0x50	; 80
     9fa:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
		servo_1(185);
     9fe:	89 eb       	ldi	r24, 0xB9	; 185
     a00:	0e 94 16 04 	call	0x82c	; 0x82c <servo_1>
     a04:	8f ef       	ldi	r24, 0xFF	; 255
     a06:	9f ef       	ldi	r25, 0xFF	; 255
     a08:	a3 e2       	ldi	r26, 0x23	; 35
     a0a:	81 50       	subi	r24, 0x01	; 1
     a0c:	90 40       	sbci	r25, 0x00	; 0
     a0e:	a0 40       	sbci	r26, 0x00	; 0
     a10:	e1 f7       	brne	.-8      	; 0xa0a <pick+0x16>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <pick+0x20>
     a14:	00 00       	nop
		_delay_ms(800);
		servo_2(180);
     a16:	84 eb       	ldi	r24, 0xB4	; 180
     a18:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	9f ef       	ldi	r25, 0xFF	; 255
     a20:	a3 e2       	ldi	r26, 0x23	; 35
     a22:	81 50       	subi	r24, 0x01	; 1
     a24:	90 40       	sbci	r25, 0x00	; 0
     a26:	a0 40       	sbci	r26, 0x00	; 0
     a28:	e1 f7       	brne	.-8      	; 0xa22 <pick+0x2e>
     a2a:	00 c0       	rjmp	.+0      	; 0xa2c <pick+0x38>
     a2c:	00 00       	nop
		_delay_ms(800);
		servo_1(90);
     a2e:	8a e5       	ldi	r24, 0x5A	; 90
     a30:	0e 94 16 04 	call	0x82c	; 0x82c <servo_1>
		servo_2(90);
     a34:	8a e5       	ldi	r24, 0x5A	; 90
     a36:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
     a3a:	08 95       	ret
	}
	else
	{
		servo_2(100);
     a3c:	84 e6       	ldi	r24, 0x64	; 100
     a3e:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
		servo_1(5);
     a42:	85 e0       	ldi	r24, 0x05	; 5
     a44:	0e 94 16 04 	call	0x82c	; 0x82c <servo_1>
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	9f ef       	ldi	r25, 0xFF	; 255
     a4c:	a3 e2       	ldi	r26, 0x23	; 35
     a4e:	81 50       	subi	r24, 0x01	; 1
     a50:	90 40       	sbci	r25, 0x00	; 0
     a52:	a0 40       	sbci	r26, 0x00	; 0
     a54:	e1 f7       	brne	.-8      	; 0xa4e <pick+0x5a>
     a56:	00 c0       	rjmp	.+0      	; 0xa58 <pick+0x64>
     a58:	00 00       	nop
		_delay_ms(800);
		servo_2(0);
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
     a60:	8f ef       	ldi	r24, 0xFF	; 255
     a62:	9f ef       	ldi	r25, 0xFF	; 255
     a64:	a3 e2       	ldi	r26, 0x23	; 35
     a66:	81 50       	subi	r24, 0x01	; 1
     a68:	90 40       	sbci	r25, 0x00	; 0
     a6a:	a0 40       	sbci	r26, 0x00	; 0
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <pick+0x72>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <pick+0x7c>
     a70:	00 00       	nop
		_delay_ms(800);
		servo_1(90);
     a72:	8a e5       	ldi	r24, 0x5A	; 90
     a74:	0e 94 16 04 	call	0x82c	; 0x82c <servo_1>
		servo_2(90);
     a78:	8a e5       	ldi	r24, 0x5A	; 90
     a7a:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
     a7e:	08 95       	ret

00000a80 <drop>:
 *					didn't have the stacking feature)                
 * Example Call:	drop('L',1)
 */
void drop(unsigned char direction,int stack)
{	
	if(stack)
     a80:	61 15       	cp	r22, r1
     a82:	71 05       	cpc	r23, r1
     a84:	09 f4       	brne	.+2      	; 0xa88 <drop+0x8>
     a86:	46 c0       	rjmp	.+140    	; 0xb14 <drop+0x94>
	{
		if(direction=='R')
     a88:	82 35       	cpi	r24, 0x52	; 82
     a8a:	11 f5       	brne	.+68     	; 0xad0 <drop+0x50>
		{
			servo_2(0);
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
			servo_1(40);
     a92:	88 e2       	ldi	r24, 0x28	; 40
     a94:	0e 94 16 04 	call	0x82c	; 0x82c <servo_1>
     a98:	8f ef       	ldi	r24, 0xFF	; 255
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	a3 e2       	ldi	r26, 0x23	; 35
     a9e:	81 50       	subi	r24, 0x01	; 1
     aa0:	90 40       	sbci	r25, 0x00	; 0
     aa2:	a0 40       	sbci	r26, 0x00	; 0
     aa4:	e1 f7       	brne	.-8      	; 0xa9e <drop+0x1e>
     aa6:	00 c0       	rjmp	.+0      	; 0xaa8 <drop+0x28>
     aa8:	00 00       	nop
			_delay_ms(800);
			servo_2(120);
     aaa:	88 e7       	ldi	r24, 0x78	; 120
     aac:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
     ab0:	8f ef       	ldi	r24, 0xFF	; 255
     ab2:	9f ef       	ldi	r25, 0xFF	; 255
     ab4:	a3 e2       	ldi	r26, 0x23	; 35
     ab6:	81 50       	subi	r24, 0x01	; 1
     ab8:	90 40       	sbci	r25, 0x00	; 0
     aba:	a0 40       	sbci	r26, 0x00	; 0
     abc:	e1 f7       	brne	.-8      	; 0xab6 <drop+0x36>
     abe:	00 c0       	rjmp	.+0      	; 0xac0 <drop+0x40>
     ac0:	00 00       	nop
			_delay_ms(800);
			servo_2(90);
     ac2:	8a e5       	ldi	r24, 0x5A	; 90
     ac4:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
			servo_1(90);
     ac8:	8a e5       	ldi	r24, 0x5A	; 90
     aca:	0e 94 16 04 	call	0x82c	; 0x82c <servo_1>
     ace:	08 95       	ret
		}
		else
		{
			servo_2(180);
     ad0:	84 eb       	ldi	r24, 0xB4	; 180
     ad2:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
			servo_1(150);
     ad6:	86 e9       	ldi	r24, 0x96	; 150
     ad8:	0e 94 16 04 	call	0x82c	; 0x82c <servo_1>
     adc:	8f ef       	ldi	r24, 0xFF	; 255
     ade:	9f ef       	ldi	r25, 0xFF	; 255
     ae0:	a3 e2       	ldi	r26, 0x23	; 35
     ae2:	81 50       	subi	r24, 0x01	; 1
     ae4:	90 40       	sbci	r25, 0x00	; 0
     ae6:	a0 40       	sbci	r26, 0x00	; 0
     ae8:	e1 f7       	brne	.-8      	; 0xae2 <drop+0x62>
     aea:	00 c0       	rjmp	.+0      	; 0xaec <drop+0x6c>
     aec:	00 00       	nop
			_delay_ms(800);
			servo_2(60);
     aee:	8c e3       	ldi	r24, 0x3C	; 60
     af0:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
     af4:	8f ef       	ldi	r24, 0xFF	; 255
     af6:	9f ef       	ldi	r25, 0xFF	; 255
     af8:	a3 e2       	ldi	r26, 0x23	; 35
     afa:	81 50       	subi	r24, 0x01	; 1
     afc:	90 40       	sbci	r25, 0x00	; 0
     afe:	a0 40       	sbci	r26, 0x00	; 0
     b00:	e1 f7       	brne	.-8      	; 0xafa <drop+0x7a>
     b02:	00 c0       	rjmp	.+0      	; 0xb04 <drop+0x84>
     b04:	00 00       	nop
			_delay_ms(800);
			servo_2(90);
     b06:	8a e5       	ldi	r24, 0x5A	; 90
     b08:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
			servo_1(90);
     b0c:	8a e5       	ldi	r24, 0x5A	; 90
     b0e:	0e 94 16 04 	call	0x82c	; 0x82c <servo_1>
     b12:	08 95       	ret
			
		}	
	}
	else
	{
		if(direction=='R')
     b14:	82 35       	cpi	r24, 0x52	; 82
     b16:	11 f5       	brne	.+68     	; 0xb5c <drop+0xdc>
		{
			servo_2(0);
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
			servo_1(5);
     b1e:	85 e0       	ldi	r24, 0x05	; 5
     b20:	0e 94 16 04 	call	0x82c	; 0x82c <servo_1>
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	a3 e2       	ldi	r26, 0x23	; 35
     b2a:	81 50       	subi	r24, 0x01	; 1
     b2c:	90 40       	sbci	r25, 0x00	; 0
     b2e:	a0 40       	sbci	r26, 0x00	; 0
     b30:	e1 f7       	brne	.-8      	; 0xb2a <drop+0xaa>
     b32:	00 c0       	rjmp	.+0      	; 0xb34 <drop+0xb4>
     b34:	00 00       	nop
			_delay_ms(800);
			servo_2(85);
     b36:	85 e5       	ldi	r24, 0x55	; 85
     b38:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
     b3c:	8f ef       	ldi	r24, 0xFF	; 255
     b3e:	9f ef       	ldi	r25, 0xFF	; 255
     b40:	a3 e2       	ldi	r26, 0x23	; 35
     b42:	81 50       	subi	r24, 0x01	; 1
     b44:	90 40       	sbci	r25, 0x00	; 0
     b46:	a0 40       	sbci	r26, 0x00	; 0
     b48:	e1 f7       	brne	.-8      	; 0xb42 <drop+0xc2>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <drop+0xcc>
     b4c:	00 00       	nop
			_delay_ms(800);
			servo_2(90);
     b4e:	8a e5       	ldi	r24, 0x5A	; 90
     b50:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
			servo_1(90);
     b54:	8a e5       	ldi	r24, 0x5A	; 90
     b56:	0e 94 16 04 	call	0x82c	; 0x82c <servo_1>
     b5a:	08 95       	ret
		}
		else
		{
			servo_2(180);
     b5c:	84 eb       	ldi	r24, 0xB4	; 180
     b5e:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
			servo_1(185);
     b62:	89 eb       	ldi	r24, 0xB9	; 185
     b64:	0e 94 16 04 	call	0x82c	; 0x82c <servo_1>
     b68:	8f ef       	ldi	r24, 0xFF	; 255
     b6a:	9f ef       	ldi	r25, 0xFF	; 255
     b6c:	a3 e2       	ldi	r26, 0x23	; 35
     b6e:	81 50       	subi	r24, 0x01	; 1
     b70:	90 40       	sbci	r25, 0x00	; 0
     b72:	a0 40       	sbci	r26, 0x00	; 0
     b74:	e1 f7       	brne	.-8      	; 0xb6e <drop+0xee>
     b76:	00 c0       	rjmp	.+0      	; 0xb78 <drop+0xf8>
     b78:	00 00       	nop
			_delay_ms(800);
			servo_2(95);
     b7a:	8f e5       	ldi	r24, 0x5F	; 95
     b7c:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
     b80:	8f ef       	ldi	r24, 0xFF	; 255
     b82:	9f ef       	ldi	r25, 0xFF	; 255
     b84:	a3 e2       	ldi	r26, 0x23	; 35
     b86:	81 50       	subi	r24, 0x01	; 1
     b88:	90 40       	sbci	r25, 0x00	; 0
     b8a:	a0 40       	sbci	r26, 0x00	; 0
     b8c:	e1 f7       	brne	.-8      	; 0xb86 <drop+0x106>
     b8e:	00 c0       	rjmp	.+0      	; 0xb90 <drop+0x110>
     b90:	00 00       	nop
			_delay_ms(800);
			servo_2(90);
     b92:	8a e5       	ldi	r24, 0x5A	; 90
     b94:	0e 94 2f 04 	call	0x85e	; 0x85e <servo_2>
			servo_1(90);
     b98:	8a e5       	ldi	r24, 0x5A	; 90
     b9a:	0e 94 16 04 	call	0x82c	; 0x82c <servo_1>
     b9e:	08 95       	ret

00000ba0 <read_wl_sensor_values>:
 * Logic:			It reads all 3 white line sensor values by using function ADC_Conversion()
 * Example Call:	read_wl_sensor_values()
 */
void read_wl_sensor_values () 
{
	Left_white_line = ADC_Conversion(3);	//Getting data of Left WL Sensor
     ba0:	83 e0       	ldi	r24, 0x03	; 3
     ba2:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ADC_Conversion>
     ba6:	80 93 ba 04 	sts	0x04BA, r24
	Center_white_line = ADC_Conversion(2);	//Getting data of Center WL Sensor
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ADC_Conversion>
     bb0:	80 93 b9 04 	sts	0x04B9, r24
	Right_white_line = ADC_Conversion(1);	//Getting data of Right WL Sensor
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <ADC_Conversion>
     bba:	80 93 b8 04 	sts	0x04B8, r24
}
     bbe:	08 95       	ret

00000bc0 <follow_black_line>:
 *					This way the robot follows a 1cm thick black line.
 *					
 * Example Call:	follow_black_line('F')
 */
void follow_black_line (char direction , int f) 
{
     bc0:	cf 93       	push	r28
     bc2:	c8 2f       	mov	r28, r24
	flag = 0;
     bc4:	10 92 bb 04 	sts	0x04BB, r1
	if(f==0)		
     bc8:	61 15       	cp	r22, r1
     bca:	71 05       	cpc	r23, r1
     bcc:	09 f0       	breq	.+2      	; 0xbd0 <follow_black_line+0x10>
     bce:	9e c0       	rjmp	.+316    	; 0xd0c <follow_black_line+0x14c>
	{
		if (((Left_white_line <= BNW_Thresh) && (Center_white_line <= BNW_Thresh) && (Right_white_line <= BNW_Thresh)) || (Center_white_line > BNW_Thresh)) 
     bd0:	80 91 01 02 	lds	r24, 0x0201
     bd4:	90 91 02 02 	lds	r25, 0x0202
     bd8:	20 91 ba 04 	lds	r18, 0x04BA
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	82 17       	cp	r24, r18
     be0:	93 07       	cpc	r25, r19
     be2:	6c f0       	brlt	.+26     	; 0xbfe <follow_black_line+0x3e>
     be4:	20 91 b9 04 	lds	r18, 0x04B9
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	82 17       	cp	r24, r18
     bec:	93 07       	cpc	r25, r19
     bee:	74 f0       	brlt	.+28     	; 0xc0c <follow_black_line+0x4c>
     bf0:	20 91 b8 04 	lds	r18, 0x04B8
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	82 17       	cp	r24, r18
     bf8:	93 07       	cpc	r25, r19
     bfa:	44 f4       	brge	.+16     	; 0xc0c <follow_black_line+0x4c>
     bfc:	0f c1       	rjmp	.+542    	; 0xe1c <follow_black_line+0x25c>
     bfe:	20 91 b9 04 	lds	r18, 0x04B9
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	82 17       	cp	r24, r18
     c06:	93 07       	cpc	r25, r19
     c08:	0c f0       	brlt	.+2      	; 0xc0c <follow_black_line+0x4c>
     c0a:	0d c1       	rjmp	.+538    	; 0xe26 <follow_black_line+0x266>
		{
			flag = 1;
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	80 93 bb 04 	sts	0x04BB, r24
			if (direction == 'F') forward();
     c12:	c6 34       	cpi	r28, 0x46	; 70
     c14:	19 f4       	brne	.+6      	; 0xc1c <follow_black_line+0x5c>
     c16:	0e 94 1d 03 	call	0x63a	; 0x63a <forward>
     c1a:	02 c0       	rjmp	.+4      	; 0xc20 <follow_black_line+0x60>
			else back();
     c1c:	0e 94 21 03 	call	0x642	; 0x642 <back>
			velocity(left_velocity, right_velocity);
     c20:	80 91 c9 04 	lds	r24, 0x04C9
     c24:	60 91 cf 04 	lds	r22, 0x04CF
     c28:	0e 94 12 03 	call	0x624	; 0x624 <velocity>
		}

		if((Left_white_line <= BNW_Thresh) && (Center_white_line <= BNW_Thresh) && (Right_white_line > BNW_Thresh) && (flag == 0)) 
     c2c:	80 91 01 02 	lds	r24, 0x0201
     c30:	90 91 02 02 	lds	r25, 0x0202
     c34:	20 91 ba 04 	lds	r18, 0x04BA
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	c4 f1       	brlt	.+112    	; 0xcb0 <follow_black_line+0xf0>
     c40:	20 91 b9 04 	lds	r18, 0x04B9
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	82 17       	cp	r24, r18
     c48:	93 07       	cpc	r25, r19
     c4a:	0c f4       	brge	.+2      	; 0xc4e <follow_black_line+0x8e>
     c4c:	fb c0       	rjmp	.+502    	; 0xe44 <follow_black_line+0x284>
     c4e:	20 91 b8 04 	lds	r18, 0x04B8
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	82 17       	cp	r24, r18
     c56:	93 07       	cpc	r25, r19
     c58:	0c f0       	brlt	.+2      	; 0xc5c <follow_black_line+0x9c>
     c5a:	f4 c0       	rjmp	.+488    	; 0xe44 <follow_black_line+0x284>
     c5c:	80 91 bb 04 	lds	r24, 0x04BB
     c60:	88 23       	and	r24, r24
     c62:	09 f0       	breq	.+2      	; 0xc66 <follow_black_line+0xa6>
     c64:	ef c0       	rjmp	.+478    	; 0xe44 <follow_black_line+0x284>
		{
			flag = 1;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	80 93 bb 04 	sts	0x04BB, r24
			if (direction == 'F')
     c6c:	c6 34       	cpi	r28, 0x46	; 70
     c6e:	59 f4       	brne	.+22     	; 0xc86 <follow_black_line+0xc6>
			 {
				forward();
     c70:	0e 94 1d 03 	call	0x63a	; 0x63a <forward>
				velocity(left_velocity+30, right_velocity-50);
     c74:	80 91 c9 04 	lds	r24, 0x04C9
     c78:	60 91 cf 04 	lds	r22, 0x04CF
     c7c:	62 53       	subi	r22, 0x32	; 50
     c7e:	82 5e       	subi	r24, 0xE2	; 226
     c80:	0e 94 12 03 	call	0x624	; 0x624 <velocity>
     c84:	0a c0       	rjmp	.+20     	; 0xc9a <follow_black_line+0xda>
			} 
			else 
			{
				back();
     c86:	0e 94 21 03 	call	0x642	; 0x642 <back>
				velocity(left_velocity-50, right_velocity+30);
     c8a:	80 91 c9 04 	lds	r24, 0x04C9
     c8e:	60 91 cf 04 	lds	r22, 0x04CF
     c92:	62 5e       	subi	r22, 0xE2	; 226
     c94:	82 53       	subi	r24, 0x32	; 50
     c96:	0e 94 12 03 	call	0x624	; 0x624 <velocity>
			}
		}

		if((Left_white_line > BNW_Thresh) && (Center_white_line <= BNW_Thresh) && (Right_white_line <= BNW_Thresh) && (flag == 0)) 
     c9a:	80 91 01 02 	lds	r24, 0x0201
     c9e:	90 91 02 02 	lds	r25, 0x0202
     ca2:	20 91 ba 04 	lds	r18, 0x04BA
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	82 17       	cp	r24, r18
     caa:	93 07       	cpc	r25, r19
     cac:	0c f0       	brlt	.+2      	; 0xcb0 <follow_black_line+0xf0>
     cae:	ca c0       	rjmp	.+404    	; 0xe44 <follow_black_line+0x284>
     cb0:	20 91 b9 04 	lds	r18, 0x04B9
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	82 17       	cp	r24, r18
     cb8:	93 07       	cpc	r25, r19
     cba:	0c f4       	brge	.+2      	; 0xcbe <follow_black_line+0xfe>
     cbc:	c3 c0       	rjmp	.+390    	; 0xe44 <follow_black_line+0x284>
     cbe:	20 91 b8 04 	lds	r18, 0x04B8
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	82 17       	cp	r24, r18
     cc6:	93 07       	cpc	r25, r19
     cc8:	0c f4       	brge	.+2      	; 0xccc <follow_black_line+0x10c>
     cca:	bc c0       	rjmp	.+376    	; 0xe44 <follow_black_line+0x284>
     ccc:	80 91 bb 04 	lds	r24, 0x04BB
     cd0:	88 23       	and	r24, r24
     cd2:	09 f0       	breq	.+2      	; 0xcd6 <follow_black_line+0x116>
     cd4:	b7 c0       	rjmp	.+366    	; 0xe44 <follow_black_line+0x284>
		{
			flag = 1;
     cd6:	81 e0       	ldi	r24, 0x01	; 1
     cd8:	80 93 bb 04 	sts	0x04BB, r24
			if (direction == 'F')
     cdc:	c6 34       	cpi	r28, 0x46	; 70
     cde:	59 f4       	brne	.+22     	; 0xcf6 <follow_black_line+0x136>
			 {
				forward();
     ce0:	0e 94 1d 03 	call	0x63a	; 0x63a <forward>
				velocity(left_velocity-50, right_velocity+30);
     ce4:	80 91 c9 04 	lds	r24, 0x04C9
     ce8:	60 91 cf 04 	lds	r22, 0x04CF
     cec:	62 5e       	subi	r22, 0xE2	; 226
     cee:	82 53       	subi	r24, 0x32	; 50
     cf0:	0e 94 12 03 	call	0x624	; 0x624 <velocity>
     cf4:	a7 c0       	rjmp	.+334    	; 0xe44 <follow_black_line+0x284>
			} 
			else 
			{
				back();
     cf6:	0e 94 21 03 	call	0x642	; 0x642 <back>
				velocity(left_velocity+30, right_velocity-50);
     cfa:	80 91 c9 04 	lds	r24, 0x04C9
     cfe:	60 91 cf 04 	lds	r22, 0x04CF
     d02:	62 53       	subi	r22, 0x32	; 50
     d04:	82 5e       	subi	r24, 0xE2	; 226
     d06:	0e 94 12 03 	call	0x624	; 0x624 <velocity>
     d0a:	9c c0       	rjmp	.+312    	; 0xe44 <follow_black_line+0x284>
			}
		}
	}
	else
	{
		if (((Left_white_line <= BNW_Thresh) && (Center_white_line <= BNW_Thresh) && (Right_white_line <= BNW_Thresh)) || (Center_white_line > BNW_Thresh))
     d0c:	80 91 01 02 	lds	r24, 0x0201
     d10:	90 91 02 02 	lds	r25, 0x0202
     d14:	20 91 ba 04 	lds	r18, 0x04BA
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	82 17       	cp	r24, r18
     d1c:	93 07       	cpc	r25, r19
     d1e:	6c f0       	brlt	.+26     	; 0xd3a <follow_black_line+0x17a>
     d20:	20 91 b9 04 	lds	r18, 0x04B9
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	82 17       	cp	r24, r18
     d28:	93 07       	cpc	r25, r19
     d2a:	74 f0       	brlt	.+28     	; 0xd48 <follow_black_line+0x188>
     d2c:	20 91 b8 04 	lds	r18, 0x04B8
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	82 17       	cp	r24, r18
     d34:	93 07       	cpc	r25, r19
     d36:	44 f4       	brge	.+16     	; 0xd48 <follow_black_line+0x188>
     d38:	80 c0       	rjmp	.+256    	; 0xe3a <follow_black_line+0x27a>
     d3a:	20 91 b9 04 	lds	r18, 0x04B9
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	82 17       	cp	r24, r18
     d42:	93 07       	cpc	r25, r19
     d44:	0c f0       	brlt	.+2      	; 0xd48 <follow_black_line+0x188>
     d46:	74 c0       	rjmp	.+232    	; 0xe30 <follow_black_line+0x270>
		{
			flag = 1;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	80 93 bb 04 	sts	0x04BB, r24
			if (direction == 'F') forward();
     d4e:	c6 34       	cpi	r28, 0x46	; 70
     d50:	19 f4       	brne	.+6      	; 0xd58 <follow_black_line+0x198>
     d52:	0e 94 1d 03 	call	0x63a	; 0x63a <forward>
     d56:	02 c0       	rjmp	.+4      	; 0xd5c <follow_black_line+0x19c>
			else back();
     d58:	0e 94 21 03 	call	0x642	; 0x642 <back>
			velocity(255, 255);
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	6f ef       	ldi	r22, 0xFF	; 255
     d60:	0e 94 12 03 	call	0x624	; 0x624 <velocity>
		}

		if((Left_white_line <= BNW_Thresh) && (Center_white_line <= BNW_Thresh) && (Right_white_line > BNW_Thresh) && (flag == 0))
     d64:	80 91 01 02 	lds	r24, 0x0201
     d68:	90 91 02 02 	lds	r25, 0x0202
     d6c:	20 91 ba 04 	lds	r18, 0x04BA
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	82 17       	cp	r24, r18
     d74:	93 07       	cpc	r25, r19
     d76:	7c f1       	brlt	.+94     	; 0xdd6 <follow_black_line+0x216>
     d78:	20 91 b9 04 	lds	r18, 0x04B9
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	82 17       	cp	r24, r18
     d80:	93 07       	cpc	r25, r19
     d82:	0c f4       	brge	.+2      	; 0xd86 <follow_black_line+0x1c6>
     d84:	5f c0       	rjmp	.+190    	; 0xe44 <follow_black_line+0x284>
     d86:	20 91 b8 04 	lds	r18, 0x04B8
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	82 17       	cp	r24, r18
     d8e:	93 07       	cpc	r25, r19
     d90:	0c f0       	brlt	.+2      	; 0xd94 <follow_black_line+0x1d4>
     d92:	58 c0       	rjmp	.+176    	; 0xe44 <follow_black_line+0x284>
     d94:	80 91 bb 04 	lds	r24, 0x04BB
     d98:	88 23       	and	r24, r24
     d9a:	09 f0       	breq	.+2      	; 0xd9e <follow_black_line+0x1de>
     d9c:	53 c0       	rjmp	.+166    	; 0xe44 <follow_black_line+0x284>
		{
			flag = 1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 bb 04 	sts	0x04BB, r24
			if (direction == 'F')
     da4:	c6 34       	cpi	r28, 0x46	; 70
     da6:	39 f4       	brne	.+14     	; 0xdb6 <follow_black_line+0x1f6>
			{
				forward();
     da8:	0e 94 1d 03 	call	0x63a	; 0x63a <forward>
				velocity(255, 170);
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	6a ea       	ldi	r22, 0xAA	; 170
     db0:	0e 94 12 03 	call	0x624	; 0x624 <velocity>
     db4:	06 c0       	rjmp	.+12     	; 0xdc2 <follow_black_line+0x202>
			}
			else
			{
				back();
     db6:	0e 94 21 03 	call	0x642	; 0x642 <back>
				velocity(170, 255);
     dba:	8a ea       	ldi	r24, 0xAA	; 170
     dbc:	6f ef       	ldi	r22, 0xFF	; 255
     dbe:	0e 94 12 03 	call	0x624	; 0x624 <velocity>
			}
		}

		if((Left_white_line > BNW_Thresh) && (Center_white_line <= BNW_Thresh) && (Right_white_line <= BNW_Thresh) && (flag == 0))
     dc2:	80 91 01 02 	lds	r24, 0x0201
     dc6:	90 91 02 02 	lds	r25, 0x0202
     dca:	20 91 ba 04 	lds	r18, 0x04BA
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	82 17       	cp	r24, r18
     dd2:	93 07       	cpc	r25, r19
     dd4:	bc f5       	brge	.+110    	; 0xe44 <follow_black_line+0x284>
     dd6:	20 91 b9 04 	lds	r18, 0x04B9
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	82 17       	cp	r24, r18
     dde:	93 07       	cpc	r25, r19
     de0:	8c f1       	brlt	.+98     	; 0xe44 <follow_black_line+0x284>
     de2:	20 91 b8 04 	lds	r18, 0x04B8
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	82 17       	cp	r24, r18
     dea:	93 07       	cpc	r25, r19
     dec:	5c f1       	brlt	.+86     	; 0xe44 <follow_black_line+0x284>
     dee:	80 91 bb 04 	lds	r24, 0x04BB
     df2:	88 23       	and	r24, r24
     df4:	39 f5       	brne	.+78     	; 0xe44 <follow_black_line+0x284>
		{
			flag = 1;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	80 93 bb 04 	sts	0x04BB, r24
			if (direction == 'F')
     dfc:	c6 34       	cpi	r28, 0x46	; 70
     dfe:	39 f4       	brne	.+14     	; 0xe0e <follow_black_line+0x24e>
			{
				forward();
     e00:	0e 94 1d 03 	call	0x63a	; 0x63a <forward>
				velocity(170, 255);
     e04:	8a ea       	ldi	r24, 0xAA	; 170
     e06:	6f ef       	ldi	r22, 0xFF	; 255
     e08:	0e 94 12 03 	call	0x624	; 0x624 <velocity>
     e0c:	1b c0       	rjmp	.+54     	; 0xe44 <follow_black_line+0x284>
			}
			else
			{
				back();
     e0e:	0e 94 21 03 	call	0x642	; 0x642 <back>
				velocity(255, 170);
     e12:	8f ef       	ldi	r24, 0xFF	; 255
     e14:	6a ea       	ldi	r22, 0xAA	; 170
     e16:	0e 94 12 03 	call	0x624	; 0x624 <velocity>
     e1a:	14 c0       	rjmp	.+40     	; 0xe44 <follow_black_line+0x284>
			if (direction == 'F') forward();
			else back();
			velocity(left_velocity, right_velocity);
		}

		if((Left_white_line <= BNW_Thresh) && (Center_white_line <= BNW_Thresh) && (Right_white_line > BNW_Thresh) && (flag == 0)) 
     e1c:	80 91 01 02 	lds	r24, 0x0201
     e20:	90 91 02 02 	lds	r25, 0x0202
     e24:	0d cf       	rjmp	.-486    	; 0xc40 <follow_black_line+0x80>
     e26:	80 91 01 02 	lds	r24, 0x0201
     e2a:	90 91 02 02 	lds	r25, 0x0202
     e2e:	40 cf       	rjmp	.-384    	; 0xcb0 <follow_black_line+0xf0>
			if (direction == 'F') forward();
			else back();
			velocity(255, 255);
		}

		if((Left_white_line <= BNW_Thresh) && (Center_white_line <= BNW_Thresh) && (Right_white_line > BNW_Thresh) && (flag == 0))
     e30:	80 91 01 02 	lds	r24, 0x0201
     e34:	90 91 02 02 	lds	r25, 0x0202
     e38:	ce cf       	rjmp	.-100    	; 0xdd6 <follow_black_line+0x216>
     e3a:	80 91 01 02 	lds	r24, 0x0201
     e3e:	90 91 02 02 	lds	r25, 0x0202
     e42:	9a cf       	rjmp	.-204    	; 0xd78 <follow_black_line+0x1b8>
				back();
				velocity(255, 170);
			}
		}	
	}	
}
     e44:	cf 91       	pop	r28
     e46:	08 95       	ret

00000e48 <follow_black_line_mm>:
 *					set to 0. While moving the robot, we increase them and When the ShaftCountRight
 *					or ShaftCountLeft reaches as required, we stop the robot
 * Example Call:	follow_black_line_mm(100, 'F')
 */
void follow_black_line_mm (unsigned int DistanceInMM, char direction , int f)
 {
     e48:	cf 92       	push	r12
     e4a:	df 92       	push	r13
     e4c:	ef 92       	push	r14
     e4e:	ff 92       	push	r15
     e50:	0f 93       	push	r16
     e52:	1f 93       	push	r17
     e54:	cf 93       	push	r28
     e56:	c6 2f       	mov	r28, r22
     e58:	8a 01       	movw	r16, r20
	float ReqdShaftCount = 0;
	unsigned long int ReqdShaftCountInt = 0;

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
     e5a:	bc 01       	movw	r22, r24
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 85 10 	call	0x210a	; 0x210a <__floatunsisf>
     e64:	25 ee       	ldi	r18, 0xE5	; 229
     e66:	30 ed       	ldi	r19, 0xD0	; 208
     e68:	4a ea       	ldi	r20, 0xAA	; 170
     e6a:	50 e4       	ldi	r21, 0x40	; 64
     e6c:	0e 94 f1 0f 	call	0x1fe2	; 0x1fe2 <__divsf3>
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
     e70:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__fixunssfsi>
     e74:	c6 2e       	mov	r12, r22
     e76:	d7 2e       	mov	r13, r23
     e78:	e8 2e       	mov	r14, r24
     e7a:	f9 2e       	mov	r15, r25
	
	ShaftCountRight = 0;
     e7c:	10 92 b0 04 	sts	0x04B0, r1
     e80:	10 92 b1 04 	sts	0x04B1, r1
     e84:	10 92 b2 04 	sts	0x04B2, r1
     e88:	10 92 b3 04 	sts	0x04B3, r1
	ShaftCountLeft = 0;
     e8c:	10 92 b4 04 	sts	0x04B4, r1
     e90:	10 92 b5 04 	sts	0x04B5, r1
     e94:	10 92 b6 04 	sts	0x04B6, r1
     e98:	10 92 b7 04 	sts	0x04B7, r1
	while(1) 
	{
		read_wl_sensor_values();
     e9c:	0e 94 d0 05 	call	0xba0	; 0xba0 <read_wl_sensor_values>
		
		if(ShaftCountRight > ReqdShaftCountInt || ShaftCountLeft > ReqdShaftCountInt) {
     ea0:	80 91 b0 04 	lds	r24, 0x04B0
     ea4:	90 91 b1 04 	lds	r25, 0x04B1
     ea8:	a0 91 b2 04 	lds	r26, 0x04B2
     eac:	b0 91 b3 04 	lds	r27, 0x04B3
     eb0:	c8 16       	cp	r12, r24
     eb2:	d9 06       	cpc	r13, r25
     eb4:	ea 06       	cpc	r14, r26
     eb6:	fb 06       	cpc	r15, r27
     eb8:	90 f0       	brcs	.+36     	; 0xede <follow_black_line_mm+0x96>
     eba:	80 91 b4 04 	lds	r24, 0x04B4
     ebe:	90 91 b5 04 	lds	r25, 0x04B5
     ec2:	a0 91 b6 04 	lds	r26, 0x04B6
     ec6:	b0 91 b7 04 	lds	r27, 0x04B7
     eca:	c8 16       	cp	r12, r24
     ecc:	d9 06       	cpc	r13, r25
     ece:	ea 06       	cpc	r14, r26
     ed0:	fb 06       	cpc	r15, r27
     ed2:	28 f0       	brcs	.+10     	; 0xede <follow_black_line_mm+0x96>
			break;
		} 
		else 
		{
			follow_black_line(direction,f);
     ed4:	8c 2f       	mov	r24, r28
     ed6:	b8 01       	movw	r22, r16
     ed8:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <follow_black_line>
		}
	}
     edc:	df cf       	rjmp	.-66     	; 0xe9c <follow_black_line_mm+0x54>
	
	stop(); //Stop robot	
     ede:	0e 94 2d 03 	call	0x65a	; 0x65a <stop>
}
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	df 90       	pop	r13
     eee:	cf 90       	pop	r12
     ef0:	08 95       	ret

00000ef2 <turn_robot>:
 *					rotate the robot by degrees got by the parameter 'deg' and towards the direction got in the 
 *					parameter 'direction'. 	
 * Example Call:	turn_robot('L',90)
 */
void turn_robot (char direction,int deg) 
{
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	18 2f       	mov	r17, r24
     efa:	eb 01       	movw	r28, r22
	read_wl_sensor_values();
     efc:	0e 94 d0 05 	call	0xba0	; 0xba0 <read_wl_sensor_values>
	velocity(current_velocity+10, current_velocity+10);
     f00:	60 91 0a 02 	lds	r22, 0x020A
     f04:	66 5f       	subi	r22, 0xF6	; 246
     f06:	86 2f       	mov	r24, r22
     f08:	0e 94 12 03 	call	0x624	; 0x624 <velocity>
	
	if (direction == 'L')
     f0c:	1c 34       	cpi	r17, 0x4C	; 76
     f0e:	21 f4       	brne	.+8      	; 0xf18 <turn_robot+0x26>
	 {
		left_degrees(deg);
     f10:	ce 01       	movw	r24, r28
     f12:	0e 94 be 03 	call	0x77c	; 0x77c <left_degrees>
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <turn_robot+0x2c>
	} 
	else 
	{		
		right_degrees(deg);
     f18:	ce 01       	movw	r24, r28
     f1a:	0e 94 c9 03 	call	0x792	; 0x792 <right_degrees>
	}
	velocity(current_velocity-10 ,current_velocity-10);
     f1e:	60 91 0a 02 	lds	r22, 0x020A
     f22:	6a 50       	subi	r22, 0x0A	; 10
     f24:	86 2f       	mov	r24, r22
     f26:	0e 94 12 03 	call	0x624	; 0x624 <velocity>
     f2a:	8f ef       	ldi	r24, 0xFF	; 255
     f2c:	9f e7       	ldi	r25, 0x7F	; 127
     f2e:	ad e0       	ldi	r26, 0x0D	; 13
     f30:	81 50       	subi	r24, 0x01	; 1
     f32:	90 40       	sbci	r25, 0x00	; 0
     f34:	a0 40       	sbci	r26, 0x00	; 0
     f36:	e1 f7       	brne	.-8      	; 0xf30 <turn_robot+0x3e>
     f38:	00 c0       	rjmp	.+0      	; 0xf3a <turn_robot+0x48>
     f3a:	00 00       	nop
	_delay_ms(300);
}
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	08 95       	ret

00000f44 <change_direction>:
 *						we turn the robot left by 90 degrees using turn_robot('L',90) and updates current direction to south
 * Example Call:	change_direction('N')
 */
void change_direction (unsigned char desired_direction) 
{
	if (current_direction == desired_direction) 
     f44:	90 91 09 02 	lds	r25, 0x0209
     f48:	98 17       	cp	r25, r24
     f4a:	09 f4       	brne	.+2      	; 0xf4e <change_direction+0xa>
     f4c:	bd c0       	rjmp	.+378    	; 0x10c8 <change_direction+0x184>
		return;
	if (current_direction == 'N' && desired_direction == 'W') 
     f4e:	9e 34       	cpi	r25, 0x4E	; 78
     f50:	71 f5       	brne	.+92     	; 0xfae <change_direction+0x6a>
     f52:	87 35       	cpi	r24, 0x57	; 87
     f54:	49 f4       	brne	.+18     	; 0xf68 <change_direction+0x24>
	{ // north
		turn_robot('L',90);
     f56:	8c e4       	ldi	r24, 0x4C	; 76
     f58:	6a e5       	ldi	r22, 0x5A	; 90
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	0e 94 79 07 	call	0xef2	; 0xef2 <turn_robot>
		current_direction = 'W';
     f60:	87 e5       	ldi	r24, 0x57	; 87
     f62:	80 93 09 02 	sts	0x0209, r24
     f66:	08 95       	ret
	} 
	else if (current_direction == 'N' && desired_direction == 'E') 
     f68:	85 34       	cpi	r24, 0x45	; 69
     f6a:	49 f4       	brne	.+18     	; 0xf7e <change_direction+0x3a>
	{ // north
		turn_robot('R',90);
     f6c:	82 e5       	ldi	r24, 0x52	; 82
     f6e:	6a e5       	ldi	r22, 0x5A	; 90
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	0e 94 79 07 	call	0xef2	; 0xef2 <turn_robot>
		current_direction = 'E';
     f76:	85 e4       	ldi	r24, 0x45	; 69
     f78:	80 93 09 02 	sts	0x0209, r24
     f7c:	08 95       	ret
	} 
	else if (current_direction == 'N' && desired_direction == 'S') 
     f7e:	83 35       	cpi	r24, 0x53	; 83
     f80:	09 f0       	breq	.+2      	; 0xf84 <change_direction+0x40>
     f82:	74 c0       	rjmp	.+232    	; 0x106c <change_direction+0x128>
	{ // north
		if (current_coordinate[1] == 0)
     f84:	80 91 07 02 	lds	r24, 0x0207
     f88:	90 91 08 02 	lds	r25, 0x0208
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	31 f4       	brne	.+12     	; 0xf9c <change_direction+0x58>
		{
			turn_robot('R',180);
     f90:	82 e5       	ldi	r24, 0x52	; 82
     f92:	64 eb       	ldi	r22, 0xB4	; 180
     f94:	70 e0       	ldi	r23, 0x00	; 0
     f96:	0e 94 79 07 	call	0xef2	; 0xef2 <turn_robot>
     f9a:	05 c0       	rjmp	.+10     	; 0xfa6 <change_direction+0x62>
		} 
		else 
		{
			turn_robot('L',180);
     f9c:	8c e4       	ldi	r24, 0x4C	; 76
     f9e:	64 eb       	ldi	r22, 0xB4	; 180
     fa0:	70 e0       	ldi	r23, 0x00	; 0
     fa2:	0e 94 79 07 	call	0xef2	; 0xef2 <turn_robot>
		}

		current_direction = 'S';
     fa6:	83 e5       	ldi	r24, 0x53	; 83
     fa8:	80 93 09 02 	sts	0x0209, r24
     fac:	08 95       	ret
	} 
	else if (current_direction == 'S' && desired_direction == 'N') 
     fae:	93 35       	cpi	r25, 0x53	; 83
     fb0:	71 f5       	brne	.+92     	; 0x100e <change_direction+0xca>
     fb2:	8e 34       	cpi	r24, 0x4E	; 78
     fb4:	a9 f4       	brne	.+42     	; 0xfe0 <change_direction+0x9c>
	{ //south
		if (current_coordinate[1] == 0) 
     fb6:	80 91 07 02 	lds	r24, 0x0207
     fba:	90 91 08 02 	lds	r25, 0x0208
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	31 f4       	brne	.+12     	; 0xfce <change_direction+0x8a>
		{
			turn_robot('L',180);
     fc2:	8c e4       	ldi	r24, 0x4C	; 76
     fc4:	64 eb       	ldi	r22, 0xB4	; 180
     fc6:	70 e0       	ldi	r23, 0x00	; 0
     fc8:	0e 94 79 07 	call	0xef2	; 0xef2 <turn_robot>
     fcc:	05 c0       	rjmp	.+10     	; 0xfd8 <change_direction+0x94>
		} 
		else 
		{
			turn_robot('R',180);
     fce:	82 e5       	ldi	r24, 0x52	; 82
     fd0:	64 eb       	ldi	r22, 0xB4	; 180
     fd2:	70 e0       	ldi	r23, 0x00	; 0
     fd4:	0e 94 79 07 	call	0xef2	; 0xef2 <turn_robot>
		}
		
		current_direction = 'N';
     fd8:	8e e4       	ldi	r24, 0x4E	; 78
     fda:	80 93 09 02 	sts	0x0209, r24
     fde:	08 95       	ret
	} 
	else if (current_direction == 'S' && desired_direction == 'E') 
     fe0:	85 34       	cpi	r24, 0x45	; 69
     fe2:	49 f4       	brne	.+18     	; 0xff6 <change_direction+0xb2>
	{ //south
		turn_robot('L',90);
     fe4:	8c e4       	ldi	r24, 0x4C	; 76
     fe6:	6a e5       	ldi	r22, 0x5A	; 90
     fe8:	70 e0       	ldi	r23, 0x00	; 0
     fea:	0e 94 79 07 	call	0xef2	; 0xef2 <turn_robot>
		current_direction = 'E';
     fee:	85 e4       	ldi	r24, 0x45	; 69
     ff0:	80 93 09 02 	sts	0x0209, r24
     ff4:	08 95       	ret
	} 
	else if (current_direction == 'S' && desired_direction == 'W') 
     ff6:	87 35       	cpi	r24, 0x57	; 87
     ff8:	09 f0       	breq	.+2      	; 0xffc <change_direction+0xb8>
     ffa:	66 c0       	rjmp	.+204    	; 0x10c8 <change_direction+0x184>
	{ //south
		turn_robot('R',90);
     ffc:	82 e5       	ldi	r24, 0x52	; 82
     ffe:	6a e5       	ldi	r22, 0x5A	; 90
    1000:	70 e0       	ldi	r23, 0x00	; 0
    1002:	0e 94 79 07 	call	0xef2	; 0xef2 <turn_robot>
		current_direction = 'W';
    1006:	87 e5       	ldi	r24, 0x57	; 87
    1008:	80 93 09 02 	sts	0x0209, r24
    100c:	08 95       	ret
	} 
	else if (current_direction == 'E' && desired_direction == 'N') 
    100e:	95 34       	cpi	r25, 0x45	; 69
    1010:	69 f5       	brne	.+90     	; 0x106c <change_direction+0x128>
    1012:	8e 34       	cpi	r24, 0x4E	; 78
    1014:	49 f4       	brne	.+18     	; 0x1028 <change_direction+0xe4>
	{ //east
		turn_robot('L',90);
    1016:	8c e4       	ldi	r24, 0x4C	; 76
    1018:	6a e5       	ldi	r22, 0x5A	; 90
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	0e 94 79 07 	call	0xef2	; 0xef2 <turn_robot>
		current_direction = 'N';
    1020:	8e e4       	ldi	r24, 0x4E	; 78
    1022:	80 93 09 02 	sts	0x0209, r24
    1026:	08 95       	ret
	} 
	else if (current_direction == 'E' && desired_direction == 'W') 
    1028:	87 35       	cpi	r24, 0x57	; 87
    102a:	a9 f4       	brne	.+42     	; 0x1056 <change_direction+0x112>
	{ //east
		if (current_coordinate[0] == 0) 
    102c:	80 91 05 02 	lds	r24, 0x0205
    1030:	90 91 06 02 	lds	r25, 0x0206
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	31 f4       	brne	.+12     	; 0x1044 <change_direction+0x100>
		{
			turn_robot('R',180);	
    1038:	82 e5       	ldi	r24, 0x52	; 82
    103a:	64 eb       	ldi	r22, 0xB4	; 180
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	0e 94 79 07 	call	0xef2	; 0xef2 <turn_robot>
    1042:	05 c0       	rjmp	.+10     	; 0x104e <change_direction+0x10a>
		} 
		else 
		{
			turn_robot('L',180);
    1044:	8c e4       	ldi	r24, 0x4C	; 76
    1046:	64 eb       	ldi	r22, 0xB4	; 180
    1048:	70 e0       	ldi	r23, 0x00	; 0
    104a:	0e 94 79 07 	call	0xef2	; 0xef2 <turn_robot>
		}
		
		current_direction = 'W';
    104e:	87 e5       	ldi	r24, 0x57	; 87
    1050:	80 93 09 02 	sts	0x0209, r24
    1054:	08 95       	ret
	} 
	else if (current_direction == 'E' && desired_direction == 'S') 
    1056:	83 35       	cpi	r24, 0x53	; 83
    1058:	b9 f5       	brne	.+110    	; 0x10c8 <change_direction+0x184>
	{ //east
		turn_robot('R',90);	
    105a:	82 e5       	ldi	r24, 0x52	; 82
    105c:	6a e5       	ldi	r22, 0x5A	; 90
    105e:	70 e0       	ldi	r23, 0x00	; 0
    1060:	0e 94 79 07 	call	0xef2	; 0xef2 <turn_robot>
		current_direction = 'S';
    1064:	83 e5       	ldi	r24, 0x53	; 83
    1066:	80 93 09 02 	sts	0x0209, r24
    106a:	08 95       	ret
	} 
	else if (current_direction == 'W' && desired_direction == 'N') 
    106c:	97 35       	cpi	r25, 0x57	; 87
    106e:	61 f5       	brne	.+88     	; 0x10c8 <change_direction+0x184>
    1070:	8e 34       	cpi	r24, 0x4E	; 78
    1072:	49 f4       	brne	.+18     	; 0x1086 <change_direction+0x142>
	{ //west
		turn_robot('R',90);	
    1074:	82 e5       	ldi	r24, 0x52	; 82
    1076:	6a e5       	ldi	r22, 0x5A	; 90
    1078:	70 e0       	ldi	r23, 0x00	; 0
    107a:	0e 94 79 07 	call	0xef2	; 0xef2 <turn_robot>
		current_direction = 'N';
    107e:	8e e4       	ldi	r24, 0x4E	; 78
    1080:	80 93 09 02 	sts	0x0209, r24
    1084:	08 95       	ret
	} 
	else if (current_direction == 'W' && desired_direction == 'E') 
    1086:	85 34       	cpi	r24, 0x45	; 69
    1088:	a9 f4       	brne	.+42     	; 0x10b4 <change_direction+0x170>
	{ //west
		if (current_coordinate[0] == 0) 
    108a:	80 91 05 02 	lds	r24, 0x0205
    108e:	90 91 06 02 	lds	r25, 0x0206
    1092:	00 97       	sbiw	r24, 0x00	; 0
    1094:	31 f4       	brne	.+12     	; 0x10a2 <change_direction+0x15e>
		{
			turn_robot('L',180);
    1096:	8c e4       	ldi	r24, 0x4C	; 76
    1098:	64 eb       	ldi	r22, 0xB4	; 180
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	0e 94 79 07 	call	0xef2	; 0xef2 <turn_robot>
    10a0:	05 c0       	rjmp	.+10     	; 0x10ac <change_direction+0x168>
		} 
		else 
		{
			turn_robot('R',180);	
    10a2:	82 e5       	ldi	r24, 0x52	; 82
    10a4:	64 eb       	ldi	r22, 0xB4	; 180
    10a6:	70 e0       	ldi	r23, 0x00	; 0
    10a8:	0e 94 79 07 	call	0xef2	; 0xef2 <turn_robot>
		}
		
		current_direction = 'E';
    10ac:	85 e4       	ldi	r24, 0x45	; 69
    10ae:	80 93 09 02 	sts	0x0209, r24
    10b2:	08 95       	ret
	} 
	else if (current_direction == 'W' && desired_direction == 'S') 
    10b4:	83 35       	cpi	r24, 0x53	; 83
    10b6:	41 f4       	brne	.+16     	; 0x10c8 <change_direction+0x184>
	{ //west
		turn_robot('L',90);
    10b8:	8c e4       	ldi	r24, 0x4C	; 76
    10ba:	6a e5       	ldi	r22, 0x5A	; 90
    10bc:	70 e0       	ldi	r23, 0x00	; 0
    10be:	0e 94 79 07 	call	0xef2	; 0xef2 <turn_robot>
		current_direction = 'S';
    10c2:	83 e5       	ldi	r24, 0x53	; 83
    10c4:	80 93 09 02 	sts	0x0209, r24
    10c8:	08 95       	ret

000010ca <move_one_cell>:
 * Example Call:	move_one_cell(d)
 */
void move_one_cell (int d) 
{
	// the bellow if condition will prevent the bot from checking for the box until it is nearby to prevent misreading
	if(d==0)
    10ca:	00 97       	sbiw	r24, 0x00	; 0
    10cc:	39 f4       	brne	.+14     	; 0x10dc <move_one_cell+0x12>
	{
	follow_black_line_mm(270, 'F',1);
    10ce:	8e e0       	ldi	r24, 0x0E	; 14
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	66 e4       	ldi	r22, 0x46	; 70
    10d4:	41 e0       	ldi	r20, 0x01	; 1
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	0e 94 24 07 	call	0xe48	; 0xe48 <follow_black_line_mm>
	}
	read_wl_sensor_values();
    10dc:	0e 94 d0 05 	call	0xba0	; 0xba0 <read_wl_sensor_values>
	while (!(((Left_white_line > BNW_Thresh) && (Center_white_line > BNW_Thresh)) || ((Center_white_line > BNW_Thresh) && (Right_white_line > BNW_Thresh)) // 1-2 or 3-2 on white
    10e0:	07 c0       	rjmp	.+14     	; 0x10f0 <move_one_cell+0x26>
			|| ((Left_white_line > BNW_Thresh) && (Center_white_line > BNW_Thresh) && (Right_white_line > BNW_Thresh)))) 
	{ // center on black
		read_wl_sensor_values();
    10e2:	0e 94 d0 05 	call	0xba0	; 0xba0 <read_wl_sensor_values>
		follow_black_line('F',0);
    10e6:	86 e4       	ldi	r24, 0x46	; 70
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	70 e0       	ldi	r23, 0x00	; 0
    10ec:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <follow_black_line>
	if(d==0)
	{
	follow_black_line_mm(270, 'F',1);
	}
	read_wl_sensor_values();
	while (!(((Left_white_line > BNW_Thresh) && (Center_white_line > BNW_Thresh)) || ((Center_white_line > BNW_Thresh) && (Right_white_line > BNW_Thresh)) // 1-2 or 3-2 on white
    10f0:	80 91 01 02 	lds	r24, 0x0201
    10f4:	90 91 02 02 	lds	r25, 0x0202
    10f8:	20 91 ba 04 	lds	r18, 0x04BA
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	82 17       	cp	r24, r18
    1100:	93 07       	cpc	r25, r19
    1102:	3c f4       	brge	.+14     	; 0x1112 <move_one_cell+0x48>
    1104:	20 91 b9 04 	lds	r18, 0x04B9
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	82 17       	cp	r24, r18
    110c:	93 07       	cpc	r25, r19
    110e:	34 f5       	brge	.+76     	; 0x115c <move_one_cell+0x92>
    1110:	13 c0       	rjmp	.+38     	; 0x1138 <move_one_cell+0x6e>
    1112:	20 91 b9 04 	lds	r18, 0x04B9
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	82 17       	cp	r24, r18
    111a:	93 07       	cpc	r25, r19
    111c:	14 f7       	brge	.-60     	; 0x10e2 <move_one_cell+0x18>
    111e:	20 91 b8 04 	lds	r18, 0x04B8
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	82 17       	cp	r24, r18
    1126:	93 07       	cpc	r25, r19
    1128:	e4 f6       	brge	.-72     	; 0x10e2 <move_one_cell+0x18>
    112a:	06 c0       	rjmp	.+12     	; 0x1138 <move_one_cell+0x6e>
			|| ((Left_white_line > BNW_Thresh) && (Center_white_line > BNW_Thresh) && (Right_white_line > BNW_Thresh)))) 
    112c:	20 91 b8 04 	lds	r18, 0x04B8
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	82 17       	cp	r24, r18
    1134:	93 07       	cpc	r25, r19
    1136:	ac f6       	brge	.-86     	; 0x10e2 <move_one_cell+0x18>
	{ // center on black
		read_wl_sensor_values();
		follow_black_line('F',0);
	}
	buzzer_on()	;
    1138:	0e 94 4f 02 	call	0x49e	; 0x49e <buzzer_on>
    113c:	8f ef       	ldi	r24, 0xFF	; 255
    113e:	9f ef       	ldi	r25, 0xFF	; 255
    1140:	a8 e0       	ldi	r26, 0x08	; 8
    1142:	81 50       	subi	r24, 0x01	; 1
    1144:	90 40       	sbci	r25, 0x00	; 0
    1146:	a0 40       	sbci	r26, 0x00	; 0
    1148:	e1 f7       	brne	.-8      	; 0x1142 <move_one_cell+0x78>
    114a:	00 c0       	rjmp	.+0      	; 0x114c <move_one_cell+0x82>
    114c:	00 00       	nop
	// this delay is important: if disabled, the bot may get out of line
	_delay_ms(200);
	buzzer_off();
    114e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <buzzer_off>
	// adjust 10/2 cm forward to make the wheels on the 3x3cm black squares.
	forward_mm(50);
    1152:	82 e3       	ldi	r24, 0x32	; 50
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 94 a8 03 	call	0x750	; 0x750 <forward_mm>
}
    115a:	08 95       	ret
	{
	follow_black_line_mm(270, 'F',1);
	}
	read_wl_sensor_values();
	while (!(((Left_white_line > BNW_Thresh) && (Center_white_line > BNW_Thresh)) || ((Center_white_line > BNW_Thresh) && (Right_white_line > BNW_Thresh)) // 1-2 or 3-2 on white
			|| ((Left_white_line > BNW_Thresh) && (Center_white_line > BNW_Thresh) && (Right_white_line > BNW_Thresh)))) 
    115c:	82 17       	cp	r24, r18
    115e:	93 07       	cpc	r25, r19
    1160:	0c f0       	brlt	.+2      	; 0x1164 <move_one_cell+0x9a>
    1162:	bf cf       	rjmp	.-130    	; 0x10e2 <move_one_cell+0x18>
    1164:	e3 cf       	rjmp	.-58     	; 0x112c <move_one_cell+0x62>

00001166 <match_column>:
 *						change direction to east by using change_direction('E') and then move the robot by one cell
 *						forward by using move_one_cell(). After that we update current co-ordinate's column number by increase 1
 * Example Call:	match_column((int){1, 3})
 */
void match_column (int target_coordinate[]) 
{
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	8c 01       	movw	r16, r24
	while (current_coordinate[1] > target_coordinate[1]) 
    1170:	20 91 07 02 	lds	r18, 0x0207
    1174:	30 91 08 02 	lds	r19, 0x0208
    1178:	fc 01       	movw	r30, r24
    117a:	82 81       	ldd	r24, Z+2	; 0x02
    117c:	93 81       	ldd	r25, Z+3	; 0x03
    117e:	82 17       	cp	r24, r18
    1180:	93 07       	cpc	r25, r19
    1182:	a4 f4       	brge	.+40     	; 0x11ac <match_column+0x46>
	{// go east/west until both position on same column
		change_direction('W');
		move_one_cell(0);
		current_coordinate[1]--;
    1184:	c7 e0       	ldi	r28, 0x07	; 7
    1186:	d2 e0       	ldi	r29, 0x02	; 2
 */
void match_column (int target_coordinate[]) 
{
	while (current_coordinate[1] > target_coordinate[1]) 
	{// go east/west until both position on same column
		change_direction('W');
    1188:	87 e5       	ldi	r24, 0x57	; 87
    118a:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
		move_one_cell(0);
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 65 08 	call	0x10ca	; 0x10ca <move_one_cell>
		current_coordinate[1]--;
    1196:	88 81       	ld	r24, Y
    1198:	99 81       	ldd	r25, Y+1	; 0x01
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	99 83       	std	Y+1, r25	; 0x01
    119e:	88 83       	st	Y, r24
 *						forward by using move_one_cell(). After that we update current co-ordinate's column number by increase 1
 * Example Call:	match_column((int){1, 3})
 */
void match_column (int target_coordinate[]) 
{
	while (current_coordinate[1] > target_coordinate[1]) 
    11a0:	f8 01       	movw	r30, r16
    11a2:	22 81       	ldd	r18, Z+2	; 0x02
    11a4:	33 81       	ldd	r19, Z+3	; 0x03
    11a6:	28 17       	cp	r18, r24
    11a8:	39 07       	cpc	r19, r25
    11aa:	74 f3       	brlt	.-36     	; 0x1188 <match_column+0x22>
		change_direction('W');
		move_one_cell(0);
		current_coordinate[1]--;
	}
		
	while (current_coordinate[1] < target_coordinate[1]) 
    11ac:	20 91 07 02 	lds	r18, 0x0207
    11b0:	30 91 08 02 	lds	r19, 0x0208
    11b4:	f8 01       	movw	r30, r16
    11b6:	82 81       	ldd	r24, Z+2	; 0x02
    11b8:	93 81       	ldd	r25, Z+3	; 0x03
    11ba:	28 17       	cp	r18, r24
    11bc:	39 07       	cpc	r19, r25
    11be:	a4 f4       	brge	.+40     	; 0x11e8 <match_column+0x82>
	{// go east/west until both position on same column
		change_direction('E');
		move_one_cell(0);
		current_coordinate[1]++;
    11c0:	c7 e0       	ldi	r28, 0x07	; 7
    11c2:	d2 e0       	ldi	r29, 0x02	; 2
		current_coordinate[1]--;
	}
		
	while (current_coordinate[1] < target_coordinate[1]) 
	{// go east/west until both position on same column
		change_direction('E');
    11c4:	85 e4       	ldi	r24, 0x45	; 69
    11c6:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
		move_one_cell(0);
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	0e 94 65 08 	call	0x10ca	; 0x10ca <move_one_cell>
		current_coordinate[1]++;
    11d2:	88 81       	ld	r24, Y
    11d4:	99 81       	ldd	r25, Y+1	; 0x01
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	99 83       	std	Y+1, r25	; 0x01
    11da:	88 83       	st	Y, r24
		change_direction('W');
		move_one_cell(0);
		current_coordinate[1]--;
	}
		
	while (current_coordinate[1] < target_coordinate[1]) 
    11dc:	f8 01       	movw	r30, r16
    11de:	22 81       	ldd	r18, Z+2	; 0x02
    11e0:	33 81       	ldd	r19, Z+3	; 0x03
    11e2:	82 17       	cp	r24, r18
    11e4:	93 07       	cpc	r25, r19
    11e6:	74 f3       	brlt	.-36     	; 0x11c4 <match_column+0x5e>
	{// go east/west until both position on same column
		change_direction('E');
		move_one_cell(0);
		current_coordinate[1]++;
	}
}
    11e8:	df 91       	pop	r29
    11ea:	cf 91       	pop	r28
    11ec:	1f 91       	pop	r17
    11ee:	0f 91       	pop	r16
    11f0:	08 95       	ret

000011f2 <match_row>:
 *						change direction to south by using change_direction('S') and then move the robot by one cell
 *						forward by using move_one_cell(). After that we update current co-ordinate's column number by increase 1
 * Example Call:	match_row((int){1, 3})
 */
void match_row (int target_coordinate[]) 
{
    11f2:	0f 93       	push	r16
    11f4:	1f 93       	push	r17
    11f6:	cf 93       	push	r28
    11f8:	df 93       	push	r29
    11fa:	8c 01       	movw	r16, r24
	while (current_coordinate[0] > target_coordinate[0]) 
    11fc:	20 91 05 02 	lds	r18, 0x0205
    1200:	30 91 06 02 	lds	r19, 0x0206
    1204:	fc 01       	movw	r30, r24
    1206:	80 81       	ld	r24, Z
    1208:	91 81       	ldd	r25, Z+1	; 0x01
    120a:	82 17       	cp	r24, r18
    120c:	93 07       	cpc	r25, r19
    120e:	a4 f4       	brge	.+40     	; 0x1238 <match_row+0x46>
	{// go north/south until both position on same row
		change_direction('S');
		move_one_cell(0);
		current_coordinate[0]--;
    1210:	c5 e0       	ldi	r28, 0x05	; 5
    1212:	d2 e0       	ldi	r29, 0x02	; 2
 */
void match_row (int target_coordinate[]) 
{
	while (current_coordinate[0] > target_coordinate[0]) 
	{// go north/south until both position on same row
		change_direction('S');
    1214:	83 e5       	ldi	r24, 0x53	; 83
    1216:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
		move_one_cell(0);
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	0e 94 65 08 	call	0x10ca	; 0x10ca <move_one_cell>
		current_coordinate[0]--;
    1222:	88 81       	ld	r24, Y
    1224:	99 81       	ldd	r25, Y+1	; 0x01
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	99 83       	std	Y+1, r25	; 0x01
    122a:	88 83       	st	Y, r24
 *						forward by using move_one_cell(). After that we update current co-ordinate's column number by increase 1
 * Example Call:	match_row((int){1, 3})
 */
void match_row (int target_coordinate[]) 
{
	while (current_coordinate[0] > target_coordinate[0]) 
    122c:	f8 01       	movw	r30, r16
    122e:	20 81       	ld	r18, Z
    1230:	31 81       	ldd	r19, Z+1	; 0x01
    1232:	28 17       	cp	r18, r24
    1234:	39 07       	cpc	r19, r25
    1236:	74 f3       	brlt	.-36     	; 0x1214 <match_row+0x22>
		change_direction('S');
		move_one_cell(0);
		current_coordinate[0]--;
	}
	
	while (current_coordinate[0] < target_coordinate[0]) 
    1238:	20 91 05 02 	lds	r18, 0x0205
    123c:	30 91 06 02 	lds	r19, 0x0206
    1240:	f8 01       	movw	r30, r16
    1242:	80 81       	ld	r24, Z
    1244:	91 81       	ldd	r25, Z+1	; 0x01
    1246:	28 17       	cp	r18, r24
    1248:	39 07       	cpc	r19, r25
    124a:	a4 f4       	brge	.+40     	; 0x1274 <match_row+0x82>
	{// go north/south until both position on same row
		change_direction('N');
		move_one_cell(0);
		current_coordinate[0]++;
    124c:	c5 e0       	ldi	r28, 0x05	; 5
    124e:	d2 e0       	ldi	r29, 0x02	; 2
		current_coordinate[0]--;
	}
	
	while (current_coordinate[0] < target_coordinate[0]) 
	{// go north/south until both position on same row
		change_direction('N');
    1250:	8e e4       	ldi	r24, 0x4E	; 78
    1252:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
		move_one_cell(0);
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 65 08 	call	0x10ca	; 0x10ca <move_one_cell>
		current_coordinate[0]++;
    125e:	88 81       	ld	r24, Y
    1260:	99 81       	ldd	r25, Y+1	; 0x01
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	99 83       	std	Y+1, r25	; 0x01
    1266:	88 83       	st	Y, r24
		change_direction('S');
		move_one_cell(0);
		current_coordinate[0]--;
	}
	
	while (current_coordinate[0] < target_coordinate[0]) 
    1268:	f8 01       	movw	r30, r16
    126a:	20 81       	ld	r18, Z
    126c:	31 81       	ldd	r19, Z+1	; 0x01
    126e:	82 17       	cp	r24, r18
    1270:	93 07       	cpc	r25, r19
    1272:	74 f3       	brlt	.-36     	; 0x1250 <match_row+0x5e>
	{// go north/south until both position on same row
		change_direction('N');
		move_one_cell(0);
		current_coordinate[0]++;
	}
}
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <go_to_coordinate>:
 * Output:			It moves the robot to a specific co-ordinate by using match_column and match_row functions
 * Logic:			it moves to the coordinate  w.r.t the current direction and finds the best set of motion
 * Example Call:	go_to_coordinate((int){6, 5})
 */
void go_to_coordinate (int target_coordinate[]) 
{
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	ec 01       	movw	r28, r24

	if(current_coordinate[0]>target_coordinate[0]&&current_coordinate[1]>target_coordinate[1])
    1284:	80 91 05 02 	lds	r24, 0x0205
    1288:	90 91 06 02 	lds	r25, 0x0206
    128c:	28 81       	ld	r18, Y
    128e:	39 81       	ldd	r19, Y+1	; 0x01
    1290:	28 17       	cp	r18, r24
    1292:	39 07       	cpc	r19, r25
    1294:	ec f4       	brge	.+58     	; 0x12d0 <go_to_coordinate+0x52>
    1296:	40 91 07 02 	lds	r20, 0x0207
    129a:	50 91 08 02 	lds	r21, 0x0208
    129e:	6a 81       	ldd	r22, Y+2	; 0x02
    12a0:	7b 81       	ldd	r23, Y+3	; 0x03
    12a2:	64 17       	cp	r22, r20
    12a4:	75 07       	cpc	r23, r21
    12a6:	a4 f4       	brge	.+40     	; 0x12d0 <go_to_coordinate+0x52>
	{
	//if the target coordinate is SW to the current coordinate
		if (current_direction == 'N' || current_direction == 'W') 
    12a8:	80 91 09 02 	lds	r24, 0x0209
    12ac:	8e 34       	cpi	r24, 0x4E	; 78
    12ae:	11 f0       	breq	.+4      	; 0x12b4 <go_to_coordinate+0x36>
    12b0:	87 35       	cpi	r24, 0x57	; 87
    12b2:	39 f4       	brne	.+14     	; 0x12c2 <go_to_coordinate+0x44>
		{ // match column then row
			match_column(target_coordinate);
    12b4:	ce 01       	movw	r24, r28
    12b6:	0e 94 b3 08 	call	0x1166	; 0x1166 <match_column>
			match_row(target_coordinate);
    12ba:	ce 01       	movw	r24, r28
    12bc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <match_row>
    12c0:	94 c0       	rjmp	.+296    	; 0x13ea <go_to_coordinate+0x16c>
		} 
		else 
		{ // if current_direction = S or E  
			// match row then column
			match_row(target_coordinate);
    12c2:	ce 01       	movw	r24, r28
    12c4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <match_row>
			match_column(target_coordinate);
    12c8:	ce 01       	movw	r24, r28
    12ca:	0e 94 b3 08 	call	0x1166	; 0x1166 <match_column>
    12ce:	8d c0       	rjmp	.+282    	; 0x13ea <go_to_coordinate+0x16c>
		}
	}	
	else if(current_coordinate[0]<target_coordinate[0]&&current_coordinate[1]<target_coordinate[1])
    12d0:	82 17       	cp	r24, r18
    12d2:	93 07       	cpc	r25, r19
    12d4:	ec f4       	brge	.+58     	; 0x1310 <go_to_coordinate+0x92>
    12d6:	40 91 07 02 	lds	r20, 0x0207
    12da:	50 91 08 02 	lds	r21, 0x0208
    12de:	6a 81       	ldd	r22, Y+2	; 0x02
    12e0:	7b 81       	ldd	r23, Y+3	; 0x03
    12e2:	46 17       	cp	r20, r22
    12e4:	57 07       	cpc	r21, r23
    12e6:	a4 f4       	brge	.+40     	; 0x1310 <go_to_coordinate+0x92>
	{
		//if the target coordinate is NE to the current coordinate
		if (current_direction == 'S' || current_direction == 'E') 
    12e8:	80 91 09 02 	lds	r24, 0x0209
    12ec:	83 35       	cpi	r24, 0x53	; 83
    12ee:	11 f0       	breq	.+4      	; 0x12f4 <go_to_coordinate+0x76>
    12f0:	85 34       	cpi	r24, 0x45	; 69
    12f2:	39 f4       	brne	.+14     	; 0x1302 <go_to_coordinate+0x84>
		{ // match column then row
			match_column(target_coordinate);
    12f4:	ce 01       	movw	r24, r28
    12f6:	0e 94 b3 08 	call	0x1166	; 0x1166 <match_column>
			match_row(target_coordinate);
    12fa:	ce 01       	movw	r24, r28
    12fc:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <match_row>
    1300:	74 c0       	rjmp	.+232    	; 0x13ea <go_to_coordinate+0x16c>
		} 
		else
		{ // if current_direction = N or W  
			// match row then column
			match_row(target_coordinate);
    1302:	ce 01       	movw	r24, r28
    1304:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <match_row>
			match_column(target_coordinate);
    1308:	ce 01       	movw	r24, r28
    130a:	0e 94 b3 08 	call	0x1166	; 0x1166 <match_column>
    130e:	6d c0       	rjmp	.+218    	; 0x13ea <go_to_coordinate+0x16c>
		}
	}
	else if(current_coordinate[0]>target_coordinate[0]&&current_coordinate[1]<target_coordinate[1])
    1310:	28 17       	cp	r18, r24
    1312:	39 07       	cpc	r19, r25
    1314:	ec f4       	brge	.+58     	; 0x1350 <go_to_coordinate+0xd2>
    1316:	40 91 07 02 	lds	r20, 0x0207
    131a:	50 91 08 02 	lds	r21, 0x0208
    131e:	6a 81       	ldd	r22, Y+2	; 0x02
    1320:	7b 81       	ldd	r23, Y+3	; 0x03
    1322:	46 17       	cp	r20, r22
    1324:	57 07       	cpc	r21, r23
    1326:	a4 f4       	brge	.+40     	; 0x1350 <go_to_coordinate+0xd2>
	{
		//if the target coordinate is SE to the current coordinate
		if (current_direction == 'N' || current_direction == 'E') 
    1328:	80 91 09 02 	lds	r24, 0x0209
    132c:	8e 34       	cpi	r24, 0x4E	; 78
    132e:	11 f0       	breq	.+4      	; 0x1334 <go_to_coordinate+0xb6>
    1330:	85 34       	cpi	r24, 0x45	; 69
    1332:	39 f4       	brne	.+14     	; 0x1342 <go_to_coordinate+0xc4>
		{ // match column then row
			match_column(target_coordinate);
    1334:	ce 01       	movw	r24, r28
    1336:	0e 94 b3 08 	call	0x1166	; 0x1166 <match_column>
			match_row(target_coordinate);
    133a:	ce 01       	movw	r24, r28
    133c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <match_row>
    1340:	54 c0       	rjmp	.+168    	; 0x13ea <go_to_coordinate+0x16c>
		} else 
		{ // if current_direction = S or W  
			// match row then column
			match_row(target_coordinate);
    1342:	ce 01       	movw	r24, r28
    1344:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <match_row>
			match_column(target_coordinate);
    1348:	ce 01       	movw	r24, r28
    134a:	0e 94 b3 08 	call	0x1166	; 0x1166 <match_column>
    134e:	4d c0       	rjmp	.+154    	; 0x13ea <go_to_coordinate+0x16c>
		}
	}	
	else if(current_coordinate[0]<target_coordinate[0]&&current_coordinate[1]>target_coordinate[1])
    1350:	82 17       	cp	r24, r18
    1352:	93 07       	cpc	r25, r19
    1354:	24 f5       	brge	.+72     	; 0x139e <go_to_coordinate+0x120>
    1356:	40 91 07 02 	lds	r20, 0x0207
    135a:	50 91 08 02 	lds	r21, 0x0208
    135e:	6a 81       	ldd	r22, Y+2	; 0x02
    1360:	7b 81       	ldd	r23, Y+3	; 0x03
    1362:	64 17       	cp	r22, r20
    1364:	75 07       	cpc	r23, r21
    1366:	a4 f4       	brge	.+40     	; 0x1390 <go_to_coordinate+0x112>
	{
		//if the target coordinate is NW to the current coordinate
		if (current_direction == 'S' || current_direction == 'W') 
    1368:	80 91 09 02 	lds	r24, 0x0209
    136c:	83 35       	cpi	r24, 0x53	; 83
    136e:	11 f0       	breq	.+4      	; 0x1374 <go_to_coordinate+0xf6>
    1370:	87 35       	cpi	r24, 0x57	; 87
    1372:	39 f4       	brne	.+14     	; 0x1382 <go_to_coordinate+0x104>
		{ // match column then row
			match_column(target_coordinate);
    1374:	ce 01       	movw	r24, r28
    1376:	0e 94 b3 08 	call	0x1166	; 0x1166 <match_column>
			match_row(target_coordinate);
    137a:	ce 01       	movw	r24, r28
    137c:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <match_row>
    1380:	34 c0       	rjmp	.+104    	; 0x13ea <go_to_coordinate+0x16c>
		} 
		else 
		{ // if current_direction = N or E  
			// match row then column
			match_row(target_coordinate);
    1382:	ce 01       	movw	r24, r28
    1384:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <match_row>
			match_column(target_coordinate);
    1388:	ce 01       	movw	r24, r28
    138a:	0e 94 b3 08 	call	0x1166	; 0x1166 <match_column>
    138e:	2d c0       	rjmp	.+90     	; 0x13ea <go_to_coordinate+0x16c>
		}
	}	
	else if(current_coordinate[0]<target_coordinate[0]&&current_coordinate[1]==target_coordinate[1])
    1390:	46 17       	cp	r20, r22
    1392:	57 07       	cpc	r21, r23
    1394:	21 f4       	brne	.+8      	; 0x139e <go_to_coordinate+0x120>
	{
		//if the target coordinate is N to the current coordinate
		match_row (target_coordinate);
    1396:	ce 01       	movw	r24, r28
    1398:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <match_row>
    139c:	26 c0       	rjmp	.+76     	; 0x13ea <go_to_coordinate+0x16c>
	}
	else if(current_coordinate[0]>target_coordinate[0]&&current_coordinate[1]==target_coordinate[1])
    139e:	28 17       	cp	r18, r24
    13a0:	39 07       	cpc	r19, r25
    13a2:	6c f4       	brge	.+26     	; 0x13be <go_to_coordinate+0x140>
    13a4:	40 91 07 02 	lds	r20, 0x0207
    13a8:	50 91 08 02 	lds	r21, 0x0208
    13ac:	6a 81       	ldd	r22, Y+2	; 0x02
    13ae:	7b 81       	ldd	r23, Y+3	; 0x03
    13b0:	46 17       	cp	r20, r22
    13b2:	57 07       	cpc	r21, r23
    13b4:	21 f4       	brne	.+8      	; 0x13be <go_to_coordinate+0x140>
	{
		//if the target coordinate is S to the current coordinate
		match_row (target_coordinate);
    13b6:	ce 01       	movw	r24, r28
    13b8:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <match_row>
    13bc:	16 c0       	rjmp	.+44     	; 0x13ea <go_to_coordinate+0x16c>
	}
	else if(current_coordinate[0]==target_coordinate[0]&&current_coordinate[1]>target_coordinate[1])
    13be:	82 17       	cp	r24, r18
    13c0:	93 07       	cpc	r25, r19
    13c2:	99 f4       	brne	.+38     	; 0x13ea <go_to_coordinate+0x16c>
    13c4:	20 91 07 02 	lds	r18, 0x0207
    13c8:	30 91 08 02 	lds	r19, 0x0208
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	9b 81       	ldd	r25, Y+3	; 0x03
    13d0:	82 17       	cp	r24, r18
    13d2:	93 07       	cpc	r25, r19
    13d4:	24 f4       	brge	.+8      	; 0x13de <go_to_coordinate+0x160>
	{
		//if the target coordinate is W to the current coordinate
		match_column(target_coordinate);
    13d6:	ce 01       	movw	r24, r28
    13d8:	0e 94 b3 08 	call	0x1166	; 0x1166 <match_column>
    13dc:	06 c0       	rjmp	.+12     	; 0x13ea <go_to_coordinate+0x16c>
	}
	else if(current_coordinate[0]==target_coordinate[0]&&current_coordinate[1]<target_coordinate[1])
    13de:	28 17       	cp	r18, r24
    13e0:	39 07       	cpc	r19, r25
    13e2:	1c f4       	brge	.+6      	; 0x13ea <go_to_coordinate+0x16c>
	{
		//if the target coordinate is SW to the current coordinate
		match_column(target_coordinate);
    13e4:	ce 01       	movw	r24, r28
    13e6:	0e 94 b3 08 	call	0x1166	; 0x1166 <match_column>
	}
}
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	08 95       	ret

000013f0 <go_to_cell_no>:
 *					then copy returned data from get_nearest_point(current_coordinate, habitat__map[target_cell_no])
 *					to nearest_point.
 * Example Call:	go_to_cell_no(2, 5)
 */
void go_to_cell_no (int target_cell_no) 
{
    13f0:	0f 93       	push	r16
    13f2:	1f 93       	push	r17
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	ec 01       	movw	r28, r24
	int * nearest_point = (int *) malloc(2 * sizeof(int));
    13fa:	84 e0       	ldi	r24, 0x04	; 4
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 27 11 	call	0x224e	; 0x224e <malloc>
    1402:	08 2f       	mov	r16, r24
    1404:	19 2f       	mov	r17, r25
	memcpy(nearest_point, get_nearest_point(current_coordinate, habitat_position_map[target_cell_no-1]), 2 * sizeof(int));
    1406:	be 01       	movw	r22, r28
    1408:	62 95       	swap	r22
    140a:	72 95       	swap	r23
    140c:	70 7f       	andi	r23, 0xF0	; 240
    140e:	76 27       	eor	r23, r22
    1410:	60 7f       	andi	r22, 0xF0	; 240
    1412:	76 27       	eor	r23, r22
    1414:	65 50       	subi	r22, 0x05	; 5
    1416:	7e 4f       	sbci	r23, 0xFE	; 254
    1418:	85 e0       	ldi	r24, 0x05	; 5
    141a:	92 e0       	ldi	r25, 0x02	; 2
    141c:	0e 94 85 04 	call	0x90a	; 0x90a <get_nearest_point>
    1420:	fc 01       	movw	r30, r24
    1422:	80 81       	ld	r24, Z
    1424:	91 81       	ldd	r25, Z+1	; 0x01
    1426:	a2 81       	ldd	r26, Z+2	; 0x02
    1428:	b3 81       	ldd	r27, Z+3	; 0x03
    142a:	f8 01       	movw	r30, r16
    142c:	80 83       	st	Z, r24
    142e:	91 83       	std	Z+1, r25	; 0x01
    1430:	a2 83       	std	Z+2, r26	; 0x02
    1432:	b3 83       	std	Z+3, r27	; 0x03
	go_to_coordinate(nearest_point);
    1434:	c8 01       	movw	r24, r16
    1436:	0e 94 3f 09 	call	0x127e	; 0x127e <go_to_coordinate>
}
    143a:	df 91       	pop	r29
    143c:	cf 91       	pop	r28
    143e:	1f 91       	pop	r17
    1440:	0f 91       	pop	r16
    1442:	08 95       	ret

00001444 <pick_up>:
 * Logic:			go to the animal location according to the conditions and picks up the animal 
 * Example Call:	pick_up()
 */

void pick_up()
{
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
	int * nearest_point = (int *) malloc(2 * sizeof(int));
    1448:	84 e0       	ldi	r24, 0x04	; 4
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 27 11 	call	0x224e	; 0x224e <malloc>
    1450:	c8 2f       	mov	r28, r24
    1452:	d9 2f       	mov	r29, r25
	memcpy(nearest_point, get_nearest_point(current_coordinate, habitat_position_map[atoi((char*)habitat_pos[current_index+1])-1]), 2 * sizeof(int));
    1454:	80 91 03 02 	lds	r24, 0x0203
    1458:	90 91 04 02 	lds	r25, 0x0204
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	9c 01       	movw	r18, r24
    1460:	22 0f       	add	r18, r18
    1462:	33 1f       	adc	r19, r19
    1464:	82 0f       	add	r24, r18
    1466:	93 1f       	adc	r25, r19
    1468:	8e 55       	subi	r24, 0x5E	; 94
    146a:	9c 4f       	sbci	r25, 0xFC	; 252
    146c:	0e 94 56 12 	call	0x24ac	; 0x24ac <atoi>
    1470:	bc 01       	movw	r22, r24
    1472:	62 95       	swap	r22
    1474:	72 95       	swap	r23
    1476:	70 7f       	andi	r23, 0xF0	; 240
    1478:	76 27       	eor	r23, r22
    147a:	60 7f       	andi	r22, 0xF0	; 240
    147c:	76 27       	eor	r23, r22
    147e:	65 50       	subi	r22, 0x05	; 5
    1480:	7e 4f       	sbci	r23, 0xFE	; 254
    1482:	85 e0       	ldi	r24, 0x05	; 5
    1484:	92 e0       	ldi	r25, 0x02	; 2
    1486:	0e 94 85 04 	call	0x90a	; 0x90a <get_nearest_point>
    148a:	fc 01       	movw	r30, r24
    148c:	80 81       	ld	r24, Z
    148e:	91 81       	ldd	r25, Z+1	; 0x01
    1490:	a2 81       	ldd	r26, Z+2	; 0x02
    1492:	b3 81       	ldd	r27, Z+3	; 0x03
    1494:	88 83       	st	Y, r24
    1496:	99 83       	std	Y+1, r25	; 0x01
    1498:	aa 83       	std	Y+2, r26	; 0x02
    149a:	bb 83       	std	Y+3, r27	; 0x03
	if(current_coordinate[0]==current_coordinate[1]||(current_coordinate[0]==1&&current_coordinate[1]==6)||(current_coordinate[0]==6&&current_coordinate[1]==1))
    149c:	80 91 05 02 	lds	r24, 0x0205
    14a0:	90 91 06 02 	lds	r25, 0x0206
    14a4:	20 91 07 02 	lds	r18, 0x0207
    14a8:	30 91 08 02 	lds	r19, 0x0208
    14ac:	82 17       	cp	r24, r18
    14ae:	93 07       	cpc	r25, r19
    14b0:	81 f0       	breq	.+32     	; 0x14d2 <pick_up+0x8e>
    14b2:	81 30       	cpi	r24, 0x01	; 1
    14b4:	91 05       	cpc	r25, r1
    14b6:	21 f4       	brne	.+8      	; 0x14c0 <pick_up+0x7c>
    14b8:	26 30       	cpi	r18, 0x06	; 6
    14ba:	31 05       	cpc	r19, r1
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <pick_up+0x7c>
    14be:	91 c0       	rjmp	.+290    	; 0x15e2 <pick_up+0x19e>
    14c0:	86 30       	cpi	r24, 0x06	; 6
    14c2:	91 05       	cpc	r25, r1
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <pick_up+0x84>
    14c6:	bc c0       	rjmp	.+376    	; 0x1640 <pick_up+0x1fc>
    14c8:	21 30       	cpi	r18, 0x01	; 1
    14ca:	31 05       	cpc	r19, r1
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <pick_up+0x8c>
    14ce:	eb c0       	rjmp	.+470    	; 0x16a6 <pick_up+0x262>
    14d0:	5d c0       	rjmp	.+186    	; 0x158c <pick_up+0x148>
	{
		//corner condition 
		if(current_coordinate[0]==current_coordinate[1]&&current_coordinate[1]==1)
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	91 05       	cpc	r25, r1
    14d6:	59 f5       	brne	.+86     	; 0x152e <pick_up+0xea>
		{
			if(current_direction=='S') // if current direction is south turn bot 45 degree and go east
    14d8:	80 91 09 02 	lds	r24, 0x0209
    14dc:	83 35       	cpi	r24, 0x53	; 83
    14de:	91 f4       	brne	.+36     	; 0x1504 <pick_up+0xc0>
			{
				left_degrees(45);
    14e0:	8d e2       	ldi	r24, 0x2D	; 45
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 be 03 	call	0x77c	; 0x77c <left_degrees>
				pick('R');
    14e8:	82 e5       	ldi	r24, 0x52	; 82
    14ea:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
				left_degrees(45);
    14ee:	8d e2       	ldi	r24, 0x2D	; 45
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 be 03 	call	0x77c	; 0x77c <left_degrees>
				current_direction='E';
    14f6:	85 e4       	ldi	r24, 0x45	; 69
    14f8:	80 93 09 02 	sts	0x0209, r24
				pick_up_direction='R';
    14fc:	82 e5       	ldi	r24, 0x52	; 82
    14fe:	80 93 00 02 	sts	0x0200, r24
    1502:	68 c1       	rjmp	.+720    	; 0x17d4 <pick_up+0x390>
			}
			else if(current_direction=='W') // if current direction is west turn bot 45 degree and go north
    1504:	87 35       	cpi	r24, 0x57	; 87
    1506:	09 f0       	breq	.+2      	; 0x150a <pick_up+0xc6>
    1508:	65 c1       	rjmp	.+714    	; 0x17d4 <pick_up+0x390>
			{
				right_degrees(45);
    150a:	8d e2       	ldi	r24, 0x2D	; 45
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 c9 03 	call	0x792	; 0x792 <right_degrees>
				pick('L');
    1512:	8c e4       	ldi	r24, 0x4C	; 76
    1514:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
				right_degrees(45);
    1518:	8d e2       	ldi	r24, 0x2D	; 45
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 c9 03 	call	0x792	; 0x792 <right_degrees>
				current_direction='N';
    1520:	8e e4       	ldi	r24, 0x4E	; 78
    1522:	80 93 09 02 	sts	0x0209, r24
				pick_up_direction='L';
    1526:	8c e4       	ldi	r24, 0x4C	; 76
    1528:	80 93 00 02 	sts	0x0200, r24
    152c:	53 c1       	rjmp	.+678    	; 0x17d4 <pick_up+0x390>
			}
			
		}
		else if(current_coordinate[0]==current_coordinate[1]&&current_coordinate[1]==6)
    152e:	86 30       	cpi	r24, 0x06	; 6
    1530:	91 05       	cpc	r25, r1
    1532:	09 f0       	breq	.+2      	; 0x1536 <pick_up+0xf2>
    1534:	4f c1       	rjmp	.+670    	; 0x17d4 <pick_up+0x390>
		{
			if(current_direction=='N') // if current direction is north turn bot 45 degree and go west
    1536:	80 91 09 02 	lds	r24, 0x0209
    153a:	8e 34       	cpi	r24, 0x4E	; 78
    153c:	91 f4       	brne	.+36     	; 0x1562 <pick_up+0x11e>
			{
				left_degrees(45);
    153e:	8d e2       	ldi	r24, 0x2D	; 45
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	0e 94 be 03 	call	0x77c	; 0x77c <left_degrees>
				pick('R');
    1546:	82 e5       	ldi	r24, 0x52	; 82
    1548:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
				left_degrees(45);
    154c:	8d e2       	ldi	r24, 0x2D	; 45
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 be 03 	call	0x77c	; 0x77c <left_degrees>
				current_direction='W';
    1554:	87 e5       	ldi	r24, 0x57	; 87
    1556:	80 93 09 02 	sts	0x0209, r24
				pick_up_direction='R';
    155a:	82 e5       	ldi	r24, 0x52	; 82
    155c:	80 93 00 02 	sts	0x0200, r24
    1560:	39 c1       	rjmp	.+626    	; 0x17d4 <pick_up+0x390>
			}
			else if(current_direction=='E') // if current direction is east turn bot 45 degree and go south
    1562:	85 34       	cpi	r24, 0x45	; 69
    1564:	09 f0       	breq	.+2      	; 0x1568 <pick_up+0x124>
    1566:	36 c1       	rjmp	.+620    	; 0x17d4 <pick_up+0x390>
			{
				right_degrees(45);
    1568:	8d e2       	ldi	r24, 0x2D	; 45
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0e 94 c9 03 	call	0x792	; 0x792 <right_degrees>
				pick('L');
    1570:	8c e4       	ldi	r24, 0x4C	; 76
    1572:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
				right_degrees(45);
    1576:	8d e2       	ldi	r24, 0x2D	; 45
    1578:	90 e0       	ldi	r25, 0x00	; 0
    157a:	0e 94 c9 03 	call	0x792	; 0x792 <right_degrees>
				current_direction='S';
    157e:	83 e5       	ldi	r24, 0x53	; 83
    1580:	80 93 09 02 	sts	0x0209, r24
				pick_up_direction='L';
    1584:	8c e4       	ldi	r24, 0x4C	; 76
    1586:	80 93 00 02 	sts	0x0200, r24
    158a:	24 c1       	rjmp	.+584    	; 0x17d4 <pick_up+0x390>
			}
			
		}
		else if(current_coordinate[0]!=current_coordinate[1]&&current_coordinate[0]==6)	
		{
			if(current_direction=='W') // if current direction is west turn bot 45 degree and go south
    158c:	80 91 09 02 	lds	r24, 0x0209
    1590:	87 35       	cpi	r24, 0x57	; 87
    1592:	91 f4       	brne	.+36     	; 0x15b8 <pick_up+0x174>
			{
				left_degrees(45);
    1594:	8d e2       	ldi	r24, 0x2D	; 45
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 be 03 	call	0x77c	; 0x77c <left_degrees>
				pick('R');
    159c:	82 e5       	ldi	r24, 0x52	; 82
    159e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
				left_degrees(45);
    15a2:	8d e2       	ldi	r24, 0x2D	; 45
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 be 03 	call	0x77c	; 0x77c <left_degrees>
				current_direction='S';
    15aa:	83 e5       	ldi	r24, 0x53	; 83
    15ac:	80 93 09 02 	sts	0x0209, r24
				pick_up_direction='R';
    15b0:	82 e5       	ldi	r24, 0x52	; 82
    15b2:	80 93 00 02 	sts	0x0200, r24
    15b6:	0e c1       	rjmp	.+540    	; 0x17d4 <pick_up+0x390>
			}
			else if(current_direction=='N') // if current direction is north turn bot 45 degree and go east
    15b8:	8e 34       	cpi	r24, 0x4E	; 78
    15ba:	09 f0       	breq	.+2      	; 0x15be <pick_up+0x17a>
    15bc:	0b c1       	rjmp	.+534    	; 0x17d4 <pick_up+0x390>
			{
				right_degrees(45);
    15be:	8d e2       	ldi	r24, 0x2D	; 45
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	0e 94 c9 03 	call	0x792	; 0x792 <right_degrees>
				pick('L');
    15c6:	8c e4       	ldi	r24, 0x4C	; 76
    15c8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
				right_degrees(45);
    15cc:	8d e2       	ldi	r24, 0x2D	; 45
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	0e 94 c9 03 	call	0x792	; 0x792 <right_degrees>
				current_direction='E';
    15d4:	85 e4       	ldi	r24, 0x45	; 69
    15d6:	80 93 09 02 	sts	0x0209, r24
				pick_up_direction='L';
    15da:	8c e4       	ldi	r24, 0x4C	; 76
    15dc:	80 93 00 02 	sts	0x0200, r24
    15e0:	f9 c0       	rjmp	.+498    	; 0x17d4 <pick_up+0x390>
			}
			
		}
		else if(current_coordinate[0]!=current_coordinate[1]&&current_coordinate[1]==6)
    15e2:	26 30       	cpi	r18, 0x06	; 6
    15e4:	31 05       	cpc	r19, r1
    15e6:	09 f0       	breq	.+2      	; 0x15ea <pick_up+0x1a6>
    15e8:	f5 c0       	rjmp	.+490    	; 0x17d4 <pick_up+0x390>
		{
			if(current_direction=='E')
    15ea:	80 91 09 02 	lds	r24, 0x0209
    15ee:	85 34       	cpi	r24, 0x45	; 69
    15f0:	91 f4       	brne	.+36     	; 0x1616 <pick_up+0x1d2>
			{
				left_degrees(45);
    15f2:	8d e2       	ldi	r24, 0x2D	; 45
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	0e 94 be 03 	call	0x77c	; 0x77c <left_degrees>
				pick('R');
    15fa:	82 e5       	ldi	r24, 0x52	; 82
    15fc:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
				left_degrees(45);
    1600:	8d e2       	ldi	r24, 0x2D	; 45
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0e 94 be 03 	call	0x77c	; 0x77c <left_degrees>
				current_direction='N';
    1608:	8e e4       	ldi	r24, 0x4E	; 78
    160a:	80 93 09 02 	sts	0x0209, r24
				pick_up_direction='R';
    160e:	82 e5       	ldi	r24, 0x52	; 82
    1610:	80 93 00 02 	sts	0x0200, r24
    1614:	df c0       	rjmp	.+446    	; 0x17d4 <pick_up+0x390>
			}
			else if(current_direction=='S')
    1616:	83 35       	cpi	r24, 0x53	; 83
    1618:	09 f0       	breq	.+2      	; 0x161c <pick_up+0x1d8>
    161a:	dc c0       	rjmp	.+440    	; 0x17d4 <pick_up+0x390>
			{
				right_degrees(45);
    161c:	8d e2       	ldi	r24, 0x2D	; 45
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	0e 94 c9 03 	call	0x792	; 0x792 <right_degrees>
				pick('L');
    1624:	8c e4       	ldi	r24, 0x4C	; 76
    1626:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
				right_degrees(45);
    162a:	8d e2       	ldi	r24, 0x2D	; 45
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	0e 94 c9 03 	call	0x792	; 0x792 <right_degrees>
				current_direction='W';
    1632:	87 e5       	ldi	r24, 0x57	; 87
    1634:	80 93 09 02 	sts	0x0209, r24
				pick_up_direction='L';
    1638:	8c e4       	ldi	r24, 0x4C	; 76
    163a:	80 93 00 02 	sts	0x0200, r24
    163e:	ca c0       	rjmp	.+404    	; 0x17d4 <pick_up+0x390>
			}
			
		}
	}
	else if(current_coordinate[1]==1)
    1640:	21 30       	cpi	r18, 0x01	; 1
    1642:	31 05       	cpc	r19, r1
    1644:	81 f5       	brne	.+96     	; 0x16a6 <pick_up+0x262>
	{
		if(current_direction=='N')
    1646:	20 91 09 02 	lds	r18, 0x0209
    164a:	2e 34       	cpi	r18, 0x4E	; 78
    164c:	39 f4       	brne	.+14     	; 0x165c <pick_up+0x218>
		{
			pick('L');
    164e:	8c e4       	ldi	r24, 0x4C	; 76
    1650:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
			pick_up_direction='L';
    1654:	8c e4       	ldi	r24, 0x4C	; 76
    1656:	80 93 00 02 	sts	0x0200, r24
    165a:	bc c0       	rjmp	.+376    	; 0x17d4 <pick_up+0x390>
		}
		else if(current_direction=='S')
    165c:	23 35       	cpi	r18, 0x53	; 83
    165e:	39 f4       	brne	.+14     	; 0x166e <pick_up+0x22a>
		{
			pick('R');
    1660:	82 e5       	ldi	r24, 0x52	; 82
    1662:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
			pick_up_direction='R';
    1666:	82 e5       	ldi	r24, 0x52	; 82
    1668:	80 93 00 02 	sts	0x0200, r24
    166c:	b3 c0       	rjmp	.+358    	; 0x17d4 <pick_up+0x390>
		}
		else if(current_direction=='W')
    166e:	27 35       	cpi	r18, 0x57	; 87
    1670:	09 f0       	breq	.+2      	; 0x1674 <pick_up+0x230>
    1672:	b0 c0       	rjmp	.+352    	; 0x17d4 <pick_up+0x390>
		{
			if(nearest_point[0]>current_coordinate[0])
    1674:	28 81       	ld	r18, Y
    1676:	39 81       	ldd	r19, Y+1	; 0x01
    1678:	82 17       	cp	r24, r18
    167a:	93 07       	cpc	r25, r19
    167c:	54 f4       	brge	.+20     	; 0x1692 <pick_up+0x24e>
				{
				change_direction('N');
    167e:	8e e4       	ldi	r24, 0x4E	; 78
    1680:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
				pick('L');
    1684:	8c e4       	ldi	r24, 0x4C	; 76
    1686:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
				pick_up_direction='L';
    168a:	8c e4       	ldi	r24, 0x4C	; 76
    168c:	80 93 00 02 	sts	0x0200, r24
    1690:	a1 c0       	rjmp	.+322    	; 0x17d4 <pick_up+0x390>
				}
			else
				{
				change_direction('S');
    1692:	83 e5       	ldi	r24, 0x53	; 83
    1694:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
				pick('R');
    1698:	82 e5       	ldi	r24, 0x52	; 82
    169a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
				pick_up_direction='R';
    169e:	82 e5       	ldi	r24, 0x52	; 82
    16a0:	80 93 00 02 	sts	0x0200, r24
    16a4:	97 c0       	rjmp	.+302    	; 0x17d4 <pick_up+0x390>
				}
				
		}
	}
	else if(current_coordinate[0]==1)
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	91 05       	cpc	r25, r1
    16aa:	81 f5       	brne	.+96     	; 0x170c <pick_up+0x2c8>
	{
		if(current_direction=='W')
    16ac:	80 91 09 02 	lds	r24, 0x0209
    16b0:	87 35       	cpi	r24, 0x57	; 87
    16b2:	39 f4       	brne	.+14     	; 0x16c2 <pick_up+0x27e>
		{
			pick('L');
    16b4:	8c e4       	ldi	r24, 0x4C	; 76
    16b6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
			pick_up_direction='L';
    16ba:	8c e4       	ldi	r24, 0x4C	; 76
    16bc:	80 93 00 02 	sts	0x0200, r24
    16c0:	89 c0       	rjmp	.+274    	; 0x17d4 <pick_up+0x390>
		}
		else if(current_direction=='E')
    16c2:	85 34       	cpi	r24, 0x45	; 69
    16c4:	39 f4       	brne	.+14     	; 0x16d4 <pick_up+0x290>
		{
			pick('R');
    16c6:	82 e5       	ldi	r24, 0x52	; 82
    16c8:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
			pick_up_direction='R';
    16cc:	82 e5       	ldi	r24, 0x52	; 82
    16ce:	80 93 00 02 	sts	0x0200, r24
    16d2:	80 c0       	rjmp	.+256    	; 0x17d4 <pick_up+0x390>
		}
		else if(current_direction=='S')
    16d4:	83 35       	cpi	r24, 0x53	; 83
    16d6:	09 f0       	breq	.+2      	; 0x16da <pick_up+0x296>
    16d8:	7d c0       	rjmp	.+250    	; 0x17d4 <pick_up+0x390>
		{
			//right or left according to habitat
			if(current_coordinate[1]<nearest_point[1])
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	9b 81       	ldd	r25, Y+3	; 0x03
    16de:	28 17       	cp	r18, r24
    16e0:	39 07       	cpc	r19, r25
    16e2:	54 f4       	brge	.+20     	; 0x16f8 <pick_up+0x2b4>
			{
				change_direction('E');
    16e4:	85 e4       	ldi	r24, 0x45	; 69
    16e6:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
				pick('R');
    16ea:	82 e5       	ldi	r24, 0x52	; 82
    16ec:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
				pick_up_direction='R';
    16f0:	82 e5       	ldi	r24, 0x52	; 82
    16f2:	80 93 00 02 	sts	0x0200, r24
    16f6:	6e c0       	rjmp	.+220    	; 0x17d4 <pick_up+0x390>
			}
			else
			{
				change_direction('W');
    16f8:	87 e5       	ldi	r24, 0x57	; 87
    16fa:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
				pick('L');
    16fe:	8c e4       	ldi	r24, 0x4C	; 76
    1700:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
				pick_up_direction='L';
    1704:	8c e4       	ldi	r24, 0x4C	; 76
    1706:	80 93 00 02 	sts	0x0200, r24
    170a:	64 c0       	rjmp	.+200    	; 0x17d4 <pick_up+0x390>
			}				
		}
	}
	else if(current_coordinate[1]==6)
    170c:	26 30       	cpi	r18, 0x06	; 6
    170e:	31 05       	cpc	r19, r1
    1710:	81 f5       	brne	.+96     	; 0x1772 <pick_up+0x32e>
	{
		if(current_direction=='S')
    1712:	20 91 09 02 	lds	r18, 0x0209
    1716:	23 35       	cpi	r18, 0x53	; 83
    1718:	39 f4       	brne	.+14     	; 0x1728 <pick_up+0x2e4>
		{
			pick('L');
    171a:	8c e4       	ldi	r24, 0x4C	; 76
    171c:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
			pick_up_direction='L';
    1720:	8c e4       	ldi	r24, 0x4C	; 76
    1722:	80 93 00 02 	sts	0x0200, r24
    1726:	56 c0       	rjmp	.+172    	; 0x17d4 <pick_up+0x390>
		}
		else if(current_direction=='N')
    1728:	2e 34       	cpi	r18, 0x4E	; 78
    172a:	39 f4       	brne	.+14     	; 0x173a <pick_up+0x2f6>
		{
			pick('R');
    172c:	82 e5       	ldi	r24, 0x52	; 82
    172e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
			pick_up_direction='R';
    1732:	82 e5       	ldi	r24, 0x52	; 82
    1734:	80 93 00 02 	sts	0x0200, r24
    1738:	4d c0       	rjmp	.+154    	; 0x17d4 <pick_up+0x390>
		}
		else if(current_direction=='E')
    173a:	25 34       	cpi	r18, 0x45	; 69
    173c:	09 f0       	breq	.+2      	; 0x1740 <pick_up+0x2fc>
    173e:	4a c0       	rjmp	.+148    	; 0x17d4 <pick_up+0x390>
		{
			
			if(nearest_point[0]>current_coordinate[0])
    1740:	28 81       	ld	r18, Y
    1742:	39 81       	ldd	r19, Y+1	; 0x01
    1744:	82 17       	cp	r24, r18
    1746:	93 07       	cpc	r25, r19
    1748:	54 f4       	brge	.+20     	; 0x175e <pick_up+0x31a>
				{
					change_direction('N');
    174a:	8e e4       	ldi	r24, 0x4E	; 78
    174c:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
					pick('R');
    1750:	82 e5       	ldi	r24, 0x52	; 82
    1752:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
					pick_up_direction='R';
    1756:	82 e5       	ldi	r24, 0x52	; 82
    1758:	80 93 00 02 	sts	0x0200, r24
    175c:	3b c0       	rjmp	.+118    	; 0x17d4 <pick_up+0x390>
				}
			else
				{
					change_direction('S');
    175e:	83 e5       	ldi	r24, 0x53	; 83
    1760:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
					pick('L');
    1764:	8c e4       	ldi	r24, 0x4C	; 76
    1766:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
					pick_up_direction='L';
    176a:	8c e4       	ldi	r24, 0x4C	; 76
    176c:	80 93 00 02 	sts	0x0200, r24
    1770:	31 c0       	rjmp	.+98     	; 0x17d4 <pick_up+0x390>
				}					
		}
	}	
	else if(current_coordinate[0]==6)
    1772:	86 30       	cpi	r24, 0x06	; 6
    1774:	91 05       	cpc	r25, r1
    1776:	71 f5       	brne	.+92     	; 0x17d4 <pick_up+0x390>
	{
		if(current_direction=='E')
    1778:	80 91 09 02 	lds	r24, 0x0209
    177c:	85 34       	cpi	r24, 0x45	; 69
    177e:	39 f4       	brne	.+14     	; 0x178e <pick_up+0x34a>
		{
			pick('L');
    1780:	8c e4       	ldi	r24, 0x4C	; 76
    1782:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
			pick_up_direction='L';
    1786:	8c e4       	ldi	r24, 0x4C	; 76
    1788:	80 93 00 02 	sts	0x0200, r24
    178c:	23 c0       	rjmp	.+70     	; 0x17d4 <pick_up+0x390>
		}
		else if(current_direction=='W')
    178e:	87 35       	cpi	r24, 0x57	; 87
    1790:	39 f4       	brne	.+14     	; 0x17a0 <pick_up+0x35c>
		{
			pick('R');
    1792:	82 e5       	ldi	r24, 0x52	; 82
    1794:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
			pick_up_direction='R';
    1798:	82 e5       	ldi	r24, 0x52	; 82
    179a:	80 93 00 02 	sts	0x0200, r24
    179e:	1a c0       	rjmp	.+52     	; 0x17d4 <pick_up+0x390>
		}
		else if(current_direction=='N')
    17a0:	8e 34       	cpi	r24, 0x4E	; 78
    17a2:	c1 f4       	brne	.+48     	; 0x17d4 <pick_up+0x390>
		{
			if(current_coordinate[1]<nearest_point[1])
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	9b 81       	ldd	r25, Y+3	; 0x03
    17a8:	28 17       	cp	r18, r24
    17aa:	39 07       	cpc	r19, r25
    17ac:	54 f4       	brge	.+20     	; 0x17c2 <pick_up+0x37e>
				{
					change_direction('E');
    17ae:	85 e4       	ldi	r24, 0x45	; 69
    17b0:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
					pick('L');
    17b4:	8c e4       	ldi	r24, 0x4C	; 76
    17b6:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
					pick_up_direction='L';
    17ba:	8c e4       	ldi	r24, 0x4C	; 76
    17bc:	80 93 00 02 	sts	0x0200, r24
    17c0:	09 c0       	rjmp	.+18     	; 0x17d4 <pick_up+0x390>
				}
			else
				{
					change_direction('W');
    17c2:	87 e5       	ldi	r24, 0x57	; 87
    17c4:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
					pick('R');
    17c8:	82 e5       	ldi	r24, 0x52	; 82
    17ca:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
					pick_up_direction='R';
    17ce:	82 e5       	ldi	r24, 0x52	; 82
    17d0:	80 93 00 02 	sts	0x0200, r24
				}
		}
	}
}
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	08 95       	ret

000017da <droping>:
 * Output:			none
 * Logic:			go to the habitat location according to the conditions and drops the animal 
 * Example Call:	dropping()
 */
void droping()
{
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
int index,cell_no,flag=0;

cell_no=atoi((char*)habitat_pos[current_index])-1;
    17e2:	80 91 03 02 	lds	r24, 0x0203
    17e6:	90 91 04 02 	lds	r25, 0x0204
    17ea:	9c 01       	movw	r18, r24
    17ec:	22 0f       	add	r18, r18
    17ee:	33 1f       	adc	r19, r19
    17f0:	82 0f       	add	r24, r18
    17f2:	93 1f       	adc	r25, r19
    17f4:	8e 55       	subi	r24, 0x5E	; 94
    17f6:	9c 4f       	sbci	r25, 0xFC	; 252
    17f8:	0e 94 56 12 	call	0x24ac	; 0x24ac <atoi>
    17fc:	ec 01       	movw	r28, r24
    17fe:	21 97       	sbiw	r28, 0x01	; 1
index=get_mapping_index(current_coordinate);
    1800:	85 e0       	ldi	r24, 0x05	; 5
    1802:	92 e0       	ldi	r25, 0x02	; 2
    1804:	0e 94 c5 04 	call	0x98a	; 0x98a <get_mapping_index>
    1808:	8c 01       	movw	r16, r24
//*********************************start************************************
// the bellow set of conditions are for changing the direction of the bot so as to drop the animal from the same side as it was picked
if(current_direction=='N')
    180a:	80 91 09 02 	lds	r24, 0x0209
    180e:	8e 34       	cpi	r24, 0x4E	; 78
    1810:	c9 f4       	brne	.+50     	; 0x1844 <droping+0x6a>
{
	if(index==0 && pick_up_direction=='L')
    1812:	01 15       	cp	r16, r1
    1814:	11 05       	cpc	r17, r1
    1816:	49 f4       	brne	.+18     	; 0x182a <droping+0x50>
    1818:	80 91 00 02 	lds	r24, 0x0200
    181c:	8c 34       	cpi	r24, 0x4C	; 76
    181e:	09 f0       	breq	.+2      	; 0x1822 <droping+0x48>
    1820:	5d c0       	rjmp	.+186    	; 0x18dc <droping+0x102>
		change_direction('E');
    1822:	85 e4       	ldi	r24, 0x45	; 69
    1824:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
    1828:	d3 c0       	rjmp	.+422    	; 0x19d0 <droping+0x1f6>
	else if(index==1 && pick_up_direction=='R')
    182a:	01 30       	cpi	r16, 0x01	; 1
    182c:	11 05       	cpc	r17, r1
    182e:	09 f0       	breq	.+2      	; 0x1832 <droping+0x58>
    1830:	55 c0       	rjmp	.+170    	; 0x18dc <droping+0x102>
    1832:	80 91 00 02 	lds	r24, 0x0200
    1836:	82 35       	cpi	r24, 0x52	; 82
    1838:	09 f0       	breq	.+2      	; 0x183c <droping+0x62>
    183a:	df c0       	rjmp	.+446    	; 0x19fa <droping+0x220>
		change_direction('W');
    183c:	87 e5       	ldi	r24, 0x57	; 87
    183e:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
    1842:	b1 c0       	rjmp	.+354    	; 0x19a6 <droping+0x1cc>
}
else if(current_direction=='S')
    1844:	83 35       	cpi	r24, 0x53	; 83
    1846:	c1 f4       	brne	.+48     	; 0x1878 <droping+0x9e>
{
	if(index==2 && pick_up_direction=='L')
    1848:	02 30       	cpi	r16, 0x02	; 2
    184a:	11 05       	cpc	r17, r1
    184c:	49 f4       	brne	.+18     	; 0x1860 <droping+0x86>
    184e:	80 91 00 02 	lds	r24, 0x0200
    1852:	8c 34       	cpi	r24, 0x4C	; 76
    1854:	09 f0       	breq	.+2      	; 0x1858 <droping+0x7e>
    1856:	42 c0       	rjmp	.+132    	; 0x18dc <droping+0x102>
		change_direction('W');
    1858:	87 e5       	ldi	r24, 0x57	; 87
    185a:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
    185e:	a3 c0       	rjmp	.+326    	; 0x19a6 <droping+0x1cc>
	else if(index==3 && pick_up_direction=='R')
    1860:	03 30       	cpi	r16, 0x03	; 3
    1862:	11 05       	cpc	r17, r1
    1864:	d9 f5       	brne	.+118    	; 0x18dc <droping+0x102>
    1866:	80 91 00 02 	lds	r24, 0x0200
    186a:	82 35       	cpi	r24, 0x52	; 82
    186c:	09 f0       	breq	.+2      	; 0x1870 <droping+0x96>
    186e:	c5 c0       	rjmp	.+394    	; 0x19fa <droping+0x220>
		change_direction('E');
    1870:	85 e4       	ldi	r24, 0x45	; 69
    1872:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
    1876:	97 c0       	rjmp	.+302    	; 0x19a6 <droping+0x1cc>
}
else if(current_direction=='W')
    1878:	87 35       	cpi	r24, 0x57	; 87
    187a:	b9 f4       	brne	.+46     	; 0x18aa <droping+0xd0>
{
	if(index==1 && pick_up_direction=='L')
    187c:	01 30       	cpi	r16, 0x01	; 1
    187e:	11 05       	cpc	r17, r1
    1880:	41 f4       	brne	.+16     	; 0x1892 <droping+0xb8>
    1882:	80 91 00 02 	lds	r24, 0x0200
    1886:	8c 34       	cpi	r24, 0x4C	; 76
    1888:	49 f5       	brne	.+82     	; 0x18dc <droping+0x102>
		change_direction('N');
    188a:	8e e4       	ldi	r24, 0x4E	; 78
    188c:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
    1890:	8a c0       	rjmp	.+276    	; 0x19a6 <droping+0x1cc>
	else if(index==2 && pick_up_direction=='R')
    1892:	02 30       	cpi	r16, 0x02	; 2
    1894:	11 05       	cpc	r17, r1
    1896:	11 f5       	brne	.+68     	; 0x18dc <droping+0x102>
    1898:	80 91 00 02 	lds	r24, 0x0200
    189c:	82 35       	cpi	r24, 0x52	; 82
    189e:	09 f0       	breq	.+2      	; 0x18a2 <droping+0xc8>
    18a0:	ac c0       	rjmp	.+344    	; 0x19fa <droping+0x220>
		change_direction('S');
    18a2:	83 e5       	ldi	r24, 0x53	; 83
    18a4:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
    18a8:	7e c0       	rjmp	.+252    	; 0x19a6 <droping+0x1cc>
}
else if(current_direction=='E')
    18aa:	85 34       	cpi	r24, 0x45	; 69
    18ac:	b9 f4       	brne	.+46     	; 0x18dc <droping+0x102>
{
	if(index==0 && pick_up_direction=='R')
    18ae:	01 15       	cp	r16, r1
    18b0:	11 05       	cpc	r17, r1
    18b2:	41 f4       	brne	.+16     	; 0x18c4 <droping+0xea>
    18b4:	80 91 00 02 	lds	r24, 0x0200
    18b8:	82 35       	cpi	r24, 0x52	; 82
    18ba:	81 f4       	brne	.+32     	; 0x18dc <droping+0x102>
		change_direction('N');
    18bc:	8e e4       	ldi	r24, 0x4E	; 78
    18be:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
    18c2:	86 c0       	rjmp	.+268    	; 0x19d0 <droping+0x1f6>
	else if(index==3 && pick_up_direction=='L')
    18c4:	03 30       	cpi	r16, 0x03	; 3
    18c6:	11 05       	cpc	r17, r1
    18c8:	49 f4       	brne	.+18     	; 0x18dc <droping+0x102>
    18ca:	80 91 00 02 	lds	r24, 0x0200
    18ce:	8c 34       	cpi	r24, 0x4C	; 76
    18d0:	09 f0       	breq	.+2      	; 0x18d4 <droping+0xfa>
    18d2:	93 c0       	rjmp	.+294    	; 0x19fa <droping+0x220>
		change_direction('S');
    18d4:	83 e5       	ldi	r24, 0x53	; 83
    18d6:	0e 94 a2 07 	call	0xf44	; 0xf44 <change_direction>
    18da:	65 c0       	rjmp	.+202    	; 0x19a6 <droping+0x1cc>
}
//**********************************end***********************************
if(visited[cell_no]!=0)//to check if the cell is visited or not
    18dc:	fe 01       	movw	r30, r28
    18de:	ee 0f       	add	r30, r30
    18e0:	ff 1f       	adc	r31, r31
    18e2:	e6 5e       	subi	r30, 0xE6	; 230
    18e4:	fb 4f       	sbci	r31, 0xFB	; 251
 * Logic:			go to the habitat location according to the conditions and drops the animal 
 * Example Call:	dropping()
 */
void droping()
{
int index,cell_no,flag=0;
    18e6:	c1 e0       	ldi	r28, 0x01	; 1
    18e8:	d0 e0       	ldi	r29, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	91 81       	ldd	r25, Z+1	; 0x01
    18ee:	00 97       	sbiw	r24, 0x00	; 0
    18f0:	11 f4       	brne	.+4      	; 0x18f6 <droping+0x11c>
    18f2:	c0 e0       	ldi	r28, 0x00	; 0
    18f4:	d0 e0       	ldi	r29, 0x00	; 0
		change_direction('S');
}
//**********************************end***********************************
if(visited[cell_no]!=0)//to check if the cell is visited or not
	flag=1;
follow_black_line_mm(150,'F',1);// to go to the middle of the edge the habitat
    18f6:	86 e9       	ldi	r24, 0x96	; 150
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	66 e4       	ldi	r22, 0x46	; 70
    18fc:	41 e0       	ldi	r20, 0x01	; 1
    18fe:	50 e0       	ldi	r21, 0x00	; 0
    1900:	0e 94 24 07 	call	0xe48	; 0xe48 <follow_black_line_mm>
//*******************************start**************************************
//the bellow set of conditions are for finding which side to drop the animal and drop the animal
if(index==0)
    1904:	01 15       	cp	r16, r1
    1906:	11 05       	cpc	r17, r1
    1908:	89 f4       	brne	.+34     	; 0x192c <droping+0x152>
{
	if(current_direction=='N')
    190a:	80 91 09 02 	lds	r24, 0x0209
    190e:	8e 34       	cpi	r24, 0x4E	; 78
    1910:	29 f4       	brne	.+10     	; 0x191c <droping+0x142>
	{
		drop('R',flag);
    1912:	82 e5       	ldi	r24, 0x52	; 82
    1914:	be 01       	movw	r22, r28
    1916:	0e 94 40 05 	call	0xa80	; 0xa80 <drop>
    191a:	84 c0       	rjmp	.+264    	; 0x1a24 <droping+0x24a>
	}
	else if(current_direction=='E')
    191c:	85 34       	cpi	r24, 0x45	; 69
    191e:	09 f0       	breq	.+2      	; 0x1922 <droping+0x148>
    1920:	81 c0       	rjmp	.+258    	; 0x1a24 <droping+0x24a>
	{
		drop('L',flag);
    1922:	8c e4       	ldi	r24, 0x4C	; 76
    1924:	be 01       	movw	r22, r28
    1926:	0e 94 40 05 	call	0xa80	; 0xa80 <drop>
    192a:	7c c0       	rjmp	.+248    	; 0x1a24 <droping+0x24a>
	}
}
else if(index==1)
    192c:	01 30       	cpi	r16, 0x01	; 1
    192e:	11 05       	cpc	r17, r1
    1930:	89 f4       	brne	.+34     	; 0x1954 <droping+0x17a>
{
	if(current_direction=='W')
    1932:	80 91 09 02 	lds	r24, 0x0209
    1936:	87 35       	cpi	r24, 0x57	; 87
    1938:	29 f4       	brne	.+10     	; 0x1944 <droping+0x16a>
	{
		drop('R',flag);
    193a:	82 e5       	ldi	r24, 0x52	; 82
    193c:	be 01       	movw	r22, r28
    193e:	0e 94 40 05 	call	0xa80	; 0xa80 <drop>
    1942:	70 c0       	rjmp	.+224    	; 0x1a24 <droping+0x24a>
	}
	else if(current_direction=='N')
    1944:	8e 34       	cpi	r24, 0x4E	; 78
    1946:	09 f0       	breq	.+2      	; 0x194a <droping+0x170>
    1948:	6d c0       	rjmp	.+218    	; 0x1a24 <droping+0x24a>
	{
		drop('L',flag);
    194a:	8c e4       	ldi	r24, 0x4C	; 76
    194c:	be 01       	movw	r22, r28
    194e:	0e 94 40 05 	call	0xa80	; 0xa80 <drop>
    1952:	68 c0       	rjmp	.+208    	; 0x1a24 <droping+0x24a>
	}
}
else if(index==2)
    1954:	02 30       	cpi	r16, 0x02	; 2
    1956:	11 05       	cpc	r17, r1
    1958:	89 f4       	brne	.+34     	; 0x197c <droping+0x1a2>
{
	if(current_direction=='S')
    195a:	80 91 09 02 	lds	r24, 0x0209
    195e:	83 35       	cpi	r24, 0x53	; 83
    1960:	29 f4       	brne	.+10     	; 0x196c <droping+0x192>
	{
		drop('R',flag);
    1962:	82 e5       	ldi	r24, 0x52	; 82
    1964:	be 01       	movw	r22, r28
    1966:	0e 94 40 05 	call	0xa80	; 0xa80 <drop>
    196a:	5c c0       	rjmp	.+184    	; 0x1a24 <droping+0x24a>
	}
	else if(current_direction=='W')
    196c:	87 35       	cpi	r24, 0x57	; 87
    196e:	09 f0       	breq	.+2      	; 0x1972 <droping+0x198>
    1970:	59 c0       	rjmp	.+178    	; 0x1a24 <droping+0x24a>
	{
		drop('L',flag);
    1972:	8c e4       	ldi	r24, 0x4C	; 76
    1974:	be 01       	movw	r22, r28
    1976:	0e 94 40 05 	call	0xa80	; 0xa80 <drop>
    197a:	54 c0       	rjmp	.+168    	; 0x1a24 <droping+0x24a>
	}
}
else if(index==3)
    197c:	03 30       	cpi	r16, 0x03	; 3
    197e:	11 05       	cpc	r17, r1
    1980:	09 f0       	breq	.+2      	; 0x1984 <droping+0x1aa>
    1982:	50 c0       	rjmp	.+160    	; 0x1a24 <droping+0x24a>
{
	if(current_direction=='E')
    1984:	80 91 09 02 	lds	r24, 0x0209
    1988:	85 34       	cpi	r24, 0x45	; 69
    198a:	29 f4       	brne	.+10     	; 0x1996 <droping+0x1bc>
	{
		drop('R',flag);
    198c:	82 e5       	ldi	r24, 0x52	; 82
    198e:	be 01       	movw	r22, r28
    1990:	0e 94 40 05 	call	0xa80	; 0xa80 <drop>
    1994:	47 c0       	rjmp	.+142    	; 0x1a24 <droping+0x24a>
	}
	else if(current_direction=='S')
    1996:	83 35       	cpi	r24, 0x53	; 83
    1998:	09 f0       	breq	.+2      	; 0x199c <droping+0x1c2>
    199a:	44 c0       	rjmp	.+136    	; 0x1a24 <droping+0x24a>
	{
		drop('L',flag);
    199c:	8c e4       	ldi	r24, 0x4C	; 76
    199e:	be 01       	movw	r22, r28
    19a0:	0e 94 40 05 	call	0xa80	; 0xa80 <drop>
    19a4:	3f c0       	rjmp	.+126    	; 0x1a24 <droping+0x24a>
		change_direction('N');
	else if(index==3 && pick_up_direction=='L')
		change_direction('S');
}
//**********************************end***********************************
if(visited[cell_no]!=0)//to check if the cell is visited or not
    19a6:	fe 01       	movw	r30, r28
    19a8:	ee 0f       	add	r30, r30
    19aa:	ff 1f       	adc	r31, r31
    19ac:	e6 5e       	subi	r30, 0xE6	; 230
    19ae:	fb 4f       	sbci	r31, 0xFB	; 251
 * Logic:			go to the habitat location according to the conditions and drops the animal 
 * Example Call:	dropping()
 */
void droping()
{
int index,cell_no,flag=0;
    19b0:	c1 e0       	ldi	r28, 0x01	; 1
    19b2:	d0 e0       	ldi	r29, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	91 81       	ldd	r25, Z+1	; 0x01
    19b8:	00 97       	sbiw	r24, 0x00	; 0
    19ba:	11 f4       	brne	.+4      	; 0x19c0 <droping+0x1e6>
    19bc:	c0 e0       	ldi	r28, 0x00	; 0
    19be:	d0 e0       	ldi	r29, 0x00	; 0
		change_direction('S');
}
//**********************************end***********************************
if(visited[cell_no]!=0)//to check if the cell is visited or not
	flag=1;
follow_black_line_mm(150,'F',1);// to go to the middle of the edge the habitat
    19c0:	86 e9       	ldi	r24, 0x96	; 150
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	66 e4       	ldi	r22, 0x46	; 70
    19c6:	41 e0       	ldi	r20, 0x01	; 1
    19c8:	50 e0       	ldi	r21, 0x00	; 0
    19ca:	0e 94 24 07 	call	0xe48	; 0xe48 <follow_black_line_mm>
    19ce:	ae cf       	rjmp	.-164    	; 0x192c <droping+0x152>
		change_direction('N');
	else if(index==3 && pick_up_direction=='L')
		change_direction('S');
}
//**********************************end***********************************
if(visited[cell_no]!=0)//to check if the cell is visited or not
    19d0:	fe 01       	movw	r30, r28
    19d2:	ee 0f       	add	r30, r30
    19d4:	ff 1f       	adc	r31, r31
    19d6:	e6 5e       	subi	r30, 0xE6	; 230
    19d8:	fb 4f       	sbci	r31, 0xFB	; 251
 * Logic:			go to the habitat location according to the conditions and drops the animal 
 * Example Call:	dropping()
 */
void droping()
{
int index,cell_no,flag=0;
    19da:	c1 e0       	ldi	r28, 0x01	; 1
    19dc:	d0 e0       	ldi	r29, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	91 81       	ldd	r25, Z+1	; 0x01
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	11 f4       	brne	.+4      	; 0x19ea <droping+0x210>
    19e6:	c0 e0       	ldi	r28, 0x00	; 0
    19e8:	d0 e0       	ldi	r29, 0x00	; 0
		change_direction('S');
}
//**********************************end***********************************
if(visited[cell_no]!=0)//to check if the cell is visited or not
	flag=1;
follow_black_line_mm(150,'F',1);// to go to the middle of the edge the habitat
    19ea:	86 e9       	ldi	r24, 0x96	; 150
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	66 e4       	ldi	r22, 0x46	; 70
    19f0:	41 e0       	ldi	r20, 0x01	; 1
    19f2:	50 e0       	ldi	r21, 0x00	; 0
    19f4:	0e 94 24 07 	call	0xe48	; 0xe48 <follow_black_line_mm>
    19f8:	88 cf       	rjmp	.-240    	; 0x190a <droping+0x130>
		change_direction('N');
	else if(index==3 && pick_up_direction=='L')
		change_direction('S');
}
//**********************************end***********************************
if(visited[cell_no]!=0)//to check if the cell is visited or not
    19fa:	fe 01       	movw	r30, r28
    19fc:	ee 0f       	add	r30, r30
    19fe:	ff 1f       	adc	r31, r31
    1a00:	e6 5e       	subi	r30, 0xE6	; 230
    1a02:	fb 4f       	sbci	r31, 0xFB	; 251
 * Logic:			go to the habitat location according to the conditions and drops the animal 
 * Example Call:	dropping()
 */
void droping()
{
int index,cell_no,flag=0;
    1a04:	c1 e0       	ldi	r28, 0x01	; 1
    1a06:	d0 e0       	ldi	r29, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	91 81       	ldd	r25, Z+1	; 0x01
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	11 f4       	brne	.+4      	; 0x1a14 <droping+0x23a>
    1a10:	c0 e0       	ldi	r28, 0x00	; 0
    1a12:	d0 e0       	ldi	r29, 0x00	; 0
		change_direction('S');
}
//**********************************end***********************************
if(visited[cell_no]!=0)//to check if the cell is visited or not
	flag=1;
follow_black_line_mm(150,'F',1);// to go to the middle of the edge the habitat
    1a14:	86 e9       	ldi	r24, 0x96	; 150
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	66 e4       	ldi	r22, 0x46	; 70
    1a1a:	41 e0       	ldi	r20, 0x01	; 1
    1a1c:	50 e0       	ldi	r21, 0x00	; 0
    1a1e:	0e 94 24 07 	call	0xe48	; 0xe48 <follow_black_line_mm>
    1a22:	84 cf       	rjmp	.-248    	; 0x192c <droping+0x152>
	{
		drop('L',flag);
	}
}
//*******************************end**************************************
}
    1a24:	df 91       	pop	r29
    1a26:	cf 91       	pop	r28
    1a28:	1f 91       	pop	r17
    1a2a:	0f 91       	pop	r16
    1a2c:	08 95       	ret

00001a2e <print_input>:
 * Example Call:	 print_input()
 * this function was used in progress task not used now
 */

void print_input()
{
    1a2e:	0f 93       	push	r16
    1a30:	1f 93       	push	r17
    1a32:	cf 93       	push	r28
    1a34:	df 93       	push	r29
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	c8 5c       	subi	r28, 0xC8	; 200
    1a3c:	d0 40       	sbci	r29, 0x00	; 0
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
	int i=0,j=0;
	char animals[100],habitats[100];
	while(input_str[i]!='\n')
    1a48:	20 91 4c 04 	lds	r18, 0x044C
    1a4c:	2a 30       	cpi	r18, 0x0A	; 10
    1a4e:	b1 f0       	breq	.+44     	; 0x1a7c <print_input+0x4e>
    1a50:	ad e4       	ldi	r26, 0x4D	; 77
    1a52:	b4 e0       	ldi	r27, 0x04	; 4
 * this function was used in progress task not used now
 */

void print_input()
{
	int i=0,j=0;
    1a54:	80 e0       	ldi	r24, 0x00	; 0
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	00 e0       	ldi	r16, 0x00	; 0
    1a5a:	10 e0       	ldi	r17, 0x00	; 0
	char animals[100],habitats[100];
	while(input_str[i]!='\n')
	{	if(input_str[i]!=' ')
    1a5c:	20 32       	cpi	r18, 0x20	; 32
    1a5e:	41 f0       	breq	.+16     	; 0x1a70 <print_input+0x42>
		{habitats[j]=input_str[i];j++;}
    1a60:	e5 e6       	ldi	r30, 0x65	; 101
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	ec 0f       	add	r30, r28
    1a66:	fd 1f       	adc	r31, r29
    1a68:	e8 0f       	add	r30, r24
    1a6a:	f9 1f       	adc	r31, r25
    1a6c:	20 83       	st	Z, r18
    1a6e:	01 96       	adiw	r24, 0x01	; 1
		i++;
    1a70:	0f 5f       	subi	r16, 0xFF	; 255
    1a72:	1f 4f       	sbci	r17, 0xFF	; 255

void print_input()
{
	int i=0,j=0;
	char animals[100],habitats[100];
	while(input_str[i]!='\n')
    1a74:	2d 91       	ld	r18, X+
    1a76:	2a 30       	cpi	r18, 0x0A	; 10
    1a78:	89 f7       	brne	.-30     	; 0x1a5c <print_input+0x2e>
    1a7a:	02 c0       	rjmp	.+4      	; 0x1a80 <print_input+0x52>
 * this function was used in progress task not used now
 */

void print_input()
{
	int i=0,j=0;
    1a7c:	00 e0       	ldi	r16, 0x00	; 0
    1a7e:	10 e0       	ldi	r17, 0x00	; 0
	while(input_str[i]!='\n')
	{	if(input_str[i]!=' ')
		{habitats[j]=input_str[i];j++;}
		i++;
	}
	lcd_cursor(1,1);
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	61 e0       	ldi	r22, 0x01	; 1
    1a84:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	lcd_string(habitats);
    1a88:	ce 01       	movw	r24, r28
    1a8a:	8b 59       	subi	r24, 0x9B	; 155
    1a8c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a8e:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
	i++;
	j=0;
	while(input_str[i]!='#')
    1a92:	f8 01       	movw	r30, r16
    1a94:	e4 5b       	subi	r30, 0xB4	; 180
    1a96:	fb 4f       	sbci	r31, 0xFB	; 251
    1a98:	21 81       	ldd	r18, Z+1	; 0x01
    1a9a:	23 32       	cpi	r18, 0x23	; 35
    1a9c:	91 f0       	breq	.+36     	; 0x1ac2 <print_input+0x94>
 * Logic:			print animal and habitat location in lcd
 * Example Call:	 print_input()
 * this function was used in progress task not used now
 */

void print_input()
    1a9e:	f8 01       	movw	r30, r16
    1aa0:	e2 5b       	subi	r30, 0xB2	; 178
    1aa2:	fb 4f       	sbci	r31, 0xFB	; 251
		i++;
	}
	lcd_cursor(1,1);
	lcd_string(habitats);
	i++;
	j=0;
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
	while(input_str[i]!='#')
	{	if(input_str[i]!=' ')
    1aa8:	20 32       	cpi	r18, 0x20	; 32
    1aaa:	41 f0       	breq	.+16     	; 0x1abc <print_input+0x8e>
		{
		animals[j]=input_str[i];
    1aac:	a1 e0       	ldi	r26, 0x01	; 1
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	ac 0f       	add	r26, r28
    1ab2:	bd 1f       	adc	r27, r29
    1ab4:	a8 0f       	add	r26, r24
    1ab6:	b9 1f       	adc	r27, r25
    1ab8:	2c 93       	st	X, r18
		j++;
    1aba:	01 96       	adiw	r24, 0x01	; 1
	}
	lcd_cursor(1,1);
	lcd_string(habitats);
	i++;
	j=0;
	while(input_str[i]!='#')
    1abc:	21 91       	ld	r18, Z+
    1abe:	23 32       	cpi	r18, 0x23	; 35
    1ac0:	99 f7       	brne	.-26     	; 0x1aa8 <print_input+0x7a>
		animals[j]=input_str[i];
		j++;
		}
		i++;
	}
	lcd_cursor(2,1);
    1ac2:	82 e0       	ldi	r24, 0x02	; 2
    1ac4:	61 e0       	ldi	r22, 0x01	; 1
    1ac6:	0e 94 4c 01 	call	0x298	; 0x298 <lcd_cursor>
	lcd_string(animals);
    1aca:	ce 01       	movw	r24, r28
    1acc:	01 96       	adiw	r24, 0x01	; 1
    1ace:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_string>
}
    1ad2:	c8 53       	subi	r28, 0x38	; 56
    1ad4:	df 4f       	sbci	r29, 0xFF	; 255
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	de bf       	out	0x3e, r29	; 62
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	cd bf       	out	0x3d, r28	; 61
    1ae0:	df 91       	pop	r29
    1ae2:	cf 91       	pop	r28
    1ae4:	1f 91       	pop	r17
    1ae6:	0f 91       	pop	r16
    1ae8:	08 95       	ret

00001aea <main>:
 *				    servos are free-ed with help of servo1_free() and sevo2_free().
 *					
 * Example Call:	Called automatically by the Operating System
 */
int main() 
{
    1aea:	4f 92       	push	r4
    1aec:	5f 92       	push	r5
    1aee:	6f 92       	push	r6
    1af0:	7f 92       	push	r7
    1af2:	8f 92       	push	r8
    1af4:	9f 92       	push	r9
    1af6:	af 92       	push	r10
    1af8:	bf 92       	push	r11
    1afa:	cf 92       	push	r12
    1afc:	df 92       	push	r13
    1afe:	ef 92       	push	r14
    1b00:	ff 92       	push	r15
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	00 d0       	rcall	.+0      	; 0x1b0c <main+0x22>
    1b0c:	0f 92       	push	r0
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
	init_devices();
    1b12:	0e 94 56 04 	call	0x8ac	; 0x8ac <init_devices>
	
	// make the robot busy until detecting boot switch i.e. interrupt is pressed
	while (1) 
	{
		if((PINE | 0x7F) == 0x7F) 
    1b16:	8c b1       	in	r24, 0x0c	; 12
    1b18:	8f 67       	ori	r24, 0x7F	; 127
    1b1a:	8f 37       	cpi	r24, 0x7F	; 127
    1b1c:	e1 f7       	brne	.-8      	; 0x1b16 <main+0x2c>
	//print_input();
	//**********************************start***********************************
	//the bellow set of loops are for extracting the locations from the serial input 
	char c;
	int i=0,j=0,k=0,p=0;
	while(input_str[i]!='\n')
    1b1e:	20 91 4c 04 	lds	r18, 0x044C
    1b22:	2a 30       	cpi	r18, 0x0A	; 10
    1b24:	99 f4       	brne	.+38     	; 0x1b4c <main+0x62>
    1b26:	a0 e0       	ldi	r26, 0x00	; 0
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
			habitat_pos[k][p]=c;
			p++;
		}
		i++;
	}
	i++;
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
	//print_input();
	//**********************************start***********************************
	//the bellow set of loops are for extracting the locations from the serial input 
	char c;
	int i=0,j=0,k=0,p=0;
	while(input_str[i]!='\n')
    1b2e:	60 e0       	ldi	r22, 0x00	; 0
    1b30:	70 e0       	ldi	r23, 0x00	; 0
    1b32:	ee 24       	eor	r14, r14
    1b34:	ff 24       	eor	r15, r15
	}
	i++;
	p=0;
	while(j<=k)
	{
		c=input_str[i];
    1b36:	0c e4       	ldi	r16, 0x4C	; 76
    1b38:	14 e0       	ldi	r17, 0x04	; 4
	
		if(c==','||c==' ')
		{
			i++;
			j++;
			p=0;
    1b3a:	aa 24       	eor	r10, r10
    1b3c:	bb 24       	eor	r11, r11
		}
		else
		{
			animal_pos[j][p]=c;
    1b3e:	0f 2e       	mov	r0, r31
    1b40:	fe ed       	ldi	r31, 0xDE	; 222
    1b42:	cf 2e       	mov	r12, r31
    1b44:	f3 e0       	ldi	r31, 0x03	; 3
    1b46:	df 2e       	mov	r13, r31
    1b48:	f0 2d       	mov	r31, r0
    1b4a:	31 c0       	rjmp	.+98     	; 0x1bae <main+0xc4>
	//print_input();
	//**********************************start***********************************
	//the bellow set of loops are for extracting the locations from the serial input 
	char c;
	int i=0,j=0,k=0,p=0;
	while(input_str[i]!='\n')
    1b4c:	60 e0       	ldi	r22, 0x00	; 0
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	a0 e0       	ldi	r26, 0x00	; 0
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	40 e0       	ldi	r20, 0x00	; 0
    1b56:	50 e0       	ldi	r21, 0x00	; 0
			k++;
			p=0;
		}
		else
		{
			habitat_pos[k][p]=c;
    1b58:	0f 2e       	mov	r0, r31
    1b5a:	f2 ea       	ldi	r31, 0xA2	; 162
    1b5c:	ef 2e       	mov	r14, r31
    1b5e:	f3 e0       	ldi	r31, 0x03	; 3
    1b60:	ff 2e       	mov	r15, r31
    1b62:	f0 2d       	mov	r31, r0
	{c=input_str[i];
		if(c==',')
		{
			i++;
			k++;
			p=0;
    1b64:	cc 24       	eor	r12, r12
    1b66:	dd 24       	eor	r13, r13
	//print_input();
	//**********************************start***********************************
	//the bellow set of loops are for extracting the locations from the serial input 
	char c;
	int i=0,j=0,k=0,p=0;
	while(input_str[i]!='\n')
    1b68:	0c e4       	ldi	r16, 0x4C	; 76
    1b6a:	14 e0       	ldi	r17, 0x04	; 4
	{c=input_str[i];
		if(c==',')
    1b6c:	2c 32       	cpi	r18, 0x2C	; 44
    1b6e:	29 f4       	brne	.+10     	; 0x1b7a <main+0x90>
		{
			i++;
    1b70:	4f 5f       	subi	r20, 0xFF	; 255
    1b72:	5f 4f       	sbci	r21, 0xFF	; 255
			k++;
    1b74:	11 96       	adiw	r26, 0x01	; 1
			p=0;
    1b76:	b6 01       	movw	r22, r12
    1b78:	0d c0       	rjmp	.+26     	; 0x1b94 <main+0xaa>
		}
		else
		{
			habitat_pos[k][p]=c;
    1b7a:	cd 01       	movw	r24, r26
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	8a 0f       	add	r24, r26
    1b82:	9b 1f       	adc	r25, r27
    1b84:	86 0f       	add	r24, r22
    1b86:	97 1f       	adc	r25, r23
    1b88:	8e 0d       	add	r24, r14
    1b8a:	9f 1d       	adc	r25, r15
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	20 83       	st	Z, r18
			p++;
    1b90:	6f 5f       	subi	r22, 0xFF	; 255
    1b92:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		i++;
    1b94:	4f 5f       	subi	r20, 0xFF	; 255
    1b96:	5f 4f       	sbci	r21, 0xFF	; 255
	//print_input();
	//**********************************start***********************************
	//the bellow set of loops are for extracting the locations from the serial input 
	char c;
	int i=0,j=0,k=0,p=0;
	while(input_str[i]!='\n')
    1b98:	f8 01       	movw	r30, r16
    1b9a:	e4 0f       	add	r30, r20
    1b9c:	f5 1f       	adc	r31, r21
    1b9e:	20 81       	ld	r18, Z
    1ba0:	2a 30       	cpi	r18, 0x0A	; 10
    1ba2:	21 f7       	brne	.-56     	; 0x1b6c <main+0x82>
		}
		i++;
	}
	i++;
	p=0;
	while(j<=k)
    1ba4:	bb 23       	and	r27, r27
    1ba6:	2c f1       	brlt	.+74     	; 0x1bf2 <main+0x108>
			habitat_pos[k][p]=c;
			p++;
		}
		i++;
	}
	i++;
    1ba8:	4f 5f       	subi	r20, 0xFF	; 255
    1baa:	5f 4f       	sbci	r21, 0xFF	; 255
    1bac:	c0 cf       	rjmp	.-128    	; 0x1b2e <main+0x44>
	p=0;
	while(j<=k)
	{
		c=input_str[i];
    1bae:	f8 01       	movw	r30, r16
    1bb0:	e4 0f       	add	r30, r20
    1bb2:	f5 1f       	adc	r31, r21
    1bb4:	20 81       	ld	r18, Z
	
		if(c==','||c==' ')
    1bb6:	2c 32       	cpi	r18, 0x2C	; 44
    1bb8:	11 f0       	breq	.+4      	; 0x1bbe <main+0xd4>
    1bba:	20 32       	cpi	r18, 0x20	; 32
    1bbc:	39 f4       	brne	.+14     	; 0x1bcc <main+0xe2>
		{
			i++;
    1bbe:	4f 5f       	subi	r20, 0xFF	; 255
    1bc0:	5f 4f       	sbci	r21, 0xFF	; 255
			j++;
    1bc2:	08 94       	sec
    1bc4:	e1 1c       	adc	r14, r1
    1bc6:	f1 1c       	adc	r15, r1
			p=0;
    1bc8:	b5 01       	movw	r22, r10
    1bca:	0d c0       	rjmp	.+26     	; 0x1be6 <main+0xfc>
		}
		else
		{
			animal_pos[j][p]=c;
    1bcc:	c7 01       	movw	r24, r14
    1bce:	88 0f       	add	r24, r24
    1bd0:	99 1f       	adc	r25, r25
    1bd2:	8e 0d       	add	r24, r14
    1bd4:	9f 1d       	adc	r25, r15
    1bd6:	86 0f       	add	r24, r22
    1bd8:	97 1f       	adc	r25, r23
    1bda:	8c 0d       	add	r24, r12
    1bdc:	9d 1d       	adc	r25, r13
    1bde:	fc 01       	movw	r30, r24
    1be0:	20 83       	st	Z, r18
			p++;
    1be2:	6f 5f       	subi	r22, 0xFF	; 255
    1be4:	7f 4f       	sbci	r23, 0xFF	; 255
		}
		i++;
    1be6:	4f 5f       	subi	r20, 0xFF	; 255
    1be8:	5f 4f       	sbci	r21, 0xFF	; 255
		}
		i++;
	}
	i++;
	p=0;
	while(j<=k)
    1bea:	ae 15       	cp	r26, r14
    1bec:	bf 05       	cpc	r27, r15
    1bee:	fc f6       	brge	.-66     	; 0x1bae <main+0xc4>
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <main+0x10c>
	}
	//print_input();
	//**********************************start***********************************
	//the bellow set of loops are for extracting the locations from the serial input 
	char c;
	int i=0,j=0,k=0,p=0;
    1bf2:	ee 24       	eor	r14, r14
    1bf4:	ff 24       	eor	r15, r15
		}
		i++;
	}
	//********************************end*************************************
	// set velocity
	current_velocity = 220; // 200 on full charge
    1bf6:	2c ed       	ldi	r18, 0xDC	; 220
    1bf8:	20 93 0a 02 	sts	0x020A, r18
		
	// synchronize wheels
	// suppose left wheel is physically 7.18% slower than the right wheel, so increase velocity of left wheel
	left_velocity_float = current_velocity + current_velocity * 0/100.0; // replace 0 with patch
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	ac e5       	ldi	r26, 0x5C	; 92
    1c02:	b3 e4       	ldi	r27, 0x43	; 67
    1c04:	80 93 c0 04 	sts	0x04C0, r24
    1c08:	90 93 c1 04 	sts	0x04C1, r25
    1c0c:	a0 93 c2 04 	sts	0x04C2, r26
    1c10:	b0 93 c3 04 	sts	0x04C3, r27
	right_velocity_float = current_velocity + current_velocity * 0/100.0; // replace 0 with patch
    1c14:	80 93 ca 04 	sts	0x04CA, r24
    1c18:	90 93 cb 04 	sts	0x04CB, r25
    1c1c:	a0 93 cc 04 	sts	0x04CC, r26
    1c20:	b0 93 cd 04 	sts	0x04CD, r27
	left_velocity = (unsigned char) left_velocity_float;
    1c24:	20 93 c9 04 	sts	0x04C9, r18
	right_velocity = (unsigned char) right_velocity_float;
    1c28:	20 93 cf 04 	sts	0x04CF, r18
	velocity(left_velocity, right_velocity);
    1c2c:	8c ed       	ldi	r24, 0xDC	; 220
    1c2e:	6c ed       	ldi	r22, 0xDC	; 220
    1c30:	0e 94 12 03 	call	0x624	; 0x624 <velocity>
		
	current_direction = 'N';
    1c34:	8e e4       	ldi	r24, 0x4E	; 78
    1c36:	80 93 09 02 	sts	0x0209, r24
	current_coordinate[0] = 1;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	90 93 06 02 	sts	0x0206, r25
    1c42:	80 93 05 02 	sts	0x0205, r24
	current_coordinate[1] = 1;
    1c46:	90 93 08 02 	sts	0x0208, r25
    1c4a:	80 93 07 02 	sts	0x0207, r24
	int a[2];
	current_index=0;
    1c4e:	10 92 04 02 	sts	0x0204, r1
    1c52:	10 92 03 02 	sts	0x0203, r1
	forward_mm(80);// this is to get the bots wheels on the horizontal line
    1c56:	80 e5       	ldi	r24, 0x50	; 80
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	0e 94 a8 03 	call	0x750	; 0x750 <forward_mm>
	//******************************start***************************************
	//the bellow set of statements are hard coding for picking animal from A1 and droping it in its habitat if A1 is the first to be picked
	if(animal_pos[current_index][1]-48==1 && animal_pos[current_index][0]-64==1)
    1c5e:	80 91 03 02 	lds	r24, 0x0203
    1c62:	90 91 04 02 	lds	r25, 0x0204
    1c66:	fc 01       	movw	r30, r24
    1c68:	ee 0f       	add	r30, r30
    1c6a:	ff 1f       	adc	r31, r31
    1c6c:	e8 0f       	add	r30, r24
    1c6e:	f9 1f       	adc	r31, r25
    1c70:	e2 52       	subi	r30, 0x22	; 34
    1c72:	fc 4f       	sbci	r31, 0xFC	; 252
    1c74:	21 81       	ldd	r18, Z+1	; 0x01
    1c76:	21 33       	cpi	r18, 0x31	; 49
    1c78:	09 f0       	breq	.+2      	; 0x1c7c <main+0x192>
    1c7a:	84 c0       	rjmp	.+264    	; 0x1d84 <main+0x29a>
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	ee 0f       	add	r30, r30
    1c80:	ff 1f       	adc	r31, r31
    1c82:	8e 0f       	add	r24, r30
    1c84:	9f 1f       	adc	r25, r31
    1c86:	fc 01       	movw	r30, r24
    1c88:	e2 52       	subi	r30, 0x22	; 34
    1c8a:	fc 4f       	sbci	r31, 0xFC	; 252
    1c8c:	80 81       	ld	r24, Z
    1c8e:	81 34       	cpi	r24, 0x41	; 65
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <main+0x1aa>
    1c92:	78 c0       	rjmp	.+240    	; 0x1d84 <main+0x29a>
	{
		left_degrees(45);
    1c94:	8d e2       	ldi	r24, 0x2D	; 45
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	0e 94 be 03 	call	0x77c	; 0x77c <left_degrees>
		pick('L');
    1c9c:	8c e4       	ldi	r24, 0x4C	; 76
    1c9e:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <pick>
		right_degrees(45);
    1ca2:	8d e2       	ldi	r24, 0x2D	; 45
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	0e 94 c9 03 	call	0x792	; 0x792 <right_degrees>
		if(atoi((char*)habitat_pos[current_index])!=1)
    1caa:	80 91 03 02 	lds	r24, 0x0203
    1cae:	90 91 04 02 	lds	r25, 0x0204
    1cb2:	9c 01       	movw	r18, r24
    1cb4:	22 0f       	add	r18, r18
    1cb6:	33 1f       	adc	r19, r19
    1cb8:	82 0f       	add	r24, r18
    1cba:	93 1f       	adc	r25, r19
    1cbc:	8e 55       	subi	r24, 0x5E	; 94
    1cbe:	9c 4f       	sbci	r25, 0xFC	; 252
    1cc0:	0e 94 56 12 	call	0x24ac	; 0x24ac <atoi>
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	11 f0       	breq	.+4      	; 0x1cce <main+0x1e4>
		go_to_cell_no (atoi((char*)habitat_pos[current_index]));
    1cca:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <go_to_cell_no>
		droping();
    1cce:	0e 94 ed 0b 	call	0x17da	; 0x17da <droping>
		if(current_index!=j-1)
    1cd2:	97 01       	movw	r18, r14
    1cd4:	21 50       	subi	r18, 0x01	; 1
    1cd6:	30 40       	sbci	r19, 0x00	; 0
    1cd8:	80 91 03 02 	lds	r24, 0x0203
    1cdc:	90 91 04 02 	lds	r25, 0x0204
    1ce0:	28 17       	cp	r18, r24
    1ce2:	39 07       	cpc	r19, r25
    1ce4:	99 f1       	breq	.+102    	; 0x1d4c <main+0x262>
		{
			move_one_cell(1);
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	0e 94 65 08 	call	0x10ca	; 0x10ca <move_one_cell>
			if(current_direction=='N')
    1cee:	80 91 09 02 	lds	r24, 0x0209
    1cf2:	8e 34       	cpi	r24, 0x4E	; 78
    1cf4:	51 f4       	brne	.+20     	; 0x1d0a <main+0x220>
				current_coordinate[0]++;
    1cf6:	80 91 05 02 	lds	r24, 0x0205
    1cfa:	90 91 06 02 	lds	r25, 0x0206
    1cfe:	01 96       	adiw	r24, 0x01	; 1
    1d00:	90 93 06 02 	sts	0x0206, r25
    1d04:	80 93 05 02 	sts	0x0205, r24
    1d08:	21 c0       	rjmp	.+66     	; 0x1d4c <main+0x262>
			else if(current_direction=='S')
    1d0a:	83 35       	cpi	r24, 0x53	; 83
    1d0c:	51 f4       	brne	.+20     	; 0x1d22 <main+0x238>
				current_coordinate[0]--;
    1d0e:	80 91 05 02 	lds	r24, 0x0205
    1d12:	90 91 06 02 	lds	r25, 0x0206
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	90 93 06 02 	sts	0x0206, r25
    1d1c:	80 93 05 02 	sts	0x0205, r24
    1d20:	15 c0       	rjmp	.+42     	; 0x1d4c <main+0x262>
			else if(current_direction=='W')
    1d22:	87 35       	cpi	r24, 0x57	; 87
    1d24:	51 f4       	brne	.+20     	; 0x1d3a <main+0x250>
				current_coordinate[1]--;
    1d26:	80 91 07 02 	lds	r24, 0x0207
    1d2a:	90 91 08 02 	lds	r25, 0x0208
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	90 93 08 02 	sts	0x0208, r25
    1d34:	80 93 07 02 	sts	0x0207, r24
    1d38:	09 c0       	rjmp	.+18     	; 0x1d4c <main+0x262>
			else
				current_coordinate[1]++;
    1d3a:	80 91 07 02 	lds	r24, 0x0207
    1d3e:	90 91 08 02 	lds	r25, 0x0208
    1d42:	01 96       	adiw	r24, 0x01	; 1
    1d44:	90 93 08 02 	sts	0x0208, r25
    1d48:	80 93 07 02 	sts	0x0207, r24
		}	
		visited[atoi((char*)habitat_pos[current_index])-1]=1;
    1d4c:	00 91 03 02 	lds	r16, 0x0203
    1d50:	10 91 04 02 	lds	r17, 0x0204
    1d54:	c8 01       	movw	r24, r16
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	80 0f       	add	r24, r16
    1d5c:	91 1f       	adc	r25, r17
    1d5e:	8e 55       	subi	r24, 0x5E	; 94
    1d60:	9c 4f       	sbci	r25, 0xFC	; 252
    1d62:	0e 94 56 12 	call	0x24ac	; 0x24ac <atoi>
    1d66:	fc 01       	movw	r30, r24
    1d68:	ee 0f       	add	r30, r30
    1d6a:	ff 1f       	adc	r31, r31
    1d6c:	e8 5e       	subi	r30, 0xE8	; 232
    1d6e:	fb 4f       	sbci	r31, 0xFB	; 251
    1d70:	81 e0       	ldi	r24, 0x01	; 1
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	91 83       	std	Z+1, r25	; 0x01
    1d76:	80 83       	st	Z, r24
		current_index++;
    1d78:	0f 5f       	subi	r16, 0xFF	; 255
    1d7a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7c:	10 93 04 02 	sts	0x0204, r17
    1d80:	00 93 03 02 	sts	0x0203, r16
	}
	//******************************end***************************************
	//*******************************start**************************************
	//the bellow while loop is main loop which traverse through the position arrays(habitat_pos & animal_pos) and pick and drop 
	//all the animals in their corresponding habitat using the above defined functions
	while(current_index<j){
    1d84:	80 91 03 02 	lds	r24, 0x0203
    1d88:	90 91 04 02 	lds	r25, 0x0204
    1d8c:	8e 15       	cp	r24, r14
    1d8e:	9f 05       	cpc	r25, r15
    1d90:	0c f0       	brlt	.+2      	; 0x1d94 <main+0x2aa>
    1d92:	9a c0       	rjmp	.+308    	; 0x1ec8 <main+0x3de>
		a[0]=animal_pos[current_index][1]-48;
    1d94:	0f 2e       	mov	r0, r31
    1d96:	fe ed       	ldi	r31, 0xDE	; 222
    1d98:	cf 2e       	mov	r12, r31
    1d9a:	f3 e0       	ldi	r31, 0x03	; 3
    1d9c:	df 2e       	mov	r13, r31
    1d9e:	f0 2d       	mov	r31, r0
		pick_up();
	
		go_to_cell_no (atoi((char*)habitat_pos[current_index]));
		
		droping();
		if(current_index!=j-1)
    1da0:	57 01       	movw	r10, r14
    1da2:	08 94       	sec
    1da4:	a1 08       	sbc	r10, r1
    1da6:	b1 08       	sbc	r11, r1
			else if(current_direction=='S')
				current_coordinate[0]--;
			else if(current_direction=='W')
				current_coordinate[1]--;
			else
				current_coordinate[1]++;
    1da8:	0f 2e       	mov	r0, r31
    1daa:	f7 e0       	ldi	r31, 0x07	; 7
    1dac:	6f 2e       	mov	r6, r31
    1dae:	f2 e0       	ldi	r31, 0x02	; 2
    1db0:	7f 2e       	mov	r7, r31
    1db2:	f0 2d       	mov	r31, r0
		{
			move_one_cell(1);
			if(current_direction=='N')
				current_coordinate[0]++;
			else if(current_direction=='S')
				current_coordinate[0]--;
    1db4:	0f 2e       	mov	r0, r31
    1db6:	f5 e0       	ldi	r31, 0x05	; 5
    1db8:	4f 2e       	mov	r4, r31
    1dba:	f2 e0       	ldi	r31, 0x02	; 2
    1dbc:	5f 2e       	mov	r5, r31
    1dbe:	f0 2d       	mov	r31, r0
			else if(current_direction=='W')
				current_coordinate[1]--;
			else
				current_coordinate[1]++;
		}	
		visited[atoi((char*)habitat_pos[current_index])-1]=1;
    1dc0:	0f 2e       	mov	r0, r31
    1dc2:	fa e1       	ldi	r31, 0x1A	; 26
    1dc4:	8f 2e       	mov	r8, r31
    1dc6:	f4 e0       	ldi	r31, 0x04	; 4
    1dc8:	9f 2e       	mov	r9, r31
    1dca:	f0 2d       	mov	r31, r0
	//******************************end***************************************
	//*******************************start**************************************
	//the bellow while loop is main loop which traverse through the position arrays(habitat_pos & animal_pos) and pick and drop 
	//all the animals in their corresponding habitat using the above defined functions
	while(current_index<j){
		a[0]=animal_pos[current_index][1]-48;
    1dcc:	9c 01       	movw	r18, r24
    1dce:	22 0f       	add	r18, r18
    1dd0:	33 1f       	adc	r19, r19
    1dd2:	82 0f       	add	r24, r18
    1dd4:	93 1f       	adc	r25, r19
    1dd6:	f6 01       	movw	r30, r12
    1dd8:	e8 0f       	add	r30, r24
    1dda:	f9 1f       	adc	r31, r25
    1ddc:	81 81       	ldd	r24, Z+1	; 0x01
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	c0 97       	sbiw	r24, 0x30	; 48
    1de2:	9a 83       	std	Y+2, r25	; 0x02
    1de4:	89 83       	std	Y+1, r24	; 0x01
		a[1]=animal_pos[current_index][0]-64;
    1de6:	80 81       	ld	r24, Z
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	80 54       	subi	r24, 0x40	; 64
    1dec:	90 40       	sbci	r25, 0x00	; 0
    1dee:	9c 83       	std	Y+4, r25	; 0x04
    1df0:	8b 83       	std	Y+3, r24	; 0x03
		go_to_coordinate (a);
    1df2:	ce 01       	movw	r24, r28
    1df4:	01 96       	adiw	r24, 0x01	; 1
    1df6:	0e 94 3f 09 	call	0x127e	; 0x127e <go_to_coordinate>
		
		pick_up();
    1dfa:	0e 94 22 0a 	call	0x1444	; 0x1444 <pick_up>
	
		go_to_cell_no (atoi((char*)habitat_pos[current_index]));
    1dfe:	80 91 03 02 	lds	r24, 0x0203
    1e02:	90 91 04 02 	lds	r25, 0x0204
    1e06:	9c 01       	movw	r18, r24
    1e08:	22 0f       	add	r18, r18
    1e0a:	33 1f       	adc	r19, r19
    1e0c:	82 0f       	add	r24, r18
    1e0e:	93 1f       	adc	r25, r19
    1e10:	8e 55       	subi	r24, 0x5E	; 94
    1e12:	9c 4f       	sbci	r25, 0xFC	; 252
    1e14:	0e 94 56 12 	call	0x24ac	; 0x24ac <atoi>
    1e18:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <go_to_cell_no>
		
		droping();
    1e1c:	0e 94 ed 0b 	call	0x17da	; 0x17da <droping>
		if(current_index!=j-1)
    1e20:	80 91 03 02 	lds	r24, 0x0203
    1e24:	90 91 04 02 	lds	r25, 0x0204
    1e28:	a8 16       	cp	r10, r24
    1e2a:	b9 06       	cpc	r11, r25
    1e2c:	59 f1       	breq	.+86     	; 0x1e84 <main+0x39a>
		{
			move_one_cell(1);
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	0e 94 65 08 	call	0x10ca	; 0x10ca <move_one_cell>
			if(current_direction=='N')
    1e36:	80 91 09 02 	lds	r24, 0x0209
    1e3a:	8e 34       	cpi	r24, 0x4E	; 78
    1e3c:	49 f4       	brne	.+18     	; 0x1e50 <main+0x366>
				current_coordinate[0]++;
    1e3e:	d2 01       	movw	r26, r4
    1e40:	8d 91       	ld	r24, X+
    1e42:	9c 91       	ld	r25, X
    1e44:	11 97       	sbiw	r26, 0x01	; 1
    1e46:	01 96       	adiw	r24, 0x01	; 1
    1e48:	11 96       	adiw	r26, 0x01	; 1
    1e4a:	9c 93       	st	X, r25
    1e4c:	8e 93       	st	-X, r24
    1e4e:	1a c0       	rjmp	.+52     	; 0x1e84 <main+0x39a>
			else if(current_direction=='S')
    1e50:	83 35       	cpi	r24, 0x53	; 83
    1e52:	39 f4       	brne	.+14     	; 0x1e62 <main+0x378>
				current_coordinate[0]--;
    1e54:	f2 01       	movw	r30, r4
    1e56:	80 81       	ld	r24, Z
    1e58:	91 81       	ldd	r25, Z+1	; 0x01
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	91 83       	std	Z+1, r25	; 0x01
    1e5e:	80 83       	st	Z, r24
    1e60:	11 c0       	rjmp	.+34     	; 0x1e84 <main+0x39a>
			else if(current_direction=='W')
    1e62:	87 35       	cpi	r24, 0x57	; 87
    1e64:	49 f4       	brne	.+18     	; 0x1e78 <main+0x38e>
				current_coordinate[1]--;
    1e66:	d3 01       	movw	r26, r6
    1e68:	8d 91       	ld	r24, X+
    1e6a:	9c 91       	ld	r25, X
    1e6c:	11 97       	sbiw	r26, 0x01	; 1
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	11 96       	adiw	r26, 0x01	; 1
    1e72:	9c 93       	st	X, r25
    1e74:	8e 93       	st	-X, r24
    1e76:	06 c0       	rjmp	.+12     	; 0x1e84 <main+0x39a>
			else
				current_coordinate[1]++;
    1e78:	f3 01       	movw	r30, r6
    1e7a:	80 81       	ld	r24, Z
    1e7c:	91 81       	ldd	r25, Z+1	; 0x01
    1e7e:	01 96       	adiw	r24, 0x01	; 1
    1e80:	91 83       	std	Z+1, r25	; 0x01
    1e82:	80 83       	st	Z, r24
		}	
		visited[atoi((char*)habitat_pos[current_index])-1]=1;
    1e84:	00 91 03 02 	lds	r16, 0x0203
    1e88:	10 91 04 02 	lds	r17, 0x0204
    1e8c:	c8 01       	movw	r24, r16
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	80 0f       	add	r24, r16
    1e94:	91 1f       	adc	r25, r17
    1e96:	8e 55       	subi	r24, 0x5E	; 94
    1e98:	9c 4f       	sbci	r25, 0xFC	; 252
    1e9a:	0e 94 56 12 	call	0x24ac	; 0x24ac <atoi>
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	88 0f       	add	r24, r24
    1ea2:	99 1f       	adc	r25, r25
    1ea4:	88 0d       	add	r24, r8
    1ea6:	99 1d       	adc	r25, r9
    1ea8:	21 e0       	ldi	r18, 0x01	; 1
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	dc 01       	movw	r26, r24
    1eae:	11 96       	adiw	r26, 0x01	; 1
    1eb0:	3c 93       	st	X, r19
    1eb2:	2e 93       	st	-X, r18
		current_index++;
    1eb4:	c8 01       	movw	r24, r16
    1eb6:	01 96       	adiw	r24, 0x01	; 1
    1eb8:	90 93 04 02 	sts	0x0204, r25
    1ebc:	80 93 03 02 	sts	0x0203, r24
	}
	//******************************end***************************************
	//*******************************start**************************************
	//the bellow while loop is main loop which traverse through the position arrays(habitat_pos & animal_pos) and pick and drop 
	//all the animals in their corresponding habitat using the above defined functions
	while(current_index<j){
    1ec0:	8e 15       	cp	r24, r14
    1ec2:	9f 05       	cpc	r25, r15
    1ec4:	0c f4       	brge	.+2      	; 0x1ec8 <main+0x3de>
    1ec6:	82 cf       	rjmp	.-252    	; 0x1dcc <main+0x2e2>
		}	
		visited[atoi((char*)habitat_pos[current_index])-1]=1;
		current_index++;
	}
	//********************************end*************************************
	buzzer_on();
    1ec8:	0e 94 4f 02 	call	0x49e	; 0x49e <buzzer_on>
    1ecc:	8f ef       	ldi	r24, 0xFF	; 255
    1ece:	9f ef       	ldi	r25, 0xFF	; 255
    1ed0:	a0 ee       	ldi	r26, 0xE0	; 224
    1ed2:	81 50       	subi	r24, 0x01	; 1
    1ed4:	90 40       	sbci	r25, 0x00	; 0
    1ed6:	a0 40       	sbci	r26, 0x00	; 0
    1ed8:	e1 f7       	brne	.-8      	; 0x1ed2 <main+0x3e8>
    1eda:	00 c0       	rjmp	.+0      	; 0x1edc <main+0x3f2>
    1edc:	00 00       	nop
	_delay_ms(5000);
	buzzer_off();
    1ede:	0e 94 53 02 	call	0x4a6	; 0x4a6 <buzzer_off>
	servo_1_free();
    1ee2:	0e 94 48 04 	call	0x890	; 0x890 <servo_1_free>
	servo_2_free();
    1ee6:	0e 94 4f 04 	call	0x89e	; 0x89e <servo_2_free>
	
	
}
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0f 90       	pop	r0
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	df 91       	pop	r29
    1ef8:	cf 91       	pop	r28
    1efa:	1f 91       	pop	r17
    1efc:	0f 91       	pop	r16
    1efe:	ff 90       	pop	r15
    1f00:	ef 90       	pop	r14
    1f02:	df 90       	pop	r13
    1f04:	cf 90       	pop	r12
    1f06:	bf 90       	pop	r11
    1f08:	af 90       	pop	r10
    1f0a:	9f 90       	pop	r9
    1f0c:	8f 90       	pop	r8
    1f0e:	7f 90       	pop	r7
    1f10:	6f 90       	pop	r6
    1f12:	5f 90       	pop	r5
    1f14:	4f 90       	pop	r4
    1f16:	08 95       	ret

00001f18 <__subsf3>:
    1f18:	50 58       	subi	r21, 0x80	; 128

00001f1a <__addsf3>:
    1f1a:	bb 27       	eor	r27, r27
    1f1c:	aa 27       	eor	r26, r26
    1f1e:	0e d0       	rcall	.+28     	; 0x1f3c <__addsf3x>
    1f20:	48 c1       	rjmp	.+656    	; 0x21b2 <__fp_round>
    1f22:	39 d1       	rcall	.+626    	; 0x2196 <__fp_pscA>
    1f24:	30 f0       	brcs	.+12     	; 0x1f32 <__addsf3+0x18>
    1f26:	3e d1       	rcall	.+636    	; 0x21a4 <__fp_pscB>
    1f28:	20 f0       	brcs	.+8      	; 0x1f32 <__addsf3+0x18>
    1f2a:	31 f4       	brne	.+12     	; 0x1f38 <__addsf3+0x1e>
    1f2c:	9f 3f       	cpi	r25, 0xFF	; 255
    1f2e:	11 f4       	brne	.+4      	; 0x1f34 <__addsf3+0x1a>
    1f30:	1e f4       	brtc	.+6      	; 0x1f38 <__addsf3+0x1e>
    1f32:	2e c1       	rjmp	.+604    	; 0x2190 <__fp_nan>
    1f34:	0e f4       	brtc	.+2      	; 0x1f38 <__addsf3+0x1e>
    1f36:	e0 95       	com	r30
    1f38:	e7 fb       	bst	r30, 7
    1f3a:	24 c1       	rjmp	.+584    	; 0x2184 <__fp_inf>

00001f3c <__addsf3x>:
    1f3c:	e9 2f       	mov	r30, r25
    1f3e:	4a d1       	rcall	.+660    	; 0x21d4 <__fp_split3>
    1f40:	80 f3       	brcs	.-32     	; 0x1f22 <__addsf3+0x8>
    1f42:	ba 17       	cp	r27, r26
    1f44:	62 07       	cpc	r22, r18
    1f46:	73 07       	cpc	r23, r19
    1f48:	84 07       	cpc	r24, r20
    1f4a:	95 07       	cpc	r25, r21
    1f4c:	18 f0       	brcs	.+6      	; 0x1f54 <__addsf3x+0x18>
    1f4e:	71 f4       	brne	.+28     	; 0x1f6c <__addsf3x+0x30>
    1f50:	9e f5       	brtc	.+102    	; 0x1fb8 <__addsf3x+0x7c>
    1f52:	62 c1       	rjmp	.+708    	; 0x2218 <__fp_zero>
    1f54:	0e f4       	brtc	.+2      	; 0x1f58 <__addsf3x+0x1c>
    1f56:	e0 95       	com	r30
    1f58:	0b 2e       	mov	r0, r27
    1f5a:	ba 2f       	mov	r27, r26
    1f5c:	a0 2d       	mov	r26, r0
    1f5e:	0b 01       	movw	r0, r22
    1f60:	b9 01       	movw	r22, r18
    1f62:	90 01       	movw	r18, r0
    1f64:	0c 01       	movw	r0, r24
    1f66:	ca 01       	movw	r24, r20
    1f68:	a0 01       	movw	r20, r0
    1f6a:	11 24       	eor	r1, r1
    1f6c:	ff 27       	eor	r31, r31
    1f6e:	59 1b       	sub	r21, r25
    1f70:	99 f0       	breq	.+38     	; 0x1f98 <__addsf3x+0x5c>
    1f72:	59 3f       	cpi	r21, 0xF9	; 249
    1f74:	50 f4       	brcc	.+20     	; 0x1f8a <__addsf3x+0x4e>
    1f76:	50 3e       	cpi	r21, 0xE0	; 224
    1f78:	68 f1       	brcs	.+90     	; 0x1fd4 <__addsf3x+0x98>
    1f7a:	1a 16       	cp	r1, r26
    1f7c:	f0 40       	sbci	r31, 0x00	; 0
    1f7e:	a2 2f       	mov	r26, r18
    1f80:	23 2f       	mov	r18, r19
    1f82:	34 2f       	mov	r19, r20
    1f84:	44 27       	eor	r20, r20
    1f86:	58 5f       	subi	r21, 0xF8	; 248
    1f88:	f3 cf       	rjmp	.-26     	; 0x1f70 <__addsf3x+0x34>
    1f8a:	46 95       	lsr	r20
    1f8c:	37 95       	ror	r19
    1f8e:	27 95       	ror	r18
    1f90:	a7 95       	ror	r26
    1f92:	f0 40       	sbci	r31, 0x00	; 0
    1f94:	53 95       	inc	r21
    1f96:	c9 f7       	brne	.-14     	; 0x1f8a <__addsf3x+0x4e>
    1f98:	7e f4       	brtc	.+30     	; 0x1fb8 <__addsf3x+0x7c>
    1f9a:	1f 16       	cp	r1, r31
    1f9c:	ba 0b       	sbc	r27, r26
    1f9e:	62 0b       	sbc	r22, r18
    1fa0:	73 0b       	sbc	r23, r19
    1fa2:	84 0b       	sbc	r24, r20
    1fa4:	ba f0       	brmi	.+46     	; 0x1fd4 <__addsf3x+0x98>
    1fa6:	91 50       	subi	r25, 0x01	; 1
    1fa8:	a1 f0       	breq	.+40     	; 0x1fd2 <__addsf3x+0x96>
    1faa:	ff 0f       	add	r31, r31
    1fac:	bb 1f       	adc	r27, r27
    1fae:	66 1f       	adc	r22, r22
    1fb0:	77 1f       	adc	r23, r23
    1fb2:	88 1f       	adc	r24, r24
    1fb4:	c2 f7       	brpl	.-16     	; 0x1fa6 <__addsf3x+0x6a>
    1fb6:	0e c0       	rjmp	.+28     	; 0x1fd4 <__addsf3x+0x98>
    1fb8:	ba 0f       	add	r27, r26
    1fba:	62 1f       	adc	r22, r18
    1fbc:	73 1f       	adc	r23, r19
    1fbe:	84 1f       	adc	r24, r20
    1fc0:	48 f4       	brcc	.+18     	; 0x1fd4 <__addsf3x+0x98>
    1fc2:	87 95       	ror	r24
    1fc4:	77 95       	ror	r23
    1fc6:	67 95       	ror	r22
    1fc8:	b7 95       	ror	r27
    1fca:	f7 95       	ror	r31
    1fcc:	9e 3f       	cpi	r25, 0xFE	; 254
    1fce:	08 f0       	brcs	.+2      	; 0x1fd2 <__addsf3x+0x96>
    1fd0:	b3 cf       	rjmp	.-154    	; 0x1f38 <__addsf3+0x1e>
    1fd2:	93 95       	inc	r25
    1fd4:	88 0f       	add	r24, r24
    1fd6:	08 f0       	brcs	.+2      	; 0x1fda <__addsf3x+0x9e>
    1fd8:	99 27       	eor	r25, r25
    1fda:	ee 0f       	add	r30, r30
    1fdc:	97 95       	ror	r25
    1fde:	87 95       	ror	r24
    1fe0:	08 95       	ret

00001fe2 <__divsf3>:
    1fe2:	0c d0       	rcall	.+24     	; 0x1ffc <__divsf3x>
    1fe4:	e6 c0       	rjmp	.+460    	; 0x21b2 <__fp_round>
    1fe6:	de d0       	rcall	.+444    	; 0x21a4 <__fp_pscB>
    1fe8:	40 f0       	brcs	.+16     	; 0x1ffa <__divsf3+0x18>
    1fea:	d5 d0       	rcall	.+426    	; 0x2196 <__fp_pscA>
    1fec:	30 f0       	brcs	.+12     	; 0x1ffa <__divsf3+0x18>
    1fee:	21 f4       	brne	.+8      	; 0x1ff8 <__divsf3+0x16>
    1ff0:	5f 3f       	cpi	r21, 0xFF	; 255
    1ff2:	19 f0       	breq	.+6      	; 0x1ffa <__divsf3+0x18>
    1ff4:	c7 c0       	rjmp	.+398    	; 0x2184 <__fp_inf>
    1ff6:	51 11       	cpse	r21, r1
    1ff8:	10 c1       	rjmp	.+544    	; 0x221a <__fp_szero>
    1ffa:	ca c0       	rjmp	.+404    	; 0x2190 <__fp_nan>

00001ffc <__divsf3x>:
    1ffc:	eb d0       	rcall	.+470    	; 0x21d4 <__fp_split3>
    1ffe:	98 f3       	brcs	.-26     	; 0x1fe6 <__divsf3+0x4>

00002000 <__divsf3_pse>:
    2000:	99 23       	and	r25, r25
    2002:	c9 f3       	breq	.-14     	; 0x1ff6 <__divsf3+0x14>
    2004:	55 23       	and	r21, r21
    2006:	b1 f3       	breq	.-20     	; 0x1ff4 <__divsf3+0x12>
    2008:	95 1b       	sub	r25, r21
    200a:	55 0b       	sbc	r21, r21
    200c:	bb 27       	eor	r27, r27
    200e:	aa 27       	eor	r26, r26
    2010:	62 17       	cp	r22, r18
    2012:	73 07       	cpc	r23, r19
    2014:	84 07       	cpc	r24, r20
    2016:	38 f0       	brcs	.+14     	; 0x2026 <__divsf3_pse+0x26>
    2018:	9f 5f       	subi	r25, 0xFF	; 255
    201a:	5f 4f       	sbci	r21, 0xFF	; 255
    201c:	22 0f       	add	r18, r18
    201e:	33 1f       	adc	r19, r19
    2020:	44 1f       	adc	r20, r20
    2022:	aa 1f       	adc	r26, r26
    2024:	a9 f3       	breq	.-22     	; 0x2010 <__divsf3_pse+0x10>
    2026:	33 d0       	rcall	.+102    	; 0x208e <__divsf3_pse+0x8e>
    2028:	0e 2e       	mov	r0, r30
    202a:	3a f0       	brmi	.+14     	; 0x203a <__divsf3_pse+0x3a>
    202c:	e0 e8       	ldi	r30, 0x80	; 128
    202e:	30 d0       	rcall	.+96     	; 0x2090 <__divsf3_pse+0x90>
    2030:	91 50       	subi	r25, 0x01	; 1
    2032:	50 40       	sbci	r21, 0x00	; 0
    2034:	e6 95       	lsr	r30
    2036:	00 1c       	adc	r0, r0
    2038:	ca f7       	brpl	.-14     	; 0x202c <__divsf3_pse+0x2c>
    203a:	29 d0       	rcall	.+82     	; 0x208e <__divsf3_pse+0x8e>
    203c:	fe 2f       	mov	r31, r30
    203e:	27 d0       	rcall	.+78     	; 0x208e <__divsf3_pse+0x8e>
    2040:	66 0f       	add	r22, r22
    2042:	77 1f       	adc	r23, r23
    2044:	88 1f       	adc	r24, r24
    2046:	bb 1f       	adc	r27, r27
    2048:	26 17       	cp	r18, r22
    204a:	37 07       	cpc	r19, r23
    204c:	48 07       	cpc	r20, r24
    204e:	ab 07       	cpc	r26, r27
    2050:	b0 e8       	ldi	r27, 0x80	; 128
    2052:	09 f0       	breq	.+2      	; 0x2056 <__divsf3_pse+0x56>
    2054:	bb 0b       	sbc	r27, r27
    2056:	80 2d       	mov	r24, r0
    2058:	bf 01       	movw	r22, r30
    205a:	ff 27       	eor	r31, r31
    205c:	93 58       	subi	r25, 0x83	; 131
    205e:	5f 4f       	sbci	r21, 0xFF	; 255
    2060:	2a f0       	brmi	.+10     	; 0x206c <__divsf3_pse+0x6c>
    2062:	9e 3f       	cpi	r25, 0xFE	; 254
    2064:	51 05       	cpc	r21, r1
    2066:	68 f0       	brcs	.+26     	; 0x2082 <__divsf3_pse+0x82>
    2068:	8d c0       	rjmp	.+282    	; 0x2184 <__fp_inf>
    206a:	d7 c0       	rjmp	.+430    	; 0x221a <__fp_szero>
    206c:	5f 3f       	cpi	r21, 0xFF	; 255
    206e:	ec f3       	brlt	.-6      	; 0x206a <__divsf3_pse+0x6a>
    2070:	98 3e       	cpi	r25, 0xE8	; 232
    2072:	dc f3       	brlt	.-10     	; 0x206a <__divsf3_pse+0x6a>
    2074:	86 95       	lsr	r24
    2076:	77 95       	ror	r23
    2078:	67 95       	ror	r22
    207a:	b7 95       	ror	r27
    207c:	f7 95       	ror	r31
    207e:	9f 5f       	subi	r25, 0xFF	; 255
    2080:	c9 f7       	brne	.-14     	; 0x2074 <__divsf3_pse+0x74>
    2082:	88 0f       	add	r24, r24
    2084:	91 1d       	adc	r25, r1
    2086:	96 95       	lsr	r25
    2088:	87 95       	ror	r24
    208a:	97 f9       	bld	r25, 7
    208c:	08 95       	ret
    208e:	e1 e0       	ldi	r30, 0x01	; 1
    2090:	66 0f       	add	r22, r22
    2092:	77 1f       	adc	r23, r23
    2094:	88 1f       	adc	r24, r24
    2096:	bb 1f       	adc	r27, r27
    2098:	62 17       	cp	r22, r18
    209a:	73 07       	cpc	r23, r19
    209c:	84 07       	cpc	r24, r20
    209e:	ba 07       	cpc	r27, r26
    20a0:	20 f0       	brcs	.+8      	; 0x20aa <__divsf3_pse+0xaa>
    20a2:	62 1b       	sub	r22, r18
    20a4:	73 0b       	sbc	r23, r19
    20a6:	84 0b       	sbc	r24, r20
    20a8:	ba 0b       	sbc	r27, r26
    20aa:	ee 1f       	adc	r30, r30
    20ac:	88 f7       	brcc	.-30     	; 0x2090 <__divsf3_pse+0x90>
    20ae:	e0 95       	com	r30
    20b0:	08 95       	ret

000020b2 <__fixunssfsi>:
    20b2:	98 d0       	rcall	.+304    	; 0x21e4 <__fp_splitA>
    20b4:	88 f0       	brcs	.+34     	; 0x20d8 <__fixunssfsi+0x26>
    20b6:	9f 57       	subi	r25, 0x7F	; 127
    20b8:	90 f0       	brcs	.+36     	; 0x20de <__fixunssfsi+0x2c>
    20ba:	b9 2f       	mov	r27, r25
    20bc:	99 27       	eor	r25, r25
    20be:	b7 51       	subi	r27, 0x17	; 23
    20c0:	a0 f0       	brcs	.+40     	; 0x20ea <__fixunssfsi+0x38>
    20c2:	d1 f0       	breq	.+52     	; 0x20f8 <__fixunssfsi+0x46>
    20c4:	66 0f       	add	r22, r22
    20c6:	77 1f       	adc	r23, r23
    20c8:	88 1f       	adc	r24, r24
    20ca:	99 1f       	adc	r25, r25
    20cc:	1a f0       	brmi	.+6      	; 0x20d4 <__fixunssfsi+0x22>
    20ce:	ba 95       	dec	r27
    20d0:	c9 f7       	brne	.-14     	; 0x20c4 <__fixunssfsi+0x12>
    20d2:	12 c0       	rjmp	.+36     	; 0x20f8 <__fixunssfsi+0x46>
    20d4:	b1 30       	cpi	r27, 0x01	; 1
    20d6:	81 f0       	breq	.+32     	; 0x20f8 <__fixunssfsi+0x46>
    20d8:	9f d0       	rcall	.+318    	; 0x2218 <__fp_zero>
    20da:	b1 e0       	ldi	r27, 0x01	; 1
    20dc:	08 95       	ret
    20de:	9c c0       	rjmp	.+312    	; 0x2218 <__fp_zero>
    20e0:	67 2f       	mov	r22, r23
    20e2:	78 2f       	mov	r23, r24
    20e4:	88 27       	eor	r24, r24
    20e6:	b8 5f       	subi	r27, 0xF8	; 248
    20e8:	39 f0       	breq	.+14     	; 0x20f8 <__fixunssfsi+0x46>
    20ea:	b9 3f       	cpi	r27, 0xF9	; 249
    20ec:	cc f3       	brlt	.-14     	; 0x20e0 <__fixunssfsi+0x2e>
    20ee:	86 95       	lsr	r24
    20f0:	77 95       	ror	r23
    20f2:	67 95       	ror	r22
    20f4:	b3 95       	inc	r27
    20f6:	d9 f7       	brne	.-10     	; 0x20ee <__fixunssfsi+0x3c>
    20f8:	3e f4       	brtc	.+14     	; 0x2108 <__fixunssfsi+0x56>
    20fa:	90 95       	com	r25
    20fc:	80 95       	com	r24
    20fe:	70 95       	com	r23
    2100:	61 95       	neg	r22
    2102:	7f 4f       	sbci	r23, 0xFF	; 255
    2104:	8f 4f       	sbci	r24, 0xFF	; 255
    2106:	9f 4f       	sbci	r25, 0xFF	; 255
    2108:	08 95       	ret

0000210a <__floatunsisf>:
    210a:	e8 94       	clt
    210c:	09 c0       	rjmp	.+18     	; 0x2120 <__floatsisf+0x12>

0000210e <__floatsisf>:
    210e:	97 fb       	bst	r25, 7
    2110:	3e f4       	brtc	.+14     	; 0x2120 <__floatsisf+0x12>
    2112:	90 95       	com	r25
    2114:	80 95       	com	r24
    2116:	70 95       	com	r23
    2118:	61 95       	neg	r22
    211a:	7f 4f       	sbci	r23, 0xFF	; 255
    211c:	8f 4f       	sbci	r24, 0xFF	; 255
    211e:	9f 4f       	sbci	r25, 0xFF	; 255
    2120:	99 23       	and	r25, r25
    2122:	a9 f0       	breq	.+42     	; 0x214e <__floatsisf+0x40>
    2124:	f9 2f       	mov	r31, r25
    2126:	96 e9       	ldi	r25, 0x96	; 150
    2128:	bb 27       	eor	r27, r27
    212a:	93 95       	inc	r25
    212c:	f6 95       	lsr	r31
    212e:	87 95       	ror	r24
    2130:	77 95       	ror	r23
    2132:	67 95       	ror	r22
    2134:	b7 95       	ror	r27
    2136:	f1 11       	cpse	r31, r1
    2138:	f8 cf       	rjmp	.-16     	; 0x212a <__floatsisf+0x1c>
    213a:	fa f4       	brpl	.+62     	; 0x217a <__floatsisf+0x6c>
    213c:	bb 0f       	add	r27, r27
    213e:	11 f4       	brne	.+4      	; 0x2144 <__floatsisf+0x36>
    2140:	60 ff       	sbrs	r22, 0
    2142:	1b c0       	rjmp	.+54     	; 0x217a <__floatsisf+0x6c>
    2144:	6f 5f       	subi	r22, 0xFF	; 255
    2146:	7f 4f       	sbci	r23, 0xFF	; 255
    2148:	8f 4f       	sbci	r24, 0xFF	; 255
    214a:	9f 4f       	sbci	r25, 0xFF	; 255
    214c:	16 c0       	rjmp	.+44     	; 0x217a <__floatsisf+0x6c>
    214e:	88 23       	and	r24, r24
    2150:	11 f0       	breq	.+4      	; 0x2156 <__floatsisf+0x48>
    2152:	96 e9       	ldi	r25, 0x96	; 150
    2154:	11 c0       	rjmp	.+34     	; 0x2178 <__floatsisf+0x6a>
    2156:	77 23       	and	r23, r23
    2158:	21 f0       	breq	.+8      	; 0x2162 <__floatsisf+0x54>
    215a:	9e e8       	ldi	r25, 0x8E	; 142
    215c:	87 2f       	mov	r24, r23
    215e:	76 2f       	mov	r23, r22
    2160:	05 c0       	rjmp	.+10     	; 0x216c <__floatsisf+0x5e>
    2162:	66 23       	and	r22, r22
    2164:	71 f0       	breq	.+28     	; 0x2182 <__floatsisf+0x74>
    2166:	96 e8       	ldi	r25, 0x86	; 134
    2168:	86 2f       	mov	r24, r22
    216a:	70 e0       	ldi	r23, 0x00	; 0
    216c:	60 e0       	ldi	r22, 0x00	; 0
    216e:	2a f0       	brmi	.+10     	; 0x217a <__floatsisf+0x6c>
    2170:	9a 95       	dec	r25
    2172:	66 0f       	add	r22, r22
    2174:	77 1f       	adc	r23, r23
    2176:	88 1f       	adc	r24, r24
    2178:	da f7       	brpl	.-10     	; 0x2170 <__floatsisf+0x62>
    217a:	88 0f       	add	r24, r24
    217c:	96 95       	lsr	r25
    217e:	87 95       	ror	r24
    2180:	97 f9       	bld	r25, 7
    2182:	08 95       	ret

00002184 <__fp_inf>:
    2184:	97 f9       	bld	r25, 7
    2186:	9f 67       	ori	r25, 0x7F	; 127
    2188:	80 e8       	ldi	r24, 0x80	; 128
    218a:	70 e0       	ldi	r23, 0x00	; 0
    218c:	60 e0       	ldi	r22, 0x00	; 0
    218e:	08 95       	ret

00002190 <__fp_nan>:
    2190:	9f ef       	ldi	r25, 0xFF	; 255
    2192:	80 ec       	ldi	r24, 0xC0	; 192
    2194:	08 95       	ret

00002196 <__fp_pscA>:
    2196:	00 24       	eor	r0, r0
    2198:	0a 94       	dec	r0
    219a:	16 16       	cp	r1, r22
    219c:	17 06       	cpc	r1, r23
    219e:	18 06       	cpc	r1, r24
    21a0:	09 06       	cpc	r0, r25
    21a2:	08 95       	ret

000021a4 <__fp_pscB>:
    21a4:	00 24       	eor	r0, r0
    21a6:	0a 94       	dec	r0
    21a8:	12 16       	cp	r1, r18
    21aa:	13 06       	cpc	r1, r19
    21ac:	14 06       	cpc	r1, r20
    21ae:	05 06       	cpc	r0, r21
    21b0:	08 95       	ret

000021b2 <__fp_round>:
    21b2:	09 2e       	mov	r0, r25
    21b4:	03 94       	inc	r0
    21b6:	00 0c       	add	r0, r0
    21b8:	11 f4       	brne	.+4      	; 0x21be <__fp_round+0xc>
    21ba:	88 23       	and	r24, r24
    21bc:	52 f0       	brmi	.+20     	; 0x21d2 <__fp_round+0x20>
    21be:	bb 0f       	add	r27, r27
    21c0:	40 f4       	brcc	.+16     	; 0x21d2 <__fp_round+0x20>
    21c2:	bf 2b       	or	r27, r31
    21c4:	11 f4       	brne	.+4      	; 0x21ca <__fp_round+0x18>
    21c6:	60 ff       	sbrs	r22, 0
    21c8:	04 c0       	rjmp	.+8      	; 0x21d2 <__fp_round+0x20>
    21ca:	6f 5f       	subi	r22, 0xFF	; 255
    21cc:	7f 4f       	sbci	r23, 0xFF	; 255
    21ce:	8f 4f       	sbci	r24, 0xFF	; 255
    21d0:	9f 4f       	sbci	r25, 0xFF	; 255
    21d2:	08 95       	ret

000021d4 <__fp_split3>:
    21d4:	57 fd       	sbrc	r21, 7
    21d6:	90 58       	subi	r25, 0x80	; 128
    21d8:	44 0f       	add	r20, r20
    21da:	55 1f       	adc	r21, r21
    21dc:	59 f0       	breq	.+22     	; 0x21f4 <__fp_splitA+0x10>
    21de:	5f 3f       	cpi	r21, 0xFF	; 255
    21e0:	71 f0       	breq	.+28     	; 0x21fe <__fp_splitA+0x1a>
    21e2:	47 95       	ror	r20

000021e4 <__fp_splitA>:
    21e4:	88 0f       	add	r24, r24
    21e6:	97 fb       	bst	r25, 7
    21e8:	99 1f       	adc	r25, r25
    21ea:	61 f0       	breq	.+24     	; 0x2204 <__stack+0x5>
    21ec:	9f 3f       	cpi	r25, 0xFF	; 255
    21ee:	79 f0       	breq	.+30     	; 0x220e <__stack+0xf>
    21f0:	87 95       	ror	r24
    21f2:	08 95       	ret
    21f4:	12 16       	cp	r1, r18
    21f6:	13 06       	cpc	r1, r19
    21f8:	14 06       	cpc	r1, r20
    21fa:	55 1f       	adc	r21, r21
    21fc:	f2 cf       	rjmp	.-28     	; 0x21e2 <__fp_split3+0xe>
    21fe:	46 95       	lsr	r20
    2200:	f1 df       	rcall	.-30     	; 0x21e4 <__fp_splitA>
    2202:	08 c0       	rjmp	.+16     	; 0x2214 <__stack+0x15>
    2204:	16 16       	cp	r1, r22
    2206:	17 06       	cpc	r1, r23
    2208:	18 06       	cpc	r1, r24
    220a:	99 1f       	adc	r25, r25
    220c:	f1 cf       	rjmp	.-30     	; 0x21f0 <__fp_splitA+0xc>
    220e:	86 95       	lsr	r24
    2210:	71 05       	cpc	r23, r1
    2212:	61 05       	cpc	r22, r1
    2214:	08 94       	sec
    2216:	08 95       	ret

00002218 <__fp_zero>:
    2218:	e8 94       	clt

0000221a <__fp_szero>:
    221a:	bb 27       	eor	r27, r27
    221c:	66 27       	eor	r22, r22
    221e:	77 27       	eor	r23, r23
    2220:	cb 01       	movw	r24, r22
    2222:	97 f9       	bld	r25, 7
    2224:	08 95       	ret

00002226 <__udivmodhi4>:
    2226:	aa 1b       	sub	r26, r26
    2228:	bb 1b       	sub	r27, r27
    222a:	51 e1       	ldi	r21, 0x11	; 17
    222c:	07 c0       	rjmp	.+14     	; 0x223c <__udivmodhi4_ep>

0000222e <__udivmodhi4_loop>:
    222e:	aa 1f       	adc	r26, r26
    2230:	bb 1f       	adc	r27, r27
    2232:	a6 17       	cp	r26, r22
    2234:	b7 07       	cpc	r27, r23
    2236:	10 f0       	brcs	.+4      	; 0x223c <__udivmodhi4_ep>
    2238:	a6 1b       	sub	r26, r22
    223a:	b7 0b       	sbc	r27, r23

0000223c <__udivmodhi4_ep>:
    223c:	88 1f       	adc	r24, r24
    223e:	99 1f       	adc	r25, r25
    2240:	5a 95       	dec	r21
    2242:	a9 f7       	brne	.-22     	; 0x222e <__udivmodhi4_loop>
    2244:	80 95       	com	r24
    2246:	90 95       	com	r25
    2248:	bc 01       	movw	r22, r24
    224a:	cd 01       	movw	r24, r26
    224c:	08 95       	ret

0000224e <malloc>:
    224e:	cf 93       	push	r28
    2250:	df 93       	push	r29
    2252:	ac 01       	movw	r20, r24
    2254:	82 30       	cpi	r24, 0x02	; 2
    2256:	91 05       	cpc	r25, r1
    2258:	10 f4       	brcc	.+4      	; 0x225e <malloc+0x10>
    225a:	42 e0       	ldi	r20, 0x02	; 2
    225c:	50 e0       	ldi	r21, 0x00	; 0
    225e:	e0 91 3c 05 	lds	r30, 0x053C
    2262:	f0 91 3d 05 	lds	r31, 0x053D
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	a0 e0       	ldi	r26, 0x00	; 0
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	24 c0       	rjmp	.+72     	; 0x22b8 <malloc+0x6a>
    2270:	80 81       	ld	r24, Z
    2272:	91 81       	ldd	r25, Z+1	; 0x01
    2274:	84 17       	cp	r24, r20
    2276:	95 07       	cpc	r25, r21
    2278:	d0 f0       	brcs	.+52     	; 0x22ae <malloc+0x60>
    227a:	84 17       	cp	r24, r20
    227c:	95 07       	cpc	r25, r21
    227e:	71 f4       	brne	.+28     	; 0x229c <malloc+0x4e>
    2280:	82 81       	ldd	r24, Z+2	; 0x02
    2282:	93 81       	ldd	r25, Z+3	; 0x03
    2284:	10 97       	sbiw	r26, 0x00	; 0
    2286:	29 f0       	breq	.+10     	; 0x2292 <malloc+0x44>
    2288:	13 96       	adiw	r26, 0x03	; 3
    228a:	9c 93       	st	X, r25
    228c:	8e 93       	st	-X, r24
    228e:	12 97       	sbiw	r26, 0x02	; 2
    2290:	2c c0       	rjmp	.+88     	; 0x22ea <malloc+0x9c>
    2292:	90 93 3d 05 	sts	0x053D, r25
    2296:	80 93 3c 05 	sts	0x053C, r24
    229a:	27 c0       	rjmp	.+78     	; 0x22ea <malloc+0x9c>
    229c:	21 15       	cp	r18, r1
    229e:	31 05       	cpc	r19, r1
    22a0:	19 f0       	breq	.+6      	; 0x22a8 <malloc+0x5a>
    22a2:	82 17       	cp	r24, r18
    22a4:	93 07       	cpc	r25, r19
    22a6:	18 f4       	brcc	.+6      	; 0x22ae <malloc+0x60>
    22a8:	9c 01       	movw	r18, r24
    22aa:	bd 01       	movw	r22, r26
    22ac:	ef 01       	movw	r28, r30
    22ae:	92 81       	ldd	r25, Z+2	; 0x02
    22b0:	83 81       	ldd	r24, Z+3	; 0x03
    22b2:	df 01       	movw	r26, r30
    22b4:	e9 2f       	mov	r30, r25
    22b6:	f8 2f       	mov	r31, r24
    22b8:	30 97       	sbiw	r30, 0x00	; 0
    22ba:	d1 f6       	brne	.-76     	; 0x2270 <malloc+0x22>
    22bc:	21 15       	cp	r18, r1
    22be:	31 05       	cpc	r19, r1
    22c0:	f9 f0       	breq	.+62     	; 0x2300 <malloc+0xb2>
    22c2:	c9 01       	movw	r24, r18
    22c4:	84 1b       	sub	r24, r20
    22c6:	95 0b       	sbc	r25, r21
    22c8:	84 30       	cpi	r24, 0x04	; 4
    22ca:	91 05       	cpc	r25, r1
    22cc:	80 f4       	brcc	.+32     	; 0x22ee <malloc+0xa0>
    22ce:	8a 81       	ldd	r24, Y+2	; 0x02
    22d0:	9b 81       	ldd	r25, Y+3	; 0x03
    22d2:	61 15       	cp	r22, r1
    22d4:	71 05       	cpc	r23, r1
    22d6:	21 f0       	breq	.+8      	; 0x22e0 <malloc+0x92>
    22d8:	fb 01       	movw	r30, r22
    22da:	93 83       	std	Z+3, r25	; 0x03
    22dc:	82 83       	std	Z+2, r24	; 0x02
    22de:	04 c0       	rjmp	.+8      	; 0x22e8 <malloc+0x9a>
    22e0:	90 93 3d 05 	sts	0x053D, r25
    22e4:	80 93 3c 05 	sts	0x053C, r24
    22e8:	fe 01       	movw	r30, r28
    22ea:	32 96       	adiw	r30, 0x02	; 2
    22ec:	42 c0       	rjmp	.+132    	; 0x2372 <malloc+0x124>
    22ee:	fe 01       	movw	r30, r28
    22f0:	e8 0f       	add	r30, r24
    22f2:	f9 1f       	adc	r31, r25
    22f4:	41 93       	st	Z+, r20
    22f6:	51 93       	st	Z+, r21
    22f8:	02 97       	sbiw	r24, 0x02	; 2
    22fa:	99 83       	std	Y+1, r25	; 0x01
    22fc:	88 83       	st	Y, r24
    22fe:	39 c0       	rjmp	.+114    	; 0x2372 <malloc+0x124>
    2300:	80 91 3a 05 	lds	r24, 0x053A
    2304:	90 91 3b 05 	lds	r25, 0x053B
    2308:	00 97       	sbiw	r24, 0x00	; 0
    230a:	41 f4       	brne	.+16     	; 0x231c <malloc+0xce>
    230c:	80 91 9d 03 	lds	r24, 0x039D
    2310:	90 91 9e 03 	lds	r25, 0x039E
    2314:	90 93 3b 05 	sts	0x053B, r25
    2318:	80 93 3a 05 	sts	0x053A, r24
    231c:	20 91 9b 03 	lds	r18, 0x039B
    2320:	30 91 9c 03 	lds	r19, 0x039C
    2324:	21 15       	cp	r18, r1
    2326:	31 05       	cpc	r19, r1
    2328:	41 f4       	brne	.+16     	; 0x233a <malloc+0xec>
    232a:	2d b7       	in	r18, 0x3d	; 61
    232c:	3e b7       	in	r19, 0x3e	; 62
    232e:	80 91 9f 03 	lds	r24, 0x039F
    2332:	90 91 a0 03 	lds	r25, 0x03A0
    2336:	28 1b       	sub	r18, r24
    2338:	39 0b       	sbc	r19, r25
    233a:	e0 91 3a 05 	lds	r30, 0x053A
    233e:	f0 91 3b 05 	lds	r31, 0x053B
    2342:	e2 17       	cp	r30, r18
    2344:	f3 07       	cpc	r31, r19
    2346:	98 f4       	brcc	.+38     	; 0x236e <malloc+0x120>
    2348:	2e 1b       	sub	r18, r30
    234a:	3f 0b       	sbc	r19, r31
    234c:	24 17       	cp	r18, r20
    234e:	35 07       	cpc	r19, r21
    2350:	70 f0       	brcs	.+28     	; 0x236e <malloc+0x120>
    2352:	ca 01       	movw	r24, r20
    2354:	02 96       	adiw	r24, 0x02	; 2
    2356:	28 17       	cp	r18, r24
    2358:	39 07       	cpc	r19, r25
    235a:	48 f0       	brcs	.+18     	; 0x236e <malloc+0x120>
    235c:	8e 0f       	add	r24, r30
    235e:	9f 1f       	adc	r25, r31
    2360:	90 93 3b 05 	sts	0x053B, r25
    2364:	80 93 3a 05 	sts	0x053A, r24
    2368:	41 93       	st	Z+, r20
    236a:	51 93       	st	Z+, r21
    236c:	02 c0       	rjmp	.+4      	; 0x2372 <malloc+0x124>
    236e:	e0 e0       	ldi	r30, 0x00	; 0
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	cf 01       	movw	r24, r30
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	08 95       	ret

0000237a <free>:
    237a:	0f 93       	push	r16
    237c:	1f 93       	push	r17
    237e:	cf 93       	push	r28
    2380:	df 93       	push	r29
    2382:	9c 01       	movw	r18, r24
    2384:	00 97       	sbiw	r24, 0x00	; 0
    2386:	09 f4       	brne	.+2      	; 0x238a <free+0x10>
    2388:	8c c0       	rjmp	.+280    	; 0x24a2 <free+0x128>
    238a:	dc 01       	movw	r26, r24
    238c:	12 97       	sbiw	r26, 0x02	; 2
    238e:	13 96       	adiw	r26, 0x03	; 3
    2390:	1c 92       	st	X, r1
    2392:	1e 92       	st	-X, r1
    2394:	12 97       	sbiw	r26, 0x02	; 2
    2396:	60 91 3c 05 	lds	r22, 0x053C
    239a:	70 91 3d 05 	lds	r23, 0x053D
    239e:	61 15       	cp	r22, r1
    23a0:	71 05       	cpc	r23, r1
    23a2:	89 f4       	brne	.+34     	; 0x23c6 <free+0x4c>
    23a4:	8d 91       	ld	r24, X+
    23a6:	9c 91       	ld	r25, X
    23a8:	11 97       	sbiw	r26, 0x01	; 1
    23aa:	82 0f       	add	r24, r18
    23ac:	93 1f       	adc	r25, r19
    23ae:	20 91 3a 05 	lds	r18, 0x053A
    23b2:	30 91 3b 05 	lds	r19, 0x053B
    23b6:	28 17       	cp	r18, r24
    23b8:	39 07       	cpc	r19, r25
    23ba:	69 f5       	brne	.+90     	; 0x2416 <free+0x9c>
    23bc:	b0 93 3b 05 	sts	0x053B, r27
    23c0:	a0 93 3a 05 	sts	0x053A, r26
    23c4:	6e c0       	rjmp	.+220    	; 0x24a2 <free+0x128>
    23c6:	fb 01       	movw	r30, r22
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	50 e0       	ldi	r21, 0x00	; 0
    23cc:	01 c0       	rjmp	.+2      	; 0x23d0 <free+0x56>
    23ce:	fc 01       	movw	r30, r24
    23d0:	ea 17       	cp	r30, r26
    23d2:	fb 07       	cpc	r31, r27
    23d4:	30 f4       	brcc	.+12     	; 0x23e2 <free+0x68>
    23d6:	82 81       	ldd	r24, Z+2	; 0x02
    23d8:	93 81       	ldd	r25, Z+3	; 0x03
    23da:	af 01       	movw	r20, r30
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	b9 f7       	brne	.-18     	; 0x23ce <free+0x54>
    23e0:	1f c0       	rjmp	.+62     	; 0x2420 <free+0xa6>
    23e2:	e9 01       	movw	r28, r18
    23e4:	22 97       	sbiw	r28, 0x02	; 2
    23e6:	fb 83       	std	Y+3, r31	; 0x03
    23e8:	ea 83       	std	Y+2, r30	; 0x02
    23ea:	08 81       	ld	r16, Y
    23ec:	19 81       	ldd	r17, Y+1	; 0x01
    23ee:	c9 01       	movw	r24, r18
    23f0:	80 0f       	add	r24, r16
    23f2:	91 1f       	adc	r25, r17
    23f4:	8e 17       	cp	r24, r30
    23f6:	9f 07       	cpc	r25, r31
    23f8:	59 f4       	brne	.+22     	; 0x2410 <free+0x96>
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	80 0f       	add	r24, r16
    2400:	91 1f       	adc	r25, r17
    2402:	02 96       	adiw	r24, 0x02	; 2
    2404:	99 83       	std	Y+1, r25	; 0x01
    2406:	88 83       	st	Y, r24
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	9b 83       	std	Y+3, r25	; 0x03
    240e:	8a 83       	std	Y+2, r24	; 0x02
    2410:	41 15       	cp	r20, r1
    2412:	51 05       	cpc	r21, r1
    2414:	29 f4       	brne	.+10     	; 0x2420 <free+0xa6>
    2416:	b0 93 3d 05 	sts	0x053D, r27
    241a:	a0 93 3c 05 	sts	0x053C, r26
    241e:	41 c0       	rjmp	.+130    	; 0x24a2 <free+0x128>
    2420:	fa 01       	movw	r30, r20
    2422:	b3 83       	std	Z+3, r27	; 0x03
    2424:	a2 83       	std	Z+2, r26	; 0x02
    2426:	c1 91       	ld	r28, Z+
    2428:	d1 91       	ld	r29, Z+
    242a:	ec 0f       	add	r30, r28
    242c:	fd 1f       	adc	r31, r29
    242e:	ae 17       	cp	r26, r30
    2430:	bf 07       	cpc	r27, r31
    2432:	81 f4       	brne	.+32     	; 0x2454 <free+0xda>
    2434:	f9 01       	movw	r30, r18
    2436:	92 91       	ld	r25, -Z
    2438:	82 91       	ld	r24, -Z
    243a:	8c 0f       	add	r24, r28
    243c:	9d 1f       	adc	r25, r29
    243e:	02 96       	adiw	r24, 0x02	; 2
    2440:	da 01       	movw	r26, r20
    2442:	11 96       	adiw	r26, 0x01	; 1
    2444:	9c 93       	st	X, r25
    2446:	8e 93       	st	-X, r24
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	93 81       	ldd	r25, Z+3	; 0x03
    244c:	13 96       	adiw	r26, 0x03	; 3
    244e:	9c 93       	st	X, r25
    2450:	8e 93       	st	-X, r24
    2452:	12 97       	sbiw	r26, 0x02	; 2
    2454:	e0 e0       	ldi	r30, 0x00	; 0
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	02 c0       	rjmp	.+4      	; 0x245e <free+0xe4>
    245a:	fb 01       	movw	r30, r22
    245c:	bc 01       	movw	r22, r24
    245e:	db 01       	movw	r26, r22
    2460:	12 96       	adiw	r26, 0x02	; 2
    2462:	8d 91       	ld	r24, X+
    2464:	9c 91       	ld	r25, X
    2466:	13 97       	sbiw	r26, 0x03	; 3
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	b9 f7       	brne	.-18     	; 0x245a <free+0xe0>
    246c:	cb 01       	movw	r24, r22
    246e:	02 96       	adiw	r24, 0x02	; 2
    2470:	2d 91       	ld	r18, X+
    2472:	3c 91       	ld	r19, X
    2474:	11 97       	sbiw	r26, 0x01	; 1
    2476:	82 0f       	add	r24, r18
    2478:	93 1f       	adc	r25, r19
    247a:	20 91 3a 05 	lds	r18, 0x053A
    247e:	30 91 3b 05 	lds	r19, 0x053B
    2482:	28 17       	cp	r18, r24
    2484:	39 07       	cpc	r19, r25
    2486:	69 f4       	brne	.+26     	; 0x24a2 <free+0x128>
    2488:	30 97       	sbiw	r30, 0x00	; 0
    248a:	29 f4       	brne	.+10     	; 0x2496 <free+0x11c>
    248c:	10 92 3d 05 	sts	0x053D, r1
    2490:	10 92 3c 05 	sts	0x053C, r1
    2494:	02 c0       	rjmp	.+4      	; 0x249a <free+0x120>
    2496:	13 82       	std	Z+3, r1	; 0x03
    2498:	12 82       	std	Z+2, r1	; 0x02
    249a:	70 93 3b 05 	sts	0x053B, r23
    249e:	60 93 3a 05 	sts	0x053A, r22
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	1f 91       	pop	r17
    24a8:	0f 91       	pop	r16
    24aa:	08 95       	ret

000024ac <atoi>:
    24ac:	fc 01       	movw	r30, r24
    24ae:	88 27       	eor	r24, r24
    24b0:	99 27       	eor	r25, r25
    24b2:	e8 94       	clt
    24b4:	21 91       	ld	r18, Z+
    24b6:	20 32       	cpi	r18, 0x20	; 32
    24b8:	e9 f3       	breq	.-6      	; 0x24b4 <atoi+0x8>
    24ba:	29 30       	cpi	r18, 0x09	; 9
    24bc:	10 f0       	brcs	.+4      	; 0x24c2 <atoi+0x16>
    24be:	2e 30       	cpi	r18, 0x0E	; 14
    24c0:	c8 f3       	brcs	.-14     	; 0x24b4 <atoi+0x8>
    24c2:	2b 32       	cpi	r18, 0x2B	; 43
    24c4:	41 f0       	breq	.+16     	; 0x24d6 <atoi+0x2a>
    24c6:	2d 32       	cpi	r18, 0x2D	; 45
    24c8:	39 f4       	brne	.+14     	; 0x24d8 <atoi+0x2c>
    24ca:	68 94       	set
    24cc:	04 c0       	rjmp	.+8      	; 0x24d6 <atoi+0x2a>
    24ce:	0e 94 7f 12 	call	0x24fe	; 0x24fe <__mulhi_const_10>
    24d2:	82 0f       	add	r24, r18
    24d4:	91 1d       	adc	r25, r1
    24d6:	21 91       	ld	r18, Z+
    24d8:	20 53       	subi	r18, 0x30	; 48
    24da:	2a 30       	cpi	r18, 0x0A	; 10
    24dc:	c0 f3       	brcs	.-16     	; 0x24ce <atoi+0x22>
    24de:	1e f4       	brtc	.+6      	; 0x24e6 <atoi+0x3a>
    24e0:	90 95       	com	r25
    24e2:	81 95       	neg	r24
    24e4:	9f 4f       	sbci	r25, 0xFF	; 255
    24e6:	08 95       	ret

000024e8 <strcat>:
    24e8:	fb 01       	movw	r30, r22
    24ea:	dc 01       	movw	r26, r24
    24ec:	0d 90       	ld	r0, X+
    24ee:	00 20       	and	r0, r0
    24f0:	e9 f7       	brne	.-6      	; 0x24ec <strcat+0x4>
    24f2:	11 97       	sbiw	r26, 0x01	; 1
    24f4:	01 90       	ld	r0, Z+
    24f6:	0d 92       	st	X+, r0
    24f8:	00 20       	and	r0, r0
    24fa:	e1 f7       	brne	.-8      	; 0x24f4 <strcat+0xc>
    24fc:	08 95       	ret

000024fe <__mulhi_const_10>:
    24fe:	7a e0       	ldi	r23, 0x0A	; 10
    2500:	97 9f       	mul	r25, r23
    2502:	90 2d       	mov	r25, r0
    2504:	87 9f       	mul	r24, r23
    2506:	80 2d       	mov	r24, r0
    2508:	91 0d       	add	r25, r1
    250a:	11 24       	eor	r1, r1
    250c:	08 95       	ret

0000250e <_exit>:
    250e:	f8 94       	cli

00002510 <__stop_program>:
    2510:	ff cf       	rjmp	.-2      	; 0x2510 <__stop_program>
